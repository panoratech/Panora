# this docker compose is for development purposes.
# use it to run a development environnement locally without pulling pre-built images from cloud 

name: panora
version: '3.8'

services:
  postgres:
    image: postgres:16.1
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./pg_data:/var/lib/postgresql/data
      - ./packages/api/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./packages/api/scripts/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    networks:
      - backend

  api:
    build:
      context: ./
      dockerfile: ./packages/api/Dockerfile.dev
    environment: 
        DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?ssl=false
        DISTRIBUTION: ${DISTRIBUTION}
        JWT_SECRET: ${JWT_SECRET}
        REDIS_HOST: redis
        ENCRYPT_CRYPTO_SECRET_KEY: ${ENCRYPT_CRYPTO_SECRET_KEY}
        HUBSPOT_CRM_CLIENT_ID: ${HUBSPOT_CRM_CLIENT_ID}
        HUBSPOT_CRM_CLIENT_SECRET: ${HUBSPOT_CRM_CLIENT_SECRET}
        ATTIO_CRM_CLIENT_ID: ${ATTIO_CRM_CLIENT_ID}
        ATTIO_CRM_CLIENT_SECRET: ${ATTIO_CRM_CLIENT_SECRET}
        ZOHO_CRM_CLIENT_ID: ${ZOHO_CRM_CLIENT_ID}
        ZOHO_CRM_CLIENT_SECRET: ${ZOHO_CRM_CLIENT_SECRET}
        PIPEDRIVE_CRM_CLIENT_ID: ${PIPEDRIVE_CRM_CLIENT_ID}
        PIPEDRIVE_CRM_CLIENT_SECRET: ${PIPEDRIVE_CRM_CLIENT_SECRET}
        ZENDESK_CRM_CLIENT_ID: ${ZENDESK_CRM_CLIENT_ID}
        ZENDESK_CRM_CLIENT_SECRET: ${ZENDESK_CRM_CLIENT_SECRET}
        OAUTH_REDIRECT_BASE: ${OAUTH_REDIRECT_BASE}
        ZENDESK_TICKETING_CLIENT_ID: ${ZENDESK_TICKETING_CLIENT_ID}
        ZENDESK_TICKETING_CLIENT_SECRET: ${ZENDESK_TICKETING_CLIENT_SECRET}
        ZENDESK_TICKETING_SUBDOMAIN: ${ZENDESK_TICKETING_SUBDOMAIN}
        FRONT_TICKETING_CLIENT_ID: ${FRONT_TICKETING_CLIENT_ID}
        FRONT_TICKETING_CLIENT_SECRET: ${FRONT_TICKETING_CLIENT_SECRET}
        CLICKUP_TICKETING_CLIENT_ID: ${CLICKUP_TICKETING_CLIENT_ID}
        CLICKUP_TICKETING_CLIENT_SECRET: ${CLICKUP_TICKETING_CLIENT_SECRET}
        GITHUB_TICKETING_CLIENT_ID: ${GITHUB_TICKETING_CLIENT_ID}
        GITHUB_TICKETING_CLIENT_SECRET: ${GITHUB_TICKETING_CLIENT_SECRET}
        GITLAB_TICKETING_CLIENT_ID: ${GITLAB_TICKETING_CLIENT_ID}
        GITLAB_TICKETING_CLIENT_SECRET: ${GITLAB_TICKETING_CLIENT_SECRET}
        GORGIAS_TICKETING_CLIENT_ID: ${GORGIAS_TICKETING_CLIENT_ID}
        GORGIAS_TICKETING_CLIENT_SECRET: ${GORGIAS_TICKETING_CLIENT_SECRET}
        GORGIAS_TICKETING_SUBDOMAIN: ${GORGIAS_TICKETING_SUBDOMAIN}
        JIRA_TICKETING_CLIENT_ID: ${JIRA_TICKETING_CLIENT_ID}
        JIRA_TICKETING_CLIENT_SECRET: ${JIRA_TICKETING_CLIENT_SECRET}
        JIRA_SERVICE_MGMT_TICKETING_CLIENT_ID: ${JIRA_SERVICE_MGMT_TICKETING_CLIENT_ID}
        JIRA_SERVICE_MGMT_TICKETING_CLIENT_SECRET: ${JIRA_SERVICE_MGMT_TICKETING_CLIENT_SECRET}
        LINEAR_TICKETING_CLIENT_ID: ${LINEAR_TICKETING_CLIENT_ID}
        LINEAR_TICKETING_CLIENT_SECRET: ${LINEAR_TICKETING_CLIENT_SECRET}
        AFFINITY_CRM_CLIENT_ID: ${AFFINITY_CRM_CLIENT_ID}
        AFFINITY_CRM_CLIENT_SECRET: ${AFFINITY_CRM_CLIENT_SECRET}
        ACCELO_CRM_CLIENT_ID: ${ACCELO_CRM_CLIENT_ID}
        ACCELO_CRM_CLIENT_SECRET: ${ACCELO_CRM_CLIENT_SECRET}
        ACCELO_CRM_SUBDOMAIN: ${ACCELO_CRM_SUBDOMAIN}
        CAPSULE_CRM_CLIENT_ID: ${CAPSULE_CRM_CLIENT_ID}
        CAPSULE_CRM_CLIENT_SECRET: ${CAPSULE_CRM_CLIENT_SECRET}
        CLOSE_CRM_CLIENT_ID: ${CLOSE_CRM_CLIENT_ID}
        CLOSE_CRM_CLIENT_SECRET: ${CLOSE_CRM_CLIENT_SECRET}
        COPPER_CRM_CLIENT_ID: ${COPPER_CRM_CLIENT_ID}
        COPPER_CRM_CLIENT_SECRET: ${COPPER_CRM_CLIENT_SECRET}
        INSIGHTLY_CRM_CLIENT_ID: ${INSIGHTLY_CRM_CLIENT_ID}
        INSIGHTLY_CRM_CLIENT_SECRET: ${INSIGHTLY_CRM_CLIENT_SECRET}
        KEAP_CRM_CLIENT_ID: ${KEAP_CRM_CLIENT_ID}
        KEAP_CRM_CLIENT_SECRET: ${KEAP_CRM_CLIENT_SECRET}
        SUGARCRM_CRM_CLIENT_ID: ${SUGARCRM_CRM_CLIENT_ID}
        SUGARCRM_CRM_CLIENT_SECRET: ${SUGARCRM_CRM_CLIENT_SECRET}
        SUGARCRM_CRM_SUBDOMAIN: ${SUGARCRM_CRM_SUBDOMAIN}
        TEAMLEADER_CRM_CLIENT_ID: ${TEAMLEADER_CRM_CLIENT_ID}
        TEAMLEADER_CRM_CLIENT_SECRET: ${TEAMLEADER_CRM_CLIENT_SECRET}
        TEAMWORK_CRM_CLIENT_ID: ${TEAMWORK_CRM_CLIENT_ID}
        TEAMWORK_CRM_CLIENT_SECRET: ${TEAMWORK_CRM_CLIENT_SECRET}
        AHA_TICKETING_CLIENT_ID: ${AHA_TICKETING_CLIENT_ID}
        AHA_TICKETING_CLIENT_SECRET: ${AHA_TICKETING_CLIENT_SECRET}
        AHA_TICKETING_SUBDOMAIN: ${AHA_TICKETING_SUBDOMAIN}
    restart:
      unless-stopped
    ports:
      - 3000:3000
    depends_on:
        postgres:
          condition: service_healthy
    networks:
      - backend
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 99 # Try launching the API service as long as possible. Required for other services to start 
    
  redis:
    image: "redis:7.2.3-alpine"
    container_name: "Redis"
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - backend
  
  webapp-nextjs:
    build:
      dockerfile: ./apps/client-ts/Dockerfile.dev
      context: ./
      args:
        VITE_BACKEND_DOMAIN: ${NEXT_PUBLIC_BACKEND_DOMAIN}
        VITE_FRONTEND_DOMAIN: ${NEXT_PUBLIC_MAGIC_LINK_DOMAIN}
    environment:
      NEXT_PUBLIC_STYTCH_SECRET: ${NEXT_PUBLIC_STYTCH_SECRET}
      NEXT_PUBLIC_STYTCH_PROJECT_ID: ${NEXT_PUBLIC_STYTCH_PROJECT_ID}
      NEXT_PUBLIC_DISTRIBUTION: ${DISTRIBUTION}
      NEXT_PUBLIC_BACKEND_DOMAIN: ${NEXT_PUBLIC_BACKEND_DOMAIN}
      NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN: ${NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN}
      NEXT_PUBLIC_STYTCH_PROJECT_ENV: ${NEXT_PUBLIC_STYTCH_PROJECT_ENV}
      NEXT_PUBLIC_MAGIC_LINK_DOMAIN: ${NEXT_PUBLIC_MAGIC_LINK_DOMAIN}
      NEXT_PUBLIC_WEBAPP_DOMAIN: ${NEXT_PUBLIC_WEBAPP_DOMAIN}
    restart:
      unless-stopped
    ports:
      - 80:8090
    depends_on:
      api:
        condition: service_healthy

    volumes:
      - .:/app
    networks:
      - backend
      - frontend
  
  magic-link-frontend:
    build:
      dockerfile: ./apps/magic-link/Dockerfile.dev
      context: ./
      args:
        VITE_BACKEND_DOMAIN: ${NEXT_PUBLIC_BACKEND_DOMAIN}
    restart:
      always
    ports:
      - 81:5173
    depends_on:
      api:
        condition: service_healthy
    networks:
      - backend
      - frontend
    volumes:
      - .:/app


networks:
  frontend:
  backend:
