openapi: 3.0.0
paths:
  /:
    get:
      operationId: hello
      summary: ''
      parameters: []
      responses:
        '200':
          description: ''
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result)
            }

            run();
  /health:
    get:
      operationId: health
      summary: ''
      parameters: []
      responses:
        '200':
          description: ''
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result)
            }

            run();
  /webhook:
    get:
      operationId: listWebhooks
      summary: 'List webhooks '
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
      tags: &ref_0
        - webhook
      x-speakeasy-group: webhook
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.list();

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createWebhook
      summary: Add webhook metadata
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhook
      x-codeSamples:
        - lang: typescript
          label: createWebhook
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.create({
                url: "http://limp-pastry.org",
                description: "Inverse discrete benchmark",
                scope: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  /webhook/{id}:
    delete:
      operationId: delete
      summary: Delete Webhook
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhook
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.delete({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    put:
      operationId: updateStatus
      summary: Update webhook status
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhook
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.updateStatus({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /webhook/verifyEvent:
    post:
      operationId: verifyEvent
      summary: Verify payload sgnature of the webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerificationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPayload'
      tags: *ref_0
      x-speakeasy-group: webhook
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.verifyEvent({
                payload: {},
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/tickets:
    get:
      operationId: listTicketingTicket
      summary: List a batch of Tickets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: &ref_1
        - ticketing/tickets
      security: &ref_2
        - bearer: []
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createTicketingTicket
      summary: Create a Ticket
      description: Create a ticket in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingTicketInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      security: *ref_2
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                unifiedTicketingTicketInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/tickets/{id}:
    get:
      operationId: retrieveTicketingTicket
      summary: Retrieve a Ticket
      description: Retrieve a ticket from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `ticket` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      security: *ref_2
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/users:
    get:
      operationId: listTicketingUsers
      summary: List a batch of Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: &ref_3
        - ticketing/users
      security: &ref_4
        - bearer: []
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/users/{id}:
    get:
      operationId: retrieveTicketingUser
      summary: Retrieve a User
      description: Retrieve a user from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: *ref_3
      security: *ref_4
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/accounts:
    get:
      operationId: listTicketingAccount
      summary: List a batch of Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: &ref_5
        - ticketing/accounts
      security: &ref_6
        - bearer: []
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/accounts/{id}:
    get:
      operationId: retrieveTicketingAccount
      summary: Retrieve an Account
      description: Retrieve an account from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: *ref_5
      security: *ref_6
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/contacts:
    get:
      operationId: listTicketingContacts
      summary: List all Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: &ref_7
        - ticketing/contacts
      security: &ref_8
        - bearer: []
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/contacts/{id}:
    get:
      operationId: retrieveTicketingContact
      summary: Retrieve a Contact
      description: Retrieve a contact from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: *ref_7
      security: *ref_8
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /sync/status/{vertical}:
    get:
      operationId: status
      summary: Retrieve sync status of a certain vertical
      parameters:
        - name: vertical
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_9
        - sync
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: status
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.sync.status({
                vertical: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /sync/resync:
    post:
      operationId: resync
      summary: Resync common objects across a vertical
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_9
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result)
            }

            run();
  /crm/companies:
    get:
      operationId: listCrmCompany
      summary: List a batch of Companies
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: &ref_10
        - crm/companies
      security: &ref_11
        - bearer: []
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmCompany
      summary: Create a Company
      description: Create a company in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmCompanyInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_10
      security: *ref_11
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                unifiedCrmCompanyInput: {
                  name: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/companies/{id}:
    get:
      operationId: retrieveCrmCompany
      summary: Retrieve a Company
      description: Retrieve a company from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the company you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_10
      security: *ref_11
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/contacts:
    get:
      operationId: listCrmContacts
      summary: List CRM Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: &ref_12
        - crm/contacts
      security: &ref_13
        - bearer: []
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmContact
      summary: Create CRM Contact
      description: Create a contact in any supported CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_12
      security: *ref_13
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                unifiedCrmContactInput: {
                  firstName: "Jed",
                  lastName: "Kuhn",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/contacts/{id}:
    get:
      operationId: retrieveCrmContact
      summary: Retrieve a CRM Contact
      description: Retrieve a contact from any connected CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `contact` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_12
      security: *ref_13
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/deals:
    get:
      operationId: listCrmDeals
      summary: List a batch of Deals
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: &ref_14
        - crm/deals
      security: &ref_15
        - bearer: []
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmDeal
      summary: Create a Deal
      description: Create a deal in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmDealInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_14
      security: *ref_15
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                  amount: 8592.13,
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/deals/{id}:
    get:
      operationId: retrieveCrmDeal
      summary: Retrieve a Deal
      description: Retrieve a deal from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the deal you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_14
      security: *ref_15
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/engagements:
    get:
      operationId: listCrmEngagements
      summary: List a batch of Engagements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: &ref_16
        - crm/engagements
      security: &ref_17
        - bearer: []
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmEngagement
      summary: Create a Engagement
      description: Create a engagement in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmEngagementInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_16
      security: *ref_17
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                unifiedCrmEngagementInput: {
                  type: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/engagements/{id}:
    get:
      operationId: retrieveCrmEngagement
      summary: Retrieve a Engagement
      description: Retrieve a engagement from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the engagement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_16
      security: *ref_17
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/notes:
    get:
      operationId: listCrmNote
      summary: List a batch of Notes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: &ref_18
        - crm/notes
      security: &ref_19
        - bearer: []
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmNote
      summary: Create a Note
      description: Create a note in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmNoteInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_18
      security: *ref_19
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                unifiedCrmNoteInput: {
                  content: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/notes/{id}:
    get:
      operationId: retrieveCrmNote
      summary: Retrieve a Note
      description: Retrieve a note from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the note you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_18
      security: *ref_19
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/stages:
    get:
      operationId: listCrmStages
      summary: List a batch of Stages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: &ref_20
        - crm/stages
      security: &ref_21
        - bearer: []
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/stages/{id}:
    get:
      operationId: retrieveCrmStage
      summary: Retrieve a Stage
      description: Retrieve a stage from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the stage you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: *ref_20
      security: *ref_21
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/tasks:
    get:
      operationId: listCrmTask
      summary: List a batch of Tasks
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: &ref_22
        - crm/tasks
      security: &ref_23
        - bearer: []
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createCrmTask
      summary: Create a Task
      description: Create a task in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmTaskInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_22
      security: *ref_23
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "<value>",
                  content: "<value>",
                  status: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/tasks/{id}:
    get:
      operationId: retrieveCrmTask
      summary: Retrieve a Task
      description: Retrieve a task from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the task you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_22
      security: *ref_23
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/users:
    get:
      operationId: listCrmUsers
      summary: List a batch of Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: &ref_24
        - crm/users
      security: &ref_25
        - bearer: []
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /crm/users/{id}:
    get:
      operationId: retrieveCrmUser
      summary: Retrieve a User
      description: Retrieve a user from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: *ref_24
      security: *ref_25
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/collections:
    get:
      operationId: listTicketingCollections
      summary: List a batch of Collections
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingCollectionOutput
      tags: &ref_26
        - ticketing/collections
      security: &ref_27
        - bearer: []
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/collections/{id}:
    get:
      operationId: retrieveCollection
      summary: Retrieve a Collection
      description: Retrieve a collection from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the collection you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
      tags: *ref_26
      security: *ref_27
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/comments:
    get:
      operationId: listTicketingComments
      summary: List a batch of Comments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: &ref_28
        - ticketing/comments
      security: &ref_29
        - bearer: []
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createTicketingComment
      summary: Create a Comment
      description: Create a comment in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingCommentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_28
      security: *ref_29
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/comments/{id}:
    get:
      operationId: retrieveTicketingComment
      summary: Retrieve a Comment
      description: Retrieve a comment from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `comment` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_28
      security: *ref_29
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/tags:
    get:
      operationId: listTicketingTags
      summary: List a batch of Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: &ref_30
        - ticketing/tags
      security: &ref_31
        - bearer: []
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/tags/{id}:
    get:
      operationId: retrieveTicketingTag
      summary: Retrieve a Tag
      description: Retrieve a tag from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: *ref_30
      security: *ref_31
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/teams:
    get:
      operationId: listTicketingTeams
      summary: List a batch of Teams
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: &ref_32
        - ticketing/teams
      security: &ref_33
        - bearer: []
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/teams/{id}:
    get:
      operationId: retrieveTicketingTeam
      summary: Retrieve a Team
      description: Retrieve a team from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the team you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: *ref_32
      security: *ref_33
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /linked-users:
    post:
      operationId: createLinkedUser
      summary: Add Linked User
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkedUserDto'
      responses:
        '201':
          description: ''
      tags: &ref_34
        - linkedUsers
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "<value>",
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    get:
      operationId: listLinkedUsers
      summary: Retrieve Linked Users
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_34
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result)
            }

            run();
  /linked-users/batch:
    post:
      operationId: importBatch
      summary: Add Batch Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchLinkedUserDto'
      responses:
        '201':
          description: ''
      tags: *ref_34
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.importBatch({
                linkedUserOriginIds: [
                  "<value>",
                ],
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /linked-users/single:
    get:
      operationId: retrieveLinkedUser
      summary: Retrieve a Linked User
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_34
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.retrieve({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /linked-users/fromRemoteId:
    get:
      operationId: remoteId
      summary: Retrieve a Linked User From A Remote Id
      parameters:
        - name: remoteId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_34
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.remoteId({
                remoteId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /field-mappings/define:
    post:
      operationId: define
      summary: Define target Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefineTargetFieldDto'
      responses:
        '201':
          description: ''
      tags: &ref_35
        - fieldMappings
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: define
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.define({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Optimized object-oriented emulation",
                dataType: "float",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /field-mappings:
    post:
      operationId: create
      summary: Create Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateDto'
      responses:
        '201':
          description: ''
      tags: *ref_35
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: create
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.create({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Multi-tiered human-resource model",
                dataType: "enum",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /field-mappings/map:
    post:
      operationId: map
      summary: Map Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapFieldToProviderDto'
      responses:
        '201':
          description: ''
      tags: *ref_35
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.map({
                attributeId: "<value>",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /passthrough:
    post:
      operationId: request
      summary: Make a passthrough request
      parameters:
        - name: integrationId
          required: true
          in: query
          schema:
            type: string
        - name: linkedUserId
          required: true
          in: query
          schema:
            type: string
        - name: vertical
          required: true
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassThroughRequestDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassThroughResponse'
      tags:
        - passthrough
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { Method } from "@panora/sdk/models/components";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.passthrough.request({
                integrationId: "<value>",
                linkedUserId: "<value>",
                vertical: "<value>",
                passThroughRequestDto: {
                  method: Method.Get,
                  path: "/dev",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/bankinfo:
    get:
      operationId: listHrisBankinfo
      summary: List a batch of Bankinfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: &ref_36
        - hris/bankinfo
      security: &ref_37
        - bearer: []
      x-speakeasy-group: hris.bankinfo
      x-codeSamples:
        - lang: typescript
          label: listHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfo.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/bankinfo/{id}:
    get:
      operationId: retrieveHrisBankinfo
      summary: Retrieve a Bankinfo
      description: Retrieve a bankinfo from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the bankinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: *ref_36
      security: *ref_37
      x-speakeasy-group: hris.bankinfo
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfo.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/benefit:
    get:
      operationId: listHrisBenefit
      summary: List a batch of Benefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: &ref_38
        - hris/benefit
      security: &ref_39
        - bearer: []
      x-speakeasy-group: hris.benefit
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/benefit/{id}:
    get:
      operationId: retrieveHrisBenefit
      summary: Retrieve a Benefit
      description: Retrieve a benefit from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the benefit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: *ref_38
      security: *ref_39
      x-speakeasy-group: hris.benefit
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/company:
    get:
      operationId: listHrisCompanys
      summary: List a batch of Companys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisCompanyOutput'
      tags:
        - hris/company
      security:
        - bearer: []
      x-speakeasy-group: hris.company
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.company.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/dependent:
    get:
      operationId: listHrisDependents
      summary: List a batch of Dependents
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: &ref_40
        - hris/dependent
      security: &ref_41
        - bearer: []
      x-speakeasy-group: hris.dependent
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependent.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/dependent/{id}:
    get:
      operationId: retrieveHrisDependent
      summary: Retrieve a Dependent
      description: Retrieve a dependent from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the dependent you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: *ref_40
      security: *ref_41
      x-speakeasy-group: hris.dependent
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependent.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employeepayrollrun:
    get:
      operationId: listHrisEmployeePayrollRun
      summary: List a batch of EmployeePayrollRuns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployeepayrollrunOutput
      tags: &ref_42
        - hris/employeepayrollrun
      security: &ref_43
        - bearer: []
      x-speakeasy-group: hris.employeepayrollrun
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollrun.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employeepayrollrun/{id}:
    get:
      operationId: retrieveHrisEmployeePayrollRun
      summary: Retrieve a EmployeePayrollRun
      description: Retrieve a employeepayrollrun from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employeepayrollrun you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeepayrollrunOutput'
      tags: *ref_42
      security: *ref_43
      x-speakeasy-group: hris.employeepayrollrun
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollrun.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employee:
    get:
      operationId: listHrisEmployee
      summary: List a batch of Employees
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: &ref_44
        - hris/employee
      security: &ref_45
        - bearer: []
      x-speakeasy-group: hris.employee
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employee.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createHrisEmployee
      summary: Create an Employee
      description: Create an employee in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisEmployeeInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_44
      security: *ref_45
      x-speakeasy-group: hris.employee
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employee.create({
                xConnectionToken: "<value>",
                unifiedHrisEmployeeInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employee/{id}:
    get:
      operationId: retrieveHrisEmployee
      summary: Retrieve an Employee
      description: Retrieve an employee from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employee you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_44
      security: *ref_45
      x-speakeasy-group: hris.employee
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employee.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employerbenefit:
    get:
      operationId: listHrisEmployerBenefit
      summary: List a batch of EmployerBenefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployerbenefitOutput
      tags: &ref_46
        - hris/employerbenefit
      security: &ref_47
        - bearer: []
      x-speakeasy-group: hris.employerbenefit
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employerbenefit/{id}:
    get:
      operationId: retrieveHrisEmployerBenefit
      summary: Retrieve a EmployerBenefit
      description: Retrieve a employerbenefit from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employerbenefit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployerbenefitOutput'
      tags: *ref_46
      security: *ref_47
      x-speakeasy-group: hris.employerbenefit
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employment:
    get:
      operationId: listHrisEmployment
      summary: List a batch of Employments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: &ref_48
        - hris/employment
      security: &ref_49
        - bearer: []
      x-speakeasy-group: hris.employment
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/employment/{id}:
    get:
      operationId: retrieveHrisEmployment
      summary: Retrieve a Employment
      description: Retrieve a employment from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: *ref_48
      security: *ref_49
      x-speakeasy-group: hris.employment
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.employment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/group:
    get:
      operationId: listHrisGroup
      summary: List a batch of Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: &ref_50
        - hris/group
      security: &ref_51
        - bearer: []
      x-speakeasy-group: hris.group
      x-codeSamples:
        - lang: typescript
          label: listHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.group.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/group/{id}:
    get:
      operationId: retrieveHrisGroup
      summary: Retrieve a Group
      description: Retrieve a group from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the group you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: *ref_50
      security: *ref_51
      x-speakeasy-group: hris.group
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.group.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/location:
    get:
      operationId: listHrisLocation
      summary: List a batch of Locations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: &ref_52
        - hris/location
      security: &ref_53
        - bearer: []
      x-speakeasy-group: hris.location
      x-codeSamples:
        - lang: typescript
          label: listHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.location.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/location/{id}:
    get:
      operationId: retrieveHrisLocation
      summary: Retrieve a Location
      description: Retrieve a location from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the location you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: *ref_52
      security: *ref_53
      x-speakeasy-group: hris.location
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.location.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/paygroup:
    get:
      operationId: listHrisPaygroup
      summary: List a batch of PayGroups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: &ref_54
        - hris/paygroup
      security: &ref_55
        - bearer: []
      x-speakeasy-group: hris.paygroup
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroup.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/paygroup/{id}:
    get:
      operationId: retrieveHrisPaygroup
      summary: Retrieve a PayGroup
      description: Retrieve a paygroup from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the paygroup you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: *ref_54
      security: *ref_55
      x-speakeasy-group: hris.paygroup
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroup.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/payrollrun:
    get:
      operationId: listHrisPayrollRuns
      summary: List a batch of PayrollRuns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPayrollrunOutput'
      tags:
        - hris/payrollrun
      security:
        - bearer: []
      x-speakeasy-group: hris.payrollrun
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.payrollrun.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/timeoff:
    get:
      operationId: listHrisTimeoffs
      summary: List a batch of Timeoffs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: &ref_56
        - hris/timeoff
      security: &ref_57
        - bearer: []
      x-speakeasy-group: hris.timeoff
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoff.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createHrisTimeoff
      summary: Create a Timeoff
      description: Create a timeoff in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisTimeoffInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_56
      security: *ref_57
      x-speakeasy-group: hris.timeoff
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoff.create({
                xConnectionToken: "<value>",
                unifiedHrisTimeoffInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/timeoff/{id}:
    get:
      operationId: retrieveHrisTimeoff
      summary: Retrieve a Timeoff
      description: Retrieve a timeoff from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the timeoff you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_56
      security: *ref_57
      x-speakeasy-group: hris.timeoff
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoff.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/timeoffbalance:
    get:
      operationId: listHrisTimeoffbalance
      summary: List a batch of TimeoffBalances
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: &ref_58
        - hris/timeoffbalance
      security: &ref_59
        - bearer: []
      x-speakeasy-group: hris.timeoffbalance
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalance.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /hris/timeoffbalance/{id}:
    get:
      operationId: retrieveHrisTimeoffbalance
      summary: Retrieve a TimeoffBalance
      description: Retrieve a timeoffbalance from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the timeoffbalance you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: *ref_58
      security: *ref_59
      x-speakeasy-group: hris.timeoffbalance
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalance.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/action:
    get:
      operationId: listMarketingautomationAction
      summary: List a batch of Actions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationActionOutput
      tags: &ref_60
        - marketingautomation/action
      security: &ref_61
        - bearer: []
      x-speakeasy-group: marketingautomation.action
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.action.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingautomationAction
      summary: Create a Action
      description: Create a action in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationActionInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_60
      security: *ref_61
      x-speakeasy-group: marketingautomation.action
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.action.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/action/{id}:
    get:
      operationId: retrieveMarketingautomationAction
      summary: Retrieve a Action
      description: Retrieve a action from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the action you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_60
      security: *ref_61
      x-speakeasy-group: marketingautomation.action
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.action.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/automation:
    get:
      operationId: listMarketingautomationAutomation
      summary: List a batch of Automations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: &ref_62
        - marketingautomation/automation
      security: &ref_63
        - bearer: []
      x-speakeasy-group: marketingautomation.automation
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automation.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingautomationAutomation
      summary: Create a Automation
      description: Create a automation in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationAutomationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_62
      security: *ref_63
      x-speakeasy-group: marketingautomation.automation
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automation.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/automation/{id}:
    get:
      operationId: retrieveMarketingautomationAutomation
      summary: Retrieve a Automation
      description: Retrieve a automation from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the automation you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_62
      security: *ref_63
      x-speakeasy-group: marketingautomation.automation
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automation.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/campaign:
    get:
      operationId: listMarketingautomationCampaign
      summary: List a batch of Campaigns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: &ref_64
        - marketingautomation/campaign
      security: &ref_65
        - bearer: []
      x-speakeasy-group: marketingautomation.campaign
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingautomationCampaign
      summary: Create a Campaign
      description: Create a campaign in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationCampaignInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: *ref_64
      security: *ref_65
      x-speakeasy-group: marketingautomation.campaign
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/campaign/{id}:
    get:
      operationId: retrieveMarketingautomationCampaign
      summary: Retrieve a Campaign
      description: Retrieve a campaign from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the campaign you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCampaignOutput'
      tags: *ref_64
      security: *ref_65
      x-speakeasy-group: marketingautomation.campaign
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/contact:
    get:
      operationId: listMarketingAutomationContacts
      summary: List a batch of Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationContactOutput
      tags: &ref_66
        - marketingautomation/contact
      security: &ref_67
        - bearer: []
      x-speakeasy-group: marketingautomation.contact
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contact.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingAutomationContact
      summary: Create a Contact
      description: Create a contact in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_66
      security: *ref_67
      x-speakeasy-group: marketingautomation.contact
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contact.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/contact/{id}:
    get:
      operationId: retrieveMarketingAutomationContact
      summary: Retrieve a Contact
      description: Retrieve a contact from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_66
      security: *ref_67
      x-speakeasy-group: marketingautomation.contact
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contact.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/email:
    get:
      operationId: listMarketingautomationEmails
      summary: List a batch of Emails
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEmailOutput
      tags: &ref_68
        - marketingautomation/email
      security: &ref_69
        - bearer: []
      x-speakeasy-group: marketingautomation.email
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.email.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/email/{id}:
    get:
      operationId: retrieveMarketingautomationEmail
      summary: Retrieve a Email
      description: Retrieve a email from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the email you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEmailOutput'
      tags: *ref_68
      security: *ref_69
      x-speakeasy-group: marketingautomation.email
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.email.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/event:
    get:
      operationId: listMarketingAutomationEvents
      summary: List a batch of Events
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEventOutput
      tags: &ref_70
        - marketingautomation/event
      security: &ref_71
        - bearer: []
      x-speakeasy-group: marketingautomation.event
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.event.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/event/{id}:
    get:
      operationId: retrieveMarketingautomationEvent
      summary: Retrieve a Event
      description: Retrieve a event from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the event you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEventOutput'
      tags: *ref_70
      security: *ref_71
      x-speakeasy-group: marketingautomation.event
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.event.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/list:
    get:
      operationId: listMarketingautomationLists
      summary: List a batch of Lists
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationListOutput
      tags: &ref_72
        - marketingautomation/list
      security: &ref_73
        - bearer: []
      x-speakeasy-group: marketingautomation.list
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.list.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingautomationList
      summary: Create a List
      description: Create a list in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationListInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_72
      security: *ref_73
      x-speakeasy-group: marketingautomation.list
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.list.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/list/{id}:
    get:
      operationId: retrieveMarketingautomationList
      summary: Retrieve a List
      description: Retrieve a list from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the list you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_72
      security: *ref_73
      x-speakeasy-group: marketingautomation.list
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.list.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/message:
    get:
      operationId: listMarketingautomationMessages
      summary: List a batch of Messages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationMessageOutput
      tags: &ref_74
        - marketingautomation/message
      security: &ref_75
        - bearer: []
      x-speakeasy-group: marketingautomation.message
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.message.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/message/{id}:
    get:
      operationId: retrieveMarketingautomationMessage
      summary: Retrieve a Message
      description: Retrieve a message from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the message you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationMessageOutput'
      tags: *ref_74
      security: *ref_75
      x-speakeasy-group: marketingautomation.message
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.message.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/template:
    get:
      operationId: listMarketingautomationTemplates
      summary: List a batch of Templates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationTemplateOutput
      tags: &ref_76
        - marketingautomation/template
      security: &ref_77
        - bearer: []
      x-speakeasy-group: marketingautomation.template
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.template.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createMarketingautomationTemplate
      summary: Create a Template
      description: Create a template in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationTemplateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_76
      security: *ref_77
      x-speakeasy-group: marketingautomation.template
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.template.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/template/{id}:
    get:
      operationId: retrieveMarketingautomationTemplate
      summary: Retrieve a Template
      description: Retrieve a template from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the template you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_76
      security: *ref_77
      x-speakeasy-group: marketingautomation.template
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.template.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/user:
    get:
      operationId: listMarketingAutomationUsers
      summary: List a batch of Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationUserOutput
      tags: &ref_78
        - marketingautomation/user
      security: &ref_79
        - bearer: []
      x-speakeasy-group: marketingautomation.user
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.user.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /marketingautomation/user/{id}:
    get:
      operationId: retrieveMarketingAutomationUser
      summary: Retrieve a User
      description: Retrieve a user from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationUserOutput'
      tags: *ref_78
      security: *ref_79
      x-speakeasy-group: marketingautomation.user
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.user.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/activity:
    get:
      operationId: listAtsActivity
      summary: List a batch of Activities
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: &ref_80
        - ats/activity
      security: &ref_81
        - bearer: []
      x-speakeasy-group: ats.activity
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.activity.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAtsActivity
      summary: Create a Activity
      description: Create a activity in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsActivityInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_80
      security: *ref_81
      x-speakeasy-group: ats.activity
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.activity.create({
                xConnectionToken: "<value>",
                unifiedAtsActivityInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/activity/{id}:
    get:
      operationId: retrieveAtsActivity
      summary: Retrieve a Activity
      description: Retrieve a activity from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the activity you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_80
      security: *ref_81
      x-speakeasy-group: ats.activity
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.activity.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/application:
    get:
      operationId: listAtsApplication
      summary: List a batch of Applications
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: &ref_82
        - ats/application
      security: &ref_83
        - bearer: []
      x-speakeasy-group: ats.application
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.application.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAtsApplication
      summary: Create an Application
      description: Create an application in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsApplicationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_82
      security: *ref_83
      x-speakeasy-group: ats.application
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.application.create({
                xConnectionToken: "<value>",
                unifiedAtsApplicationInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/application/{id}:
    get:
      operationId: retrieveAtsApplication
      summary: Retrieve an Application
      description: Retrieve an application from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the application you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_82
      security: *ref_83
      x-speakeasy-group: ats.application
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.application.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/attachment:
    get:
      operationId: listAtsAttachment
      summary: List a batch of Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: &ref_84
        - ats/attachment
      security: &ref_85
        - bearer: []
      x-speakeasy-group: ats.attachment
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAtsAttachment
      summary: Create a Attachment
      description: Create a attachment in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_84
      security: *ref_85
      x-speakeasy-group: ats.attachment
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachment.create({
                xConnectionToken: "<value>",
                unifiedAtsAttachmentInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/attachment/{id}:
    get:
      operationId: retrieveAtsAttachment
      summary: Retrieve a Attachment
      description: Retrieve a attachment from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_84
      security: *ref_85
      x-speakeasy-group: ats.attachment
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/candidate:
    get:
      operationId: listAtsCandidate
      summary: List a batch of Candidates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: &ref_86
        - ats/candidate
      security: &ref_87
        - bearer: []
      x-speakeasy-group: ats.candidate
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidate.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAtsCandidate
      summary: Create a Candidate
      description: Create a candidate in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsCandidateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_86
      security: *ref_87
      x-speakeasy-group: ats.candidate
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidate.create({
                xConnectionToken: "<value>",
                unifiedAtsCandidateInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/candidate/{id}:
    get:
      operationId: retrieveAtsCandidate
      summary: Retrieve a Candidate
      description: Retrieve a candidate from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the candidate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_86
      security: *ref_87
      x-speakeasy-group: ats.candidate
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidate.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/department:
    get:
      operationId: listAtsDepartments
      summary: List a batch of Departments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: &ref_88
        - ats/department
      security: &ref_89
        - bearer: []
      x-speakeasy-group: ats.department
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.department.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/department/{id}:
    get:
      operationId: retrieveAtsDepartment
      summary: Retrieve a Department
      description: Retrieve a department from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the department you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: *ref_88
      security: *ref_89
      x-speakeasy-group: ats.department
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.department.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/interview:
    get:
      operationId: listAtsInterview
      summary: List a batch of Interviews
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: &ref_90
        - ats/interview
      security: &ref_91
        - bearer: []
      x-speakeasy-group: ats.interview
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.interview.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAtsInterview
      summary: Create a Interview
      description: Create a interview in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsInterviewInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_90
      security: *ref_91
      x-speakeasy-group: ats.interview
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.interview.create({
                xConnectionToken: "<value>",
                unifiedAtsInterviewInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/interview/{id}:
    get:
      operationId: retrieveAtsInterview
      summary: Retrieve a Interview
      description: Retrieve a interview from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the interview you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_90
      security: *ref_91
      x-speakeasy-group: ats.interview
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.interview.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/jobinterviewstage:
    get:
      operationId: listAtsJobInterviewStage
      summary: List a batch of JobInterviewStages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAtsJobinterviewstageOutput
      tags: &ref_92
        - ats/jobinterviewstage
      security: &ref_93
        - bearer: []
      x-speakeasy-group: ats.jobinterviewstage
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstage.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/jobinterviewstage/{id}:
    get:
      operationId: retrieveAtsJobInterviewStage
      summary: Retrieve a JobInterviewStage
      description: Retrieve a jobinterviewstage from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the jobinterviewstage you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobinterviewstageOutput'
      tags: *ref_92
      security: *ref_93
      x-speakeasy-group: ats.jobinterviewstage
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstage.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/job:
    get:
      operationId: listAtsJob
      summary: List a batch of Jobs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: &ref_94
        - ats/job
      security: &ref_95
        - bearer: []
      x-speakeasy-group: ats.job
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.job.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/job/{id}:
    get:
      operationId: retrieveAtsJob
      summary: Retrieve a Job
      description: Retrieve a job from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the job you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: *ref_94
      security: *ref_95
      x-speakeasy-group: ats.job
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.job.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/offer:
    get:
      operationId: listAtsOffer
      summary: List a batch of Offers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: &ref_96
        - ats/offer
      security: &ref_97
        - bearer: []
      x-speakeasy-group: ats.offer
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.offer.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/offer/{id}:
    get:
      operationId: retrieveAtsOffer
      summary: Retrieve a Offer
      description: Retrieve a offer from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the offer you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: *ref_96
      security: *ref_97
      x-speakeasy-group: ats.offer
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.offer.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/office:
    get:
      operationId: listAtsOffice
      summary: List a batch of Offices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: &ref_98
        - ats/office
      security: &ref_99
        - bearer: []
      x-speakeasy-group: ats.office
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.office.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/office/{id}:
    get:
      operationId: retrieveAtsOffice
      summary: Retrieve a Office
      description: Retrieve a office from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the office you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: *ref_98
      security: *ref_99
      x-speakeasy-group: ats.office
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.office.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/rejectreason:
    get:
      operationId: listAtsRejectReasons
      summary: List a batch of RejectReasons
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: &ref_100
        - ats/rejectreason
      security: &ref_101
        - bearer: []
      x-speakeasy-group: ats.rejectreason
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreason.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/rejectreason/{id}:
    get:
      operationId: retrieveAtsRejectReason
      summary: Retrieve a RejectReason
      description: Retrieve a rejectreason from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the rejectreason you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: *ref_100
      security: *ref_101
      x-speakeasy-group: ats.rejectreason
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreason.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/scorecard:
    get:
      operationId: listAtsScorecard
      summary: List a batch of ScoreCards
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: &ref_102
        - ats/scorecard
      security: &ref_103
        - bearer: []
      x-speakeasy-group: ats.scorecard
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecard.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/scorecard/{id}:
    get:
      operationId: retrieveAtsScorecard
      summary: Retrieve a ScoreCard
      description: Retrieve a scorecard from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the scorecard you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: *ref_102
      security: *ref_103
      x-speakeasy-group: ats.scorecard
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecard.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/tag:
    get:
      operationId: listAtsTags
      summary: List a batch of Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: &ref_104
        - ats/tag
      security: &ref_105
        - bearer: []
      x-speakeasy-group: ats.tag
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.tag.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/tag/{id}:
    get:
      operationId: retrieveAtsTag
      summary: Retrieve a Tag
      description: Retrieve a tag from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: *ref_104
      security: *ref_105
      x-speakeasy-group: ats.tag
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.tag.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/user:
    get:
      operationId: listAtsUsers
      summary: List a batch of Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: &ref_106
        - ats/user
      security: &ref_107
        - bearer: []
      x-speakeasy-group: ats.user
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.user.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/user/{id}:
    get:
      operationId: retrieveAtsUser
      summary: Retrieve a User
      description: Retrieve a user from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: *ref_106
      security: *ref_107
      x-speakeasy-group: ats.user
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.user.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/eeocs:
    get:
      operationId: listAtsEeocs
      summary: List a batch of Eeocss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: &ref_108
        - ats/eeocs
      security: &ref_109
        - bearer: []
      x-speakeasy-group: ats.eeocs
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ats/eeocs/{id}:
    get:
      operationId: retrieveAtsEeocs
      summary: Retrieve a Eeocs
      description: Retrieve a eeocs from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the eeocs you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: *ref_108
      security: *ref_109
      x-speakeasy-group: ats.eeocs
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/account:
    get:
      operationId: listAccountingAccounts
      summary: List a batch of Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: &ref_110
        - accounting/account
      security: &ref_111
        - bearer: []
      x-speakeasy-group: accounting.account
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.account.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingAccount
      summary: Create a Account
      description: Create a account in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAccountInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_110
      security: *ref_111
      x-speakeasy-group: accounting.account
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.account.create({
                xConnectionToken: "<value>",
                unifiedAccountingAccountInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/account/{id}:
    get:
      operationId: retrieveAccountingAccount
      summary: Retrieve a Account
      description: Retrieve a account from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_110
      security: *ref_111
      x-speakeasy-group: accounting.account
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.account.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/address:
    get:
      operationId: listAccountingAddress
      summary: List a batch of Addresss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: &ref_112
        - accounting/address
      security: &ref_113
        - bearer: []
      x-speakeasy-group: accounting.address
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.address.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/address/{id}:
    get:
      operationId: retrieveAccountingAddress
      summary: Retrieve a Address
      description: Retrieve a address from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the address you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: *ref_112
      security: *ref_113
      x-speakeasy-group: accounting.address
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.address.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/attachment:
    get:
      operationId: listAccountingAttachments
      summary: List a batch of Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingAttachmentOutput
      tags: &ref_114
        - accounting/attachment
      security: &ref_115
        - bearer: []
      x-speakeasy-group: accounting.attachment
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingAttachment
      summary: Create a Attachment
      description: Create a attachment in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_114
      security: *ref_115
      x-speakeasy-group: accounting.attachment
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachment.create({
                xConnectionToken: "<value>",
                unifiedAccountingAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/attachment/{id}:
    get:
      operationId: retrieveAccountingAttachment
      summary: Retrieve a Attachment
      description: Retrieve a attachment from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_114
      security: *ref_115
      x-speakeasy-group: accounting.attachment
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/balancesheet:
    get:
      operationId: listAccountingBalanceSheets
      summary: List a batch of BalanceSheets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingBalancesheetOutput
      tags: &ref_116
        - accounting/balancesheet
      security: &ref_117
        - bearer: []
      x-speakeasy-group: accounting.balancesheet
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheet.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/balancesheet/{id}:
    get:
      operationId: retrieveAccountingBalanceSheet
      summary: Retrieve a BalanceSheet
      description: Retrieve a balancesheet from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the balancesheet you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingBalancesheetOutput'
      tags: *ref_116
      security: *ref_117
      x-speakeasy-group: accounting.balancesheet
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheet.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/cashflowstatement:
    get:
      operationId: listAccountingCashflowStatement
      summary: List a batch of CashflowStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCashflowstatementOutput
      tags: &ref_118
        - accounting/cashflowstatement
      security: &ref_119
        - bearer: []
      x-speakeasy-group: accounting.cashflowstatement
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatement.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/cashflowstatement/{id}:
    get:
      operationId: retrieveAccountingCashflowStatement
      summary: Retrieve a CashflowStatement
      description: Retrieve a cashflowstatement from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the cashflowstatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCashflowstatementOutput'
      tags: *ref_118
      security: *ref_119
      x-speakeasy-group: accounting.cashflowstatement
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatement.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/companyinfo:
    get:
      operationId: listAccountingCompanyInfos
      summary: List a batch of CompanyInfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCompanyinfoOutput
      tags: &ref_120
        - accounting/companyinfo
      security: &ref_121
        - bearer: []
      x-speakeasy-group: accounting.companyinfo
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfo.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/companyinfo/{id}:
    get:
      operationId: retrieveAccountingCompanyInfo
      summary: Retrieve a CompanyInfo
      description: Retrieve a companyinfo from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the companyinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCompanyinfoOutput'
      tags: *ref_120
      security: *ref_121
      x-speakeasy-group: accounting.companyinfo
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfo.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/contact:
    get:
      operationId: listAccountingContacts
      summary: List a batch of Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: &ref_122
        - accounting/contact
      security: &ref_123
        - bearer: []
      x-speakeasy-group: accounting.contact
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contact.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingContact
      summary: Create a Contact
      description: Create a contact in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_122
      security: *ref_123
      x-speakeasy-group: accounting.contact
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contact.create({
                xConnectionToken: "<value>",
                unifiedAccountingContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/contact/{id}:
    get:
      operationId: retrieveAccountingContact
      summary: Retrieve a Contact
      description: Retrieve a contact from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_122
      security: *ref_123
      x-speakeasy-group: accounting.contact
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contact.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/creditnote:
    get:
      operationId: listAccountingCreditNote
      summary: List a batch of CreditNotes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCreditnoteOutput
      tags: &ref_124
        - accounting/creditnote
      security: &ref_125
        - bearer: []
      x-speakeasy-group: accounting.creditnote
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnote.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/creditnote/{id}:
    get:
      operationId: retrieveAccountingCreditNote
      summary: Retrieve a CreditNote
      description: Retrieve a creditnote from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the creditnote you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCreditnoteOutput'
      tags: *ref_124
      security: *ref_125
      x-speakeasy-group: accounting.creditnote
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnote.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/expense:
    get:
      operationId: listAccountingExpense
      summary: List a batch of Expenses
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: &ref_126
        - accounting/expense
      security: &ref_127
        - bearer: []
      x-speakeasy-group: accounting.expense
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expense.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingExpense
      summary: Create a Expense
      description: Create a expense in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingExpenseInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_126
      security: *ref_127
      x-speakeasy-group: accounting.expense
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expense.create({
                xConnectionToken: "<value>",
                unifiedAccountingExpenseInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/expense/{id}:
    get:
      operationId: retrieveAccountingExpense
      summary: Retrieve a Expense
      description: Retrieve a expense from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the expense you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_126
      security: *ref_127
      x-speakeasy-group: accounting.expense
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expense.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/incomestatement:
    get:
      operationId: listAccountingIncomeStatement
      summary: List a batch of IncomeStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingIncomestatementOutput
      tags: &ref_128
        - accounting/incomestatement
      security: &ref_129
        - bearer: []
      x-speakeasy-group: accounting.incomestatement
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatement.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/incomestatement/{id}:
    get:
      operationId: retrieveAccountingIncomeStatement
      summary: Retrieve a IncomeStatement
      description: Retrieve a incomestatement from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the incomestatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingIncomestatementOutput'
      tags: *ref_128
      security: *ref_129
      x-speakeasy-group: accounting.incomestatement
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatement.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/invoice:
    get:
      operationId: listAccountingInvoice
      summary: List a batch of Invoices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: &ref_130
        - accounting/invoice
      security: &ref_131
        - bearer: []
      x-speakeasy-group: accounting.invoice
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoice.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingInvoice
      summary: Create a Invoice
      description: Create a invoice in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingInvoiceInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_130
      security: *ref_131
      x-speakeasy-group: accounting.invoice
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoice.create({
                xConnectionToken: "<value>",
                unifiedAccountingInvoiceInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/invoice/{id}:
    get:
      operationId: retrieveAccountingInvoice
      summary: Retrieve a Invoice
      description: Retrieve a invoice from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the invoice you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_130
      security: *ref_131
      x-speakeasy-group: accounting.invoice
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoice.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/item:
    get:
      operationId: listAccountingItem
      summary: List a batch of Items
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: &ref_132
        - accounting/item
      security: &ref_133
        - bearer: []
      x-speakeasy-group: accounting.item
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.item.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/item/{id}:
    get:
      operationId: retrieveAccountingItem
      summary: Retrieve a Item
      description: Retrieve a item from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the item you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: *ref_132
      security: *ref_133
      x-speakeasy-group: accounting.item
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.item.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/journalentry:
    get:
      operationId: listAccountingJournalEntry
      summary: List a batch of JournalEntrys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingJournalentryOutput
      tags: &ref_134
        - accounting/journalentry
      security: &ref_135
        - bearer: []
      x-speakeasy-group: accounting.journalentry
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentry.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingJournalEntry
      summary: Create a JournalEntry
      description: Create a journalentry in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingJournalentryInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_134
      security: *ref_135
      x-speakeasy-group: accounting.journalentry
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentry.create({
                xConnectionToken: "<value>",
                unifiedAccountingJournalentryInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/journalentry/{id}:
    get:
      operationId: retrieveAccountingJournalEntry
      summary: Retrieve a JournalEntry
      description: Retrieve a journalentry from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the journalentry you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_134
      security: *ref_135
      x-speakeasy-group: accounting.journalentry
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentry.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/payment:
    get:
      operationId: listAccountingPayment
      summary: List a batch of Payments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: &ref_136
        - accounting/payment
      security: &ref_137
        - bearer: []
      x-speakeasy-group: accounting.payment
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingPayment
      summary: Create a Payment
      description: Create a payment in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPaymentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_136
      security: *ref_137
      x-speakeasy-group: accounting.payment
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payment.create({
                xConnectionToken: "<value>",
                unifiedAccountingPaymentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/payment/{id}:
    get:
      operationId: retrieveAccountingPayment
      summary: Retrieve a Payment
      description: Retrieve a payment from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the payment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_136
      security: *ref_137
      x-speakeasy-group: accounting.payment
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/phonenumber:
    get:
      operationId: listAccountingPhonenumber
      summary: List a batch of PhoneNumbers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPhonenumberOutput
      tags: &ref_138
        - accounting/phonenumber
      security: &ref_139
        - bearer: []
      x-speakeasy-group: accounting.phonenumber
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumber.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/phonenumber/{id}:
    get:
      operationId: retrieveAccountingPhonenumber
      summary: Retrieve a PhoneNumber
      description: Retrieve a phonenumber from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the phonenumber you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPhonenumberOutput'
      tags: *ref_138
      security: *ref_139
      x-speakeasy-group: accounting.phonenumber
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumber.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/purchaseorder:
    get:
      operationId: listAccountingPurchaseOrder
      summary: List a batch of PurchaseOrders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPurchaseorderOutput
      tags: &ref_140
        - accounting/purchaseorder
      security: &ref_141
        - bearer: []
      x-speakeasy-group: accounting.purchaseorder
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createAccountingPurchaseOrder
      summary: Create a PurchaseOrder
      description: Create a purchaseorder in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPurchaseorderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_140
      security: *ref_141
      x-speakeasy-group: accounting.purchaseorder
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.create({
                xConnectionToken: "<value>",
                unifiedAccountingPurchaseorderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/purchaseorder/{id}:
    get:
      operationId: retrieveAccountingPurchaseOrder
      summary: Retrieve a PurchaseOrder
      description: Retrieve a purchaseorder from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the purchaseorder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_140
      security: *ref_141
      x-speakeasy-group: accounting.purchaseorder
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/taxrate:
    get:
      operationId: listAccountingTaxRate
      summary: List a batch of TaxRates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: &ref_142
        - accounting/taxrate
      security: &ref_143
        - bearer: []
      x-speakeasy-group: accounting.taxrate
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrate.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/taxrate/{id}:
    get:
      operationId: retrieveAccountingTaxRate
      summary: Retrieve a TaxRate
      description: Retrieve a taxrate from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the taxrate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: *ref_142
      security: *ref_143
      x-speakeasy-group: accounting.taxrate
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrate.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/trackingcategory:
    get:
      operationId: listAccountingTrackingCategorys
      summary: List a batch of TrackingCategorys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTrackingcategoryOutput
      tags: &ref_144
        - accounting/trackingcategory
      security: &ref_145
        - bearer: []
      x-speakeasy-group: accounting.trackingcategory
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategory.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/trackingcategory/{id}:
    get:
      operationId: retrieveAccountingTrackingCategory
      summary: Retrieve a TrackingCategory
      description: Retrieve a trackingcategory from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the trackingcategory you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTrackingcategoryOutput'
      tags: *ref_144
      security: *ref_145
      x-speakeasy-group: accounting.trackingcategory
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategory.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/transaction:
    get:
      operationId: listAccountingTransaction
      summary: List a batch of Transactions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTransactionOutput
      tags: &ref_146
        - accounting/transaction
      security: &ref_147
        - bearer: []
      x-speakeasy-group: accounting.transaction
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transaction.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/transaction/{id}:
    get:
      operationId: retrieveAccountingTransaction
      summary: Retrieve a Transaction
      description: Retrieve a transaction from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the transaction you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTransactionOutput'
      tags: *ref_146
      security: *ref_147
      x-speakeasy-group: accounting.transaction
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transaction.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/vendorcredit:
    get:
      operationId: listAccountingVendorCredit
      summary: List a batch of VendorCredits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingVendorcreditOutput
      tags: &ref_148
        - accounting/vendorcredit
      security: &ref_149
        - bearer: []
      x-speakeasy-group: accounting.vendorcredit
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /accounting/vendorcredit/{id}:
    get:
      operationId: retrieveAccountingVendorCredit
      summary: Retrieve a VendorCredit
      description: Retrieve a vendorcredit from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the vendorcredit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingVendorcreditOutput'
      tags: *ref_148
      security: *ref_149
      x-speakeasy-group: accounting.vendorcredit
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/drives:
    get:
      operationId: listFilestorageDrives
      summary: List a batch of Drives
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: &ref_150
        - filestorage/drives
      security: &ref_151
        - bearer: []
      x-speakeasy-group: filestorage.drives
      x-codeSamples:
        - lang: typescript
          label: listFilestorageDrives
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/drives/{id}:
    get:
      operationId: retrieveFilestorageDrive
      summary: Retrieve a Drive
      description: Retrieve a drive from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the drive you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: *ref_150
      security: *ref_151
      x-speakeasy-group: filestorage.drives
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageDrive
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/files:
    get:
      operationId: listFilestorageFile
      summary: List a batch of Files
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: &ref_152
        - filestorage/files
      security: &ref_153
        - bearer: []
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createFilestorageFile
      summary: Create a File
      description: Create a file in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: true
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFileInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_152
      security: *ref_153
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "<value>",
                  fileUrl: "<value>",
                  mimeType: "<value>",
                  size: "<value>",
                  folderId: "<value>",
                  permission: "<value>",
                  sharedLink: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/files/{id}:
    get:
      operationId: retrieveFilestorageFile
      summary: Retrieve a File
      description: Retrieve a file from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the file you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_152
      security: *ref_153
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/folders:
    get:
      operationId: listFilestorageFolder
      summary: List a batch of Folders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: &ref_154
        - filestorage/folders
      security: &ref_155
        - bearer: []
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createFilestorageFolder
      summary: Create a Folder
      description: Create a folder in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: true
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFolderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_154
      security: *ref_155
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "<value>",
                  size: "<value>",
                  folderUrl: "<value>",
                  description: "Multi-tiered human-resource model",
                  driveId: "<value>",
                  parentFolderId: "<value>",
                  sharedLink: "<value>",
                  permission: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/folders/{id}:
    get:
      operationId: retrieveFilestorageFolder
      summary: Retrieve a Folder
      description: Retrieve a folder from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the folder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_154
      security: *ref_155
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/groups:
    get:
      operationId: listFilestorageGroup
      summary: List a batch of Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: &ref_156
        - filestorage/groups
      security: &ref_157
        - bearer: []
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/groups/{id}:
    get:
      operationId: retrieveFilestorageGroup
      summary: Retrieve a Group
      description: Retrieve a permission from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: *ref_156
      security: *ref_157
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/users:
    get:
      operationId: listFilestorageUsers
      summary: List a batch of Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedUserOutput'
      tags: &ref_158
        - filestorage/users
      security: &ref_159
        - bearer: []
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /filestorage/users/{id}:
    get:
      operationId: retrieveFilestorageUser
      summary: Retrieve a User
      description: Retrieve a permission from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedUserOutput'
      tags: *ref_158
      security: *ref_159
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/attachments:
    get:
      operationId: listTicketingAttachments
      summary: List a batch of Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          description: Set to get the number of records.
          schema:
            default: 50
            type: number
        - name: cursor
          required: false
          in: query
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingAttachmentOutput
      tags: &ref_160
        - ticketing/attachments
      security: &ref_161
        - bearer: []
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
    post:
      operationId: createTicketingAttachment
      summary: Create a Attachment
      description: Create a attachment in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_160
      security: *ref_161
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  /ticketing/attachments/{id}:
    get:
      operationId: retrieveTicketingAttachment
      summary: Retrieve a Attachment
      description: Retrieve a attachment from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_160
      security: *ref_161
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
info:
  title: Panora API
  description: A unified API to ship integrations
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://api.panora.dev
    description: Production server
  - url: https://api-sandbox.panora.dev
    description: Sandbox server
  - url: https://api-dev.panora.dev
    description: Development server
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
  schemas:
    WebhookResponse:
      type: object
      properties:
        id_webhook_endpoint:
          type: string
          description: The unique UUID of the webhook.
        endpoint_description:
          type: string
          description: The description of the webhook.
        url:
          type: string
          description: The endpoint url of the webhook.
        secret:
          type: string
          description: The secret of the webhook.
        active:
          type: boolean
          description: The status of the webhook.
        created_at:
          format: date-time
          type: string
          description: The created date  of the webhook.
        scope:
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
        id_project:
          type: string
          description: The project id tied to the webhook.
        last_update:
          format: date-time
          type: string
          description: The last update date of the webhook.
      required:
        - id_webhook_endpoint
        - endpoint_description
        - url
        - secret
        - active
        - created_at
        - scope
        - id_project
        - last_update
    WebhookDto:
      type: object
      properties:
        url:
          type: string
          description: The endpoint url of the webhook.
        description:
          type: string
          description: The description of the webhook.
        scope:
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
      required:
        - url
        - description
        - scope
    EventPayload:
      type: object
      properties: {}
    SignatureVerificationDto:
      type: object
      properties:
        payload:
          type: object
          description: The payload event of the webhook.
        signature:
          type: string
          description: The signature of the webhook.
        secret:
          type: string
          description: The secret of the webhook.
      required:
        - payload
        - signature
        - secret
    PaginatedDto:
      type: object
      properties:
        prev_cursor:
          type: string
        next_cursor:
          type: string
        data:
          type: array
          items:
            type: object
      required:
        - prev_cursor
        - next_cursor
        - data
    UnifiedTicketingCommentInput:
      type: object
      properties:
        body:
          type: string
          description: The body of the comment
        html_body:
          type: string
          description: The html body of the comment
        is_private:
          type: boolean
          description: The public status of the comment
        creator_type:
          type: string
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          description: The attachements UUIDs tied to the comment
          type: array
          items:
            type: string
      required:
        - body
    UnifiedTicketingTicketOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the ticket
        status:
          type: string
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          description: The date the ticket is due
        type:
          type: string
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          description: The UUID of the parent ticket
        collections:
          type: string
          description: The collection UUIDs the ticket belongs to
        tags:
          description: The tags names of the ticket
          type: array
          items:
            type: string
        completed_at:
          format: date-time
          type: string
          description: The date the ticket has been completed
        priority:
          type: string
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          description: The UUID of the contact which the ticket belongs to
        attachments:
          description: The attachements UUIDs tied to the ticket
          type: array
          items:
            type: string
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the ticket
        remote_id:
          type: string
          description: The id of the ticket in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - description
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingTicketInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the ticket
        status:
          type: string
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          description: The date the ticket is due
        type:
          type: string
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          description: The UUID of the parent ticket
        collections:
          type: string
          description: The collection UUIDs the ticket belongs to
        tags:
          description: The tags names of the ticket
          type: array
          items:
            type: string
        completed_at:
          format: date-time
          type: string
          description: The date the ticket has been completed
        priority:
          type: string
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          description: The UUID of the contact which the ticket belongs to
        attachments:
          description: The attachements UUIDs tied to the ticket
          type: array
          items:
            type: string
        field_mappings:
          type: object
          properties: {}
      required:
        - name
        - description
        - field_mappings
    UnifiedTicketingUserOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email_address:
          type: string
          description: The email address of the user
        teams:
          description: The teams whose the user is part of
          type: array
          items:
            type: string
        account_id:
          type: string
          description: The account or organization the user is part of
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the user
        remote_id:
          type: string
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - email_address
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingAccountOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the account
        domains:
          description: The domains of the account
          type: array
          items:
            type: string
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the account
        remote_id:
          type: string
          description: The id of the account in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingContactOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the contact
        email_address:
          type: string
          description: The email address of the contact
        phone_number:
          type: string
          description: The phone number of the contact
        details:
          type: string
          description: The details of the contact
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the contact
        remote_id:
          type: string
          description: The id of the contact in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - email_address
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    Email:
      type: object
      properties:
        email_address:
          type: string
          description: The email address
        email_address_type:
          type: string
          description: >-
            The email address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          description: The owner type of an email
      required:
        - email_address
        - email_address_type
    Address:
      type: object
      properties:
        street_1:
          type: string
          description: The street
        street_2:
          type: string
          description: 'More information about the street '
        city:
          type: string
          description: The city
        state:
          type: string
          description: The state
        postal_code:
          type: string
          description: The postal code
        country:
          type: string
          description: The country
        address_type:
          type: string
          description: The address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          description: The owner type of the address
      required:
        - street_1
        - street_2
        - city
        - state
        - postal_code
        - country
        - address_type
        - owner_type
    Phone:
      type: object
      properties:
        phone_number:
          type: string
          description: >-
            The phone number starting with a plus (+) followed by the country code (e.g +336676778890 for France)
        phone_type:
          type: string
          description: The phone type. Authorized values are either MOBILE or WORK
        owner_type:
          type: string
          description: The owner type of a phone number
      required:
        - phone_number
        - phone_type
    UnifiedCrmCompanyOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the company
        industry:
          type: string
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
        number_of_employees:
          type: number
          description: The number of employees of the company
        user_id:
          type: string
          description: The UUID of the user who owns the company
        email_addresses:
          description: The email addresses of the company
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the company
        remote_id:
          type: string
          description: The id of the company in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmCompanyInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the company
        industry:
          type: string
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
        number_of_employees:
          type: number
          description: The number of employees of the company
        user_id:
          type: string
          description: The UUID of the user who owns the company
        email_addresses:
          description: The email addresses of the company
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          properties: {}
      required:
        - name
        - field_mappings
    UnifiedCrmContactOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
        last_name:
          type: string
          description: The last name of the contact
        email_addresses:
          description: The email addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          description: The phone numbers of the contact
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          description: The addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          description: The UUID of the user who owns the contact
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the contact
        remote_id:
          type: string
          description: The id of the contact in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - first_name
        - last_name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmContactInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
        last_name:
          type: string
          description: The last name of the contact
        email_addresses:
          description: The email addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          description: The phone numbers of the contact
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          description: The addresses of the contact
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          description: The UUID of the user who owns the contact
        field_mappings:
          type: object
          properties: {}
      required:
        - first_name
        - last_name
        - field_mappings
    UnifiedCrmDealOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the deal
        description:
          type: string
          description: The description of the deal
        amount:
          type: number
          description: The amount of the deal
        user_id:
          type: string
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          description: The UUID of the stage of the deal
        company_id:
          type: string
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the deal
        remote_id:
          type: string
          description: The id of the deal in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - description
        - amount
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmDealInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the deal
        description:
          type: string
          description: The description of the deal
        amount:
          type: number
          description: The amount of the deal
        user_id:
          type: string
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          description: The UUID of the stage of the deal
        company_id:
          type: string
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          properties: {}
      required:
        - name
        - description
        - amount
        - field_mappings
    UnifiedCrmEngagementOutput:
      type: object
      properties:
        content:
          type: string
          description: The content of the engagement
        direction:
          type: string
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          description: The end time of the engagement
        type:
          type: string
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          description: The UUID of the company tied to the engagement
        contacts:
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the engagement
        remote_id:
          type: string
          description: The id of the engagement in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - type
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmEngagementInput:
      type: object
      properties:
        content:
          type: string
          description: The content of the engagement
        direction:
          type: string
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          description: The end time of the engagement
        type:
          type: string
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          description: The UUID of the company tied to the engagement
        contacts:
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          properties: {}
      required:
        - type
        - field_mappings
    UnifiedCrmNoteOutput:
      type: object
      properties:
        content:
          type: string
          description: The content of the note
        user_id:
          type: string
          description: The UUID of the user tied the note
        company_id:
          type: string
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          description: The UUID fo the contact tied to the note
        deal_id:
          type: string
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the note
        remote_id:
          type: string
          description: The id of the note in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - content
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmNoteInput:
      type: object
      properties:
        content:
          type: string
          description: The content of the note
        user_id:
          type: string
          description: The UUID of the user tied the note
        company_id:
          type: string
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          description: The UUID fo the contact tied to the note
        deal_id:
          type: string
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          properties: {}
      required:
        - content
        - field_mappings
    UnifiedCrmStageOutput:
      type: object
      properties:
        stage_name:
          type: string
          description: The name of the stage
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the stage
        remote_id:
          type: string
          description: The id of the stage in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - stage_name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmTaskOutput:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the task
        content:
          type: string
          description: The content of the task
        status:
          type: string
          description: The status of the task. Authorized values are PENDING, COMPLETED.
        due_date:
          format: date-time
          type: string
          description: The due date of the task
        finished_date:
          format: date-time
          type: string
          description: The finished date of the task
        user_id:
          type: string
          description: The UUID of the user tied to the task
        company_id:
          type: string
          description: The UUID fo the company tied to the task
        deal_id:
          type: string
          description: The UUID of the deal tied to the task
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the task
        remote_id:
          type: string
          description: The id of the task in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - subject
        - content
        - status
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedCrmTaskInput:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the task
        content:
          type: string
          description: The content of the task
        status:
          type: string
          description: The status of the task. Authorized values are PENDING, COMPLETED.
        due_date:
          format: date-time
          type: string
          description: The due date of the task
        finished_date:
          format: date-time
          type: string
          description: The finished date of the task
        user_id:
          type: string
          description: The UUID of the user tied to the task
        company_id:
          type: string
          description: The UUID fo the company tied to the task
        deal_id:
          type: string
          description: The UUID of the deal tied to the task
        field_mappings:
          type: object
          properties: {}
      required:
        - subject
        - content
        - status
        - field_mappings
    UnifiedCrmUserOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the user
        remote_id:
          type: string
          description: The id of the user in the context of the Crm 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - email
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingCollectionOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the collection
        description:
          type: string
          description: The description of the collection
        collection_type:
          type: string
          description: "The type of the collection. Authorized values are either PROJECT or LIST "
        id:
          type: string
          description: The UUID of the collection
        remote_id:
          type: string
          description: The id of the collection in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingCommentOutput:
      type: object
      properties:
        body:
          type: string
          description: The body of the comment
        html_body:
          type: string
          description: The html body of the comment
        is_private:
          type: boolean
          description: The public status of the comment
        creator_type:
          type: string
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          description: The attachements UUIDs tied to the comment
          type: array
          items:
            type: string
        id:
          type: string
          description: The UUID of the comment
        remote_id:
          type: string
          description: The id of the comment in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - body
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingTagOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the tag
        remote_id:
          type: string
          description: The id of the tag in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingTeamOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the team
        description:
          type: string
          description: The description of the team
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the team
        remote_id:
          type: string
          description: The id of the team in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    CreateLinkedUserDto:
      type: object
      properties:
        linked_user_origin_id:
          type: string
        alias:
          type: string
        id_project:
          type: string
      required:
        - linked_user_origin_id
        - alias
        - id_project
    CreateBatchLinkedUserDto:
      type: object
      properties:
        linked_user_origin_ids:
          type: array
          items:
            type: string
        alias:
          type: string
        id_project:
          type: string
      required:
        - linked_user_origin_ids
        - alias
        - id_project
    DefineTargetFieldDto:
      type: object
      properties:
        object_type_owner:
          type: string
        name:
          type: string
        description:
          type: string
        data_type:
          type: string
      required:
        - object_type_owner
        - name
        - description
        - data_type
    CustomFieldCreateDto:
      type: object
      properties:
        object_type_owner:
          type: string
        name:
          type: string
        description:
          type: string
        data_type:
          type: string
        source_custom_field_id:
          type: string
        source_provider:
          type: string
        linked_user_id:
          type: string
      required:
        - object_type_owner
        - name
        - description
        - data_type
        - source_custom_field_id
        - source_provider
        - linked_user_id
    MapFieldToProviderDto:
      type: object
      properties:
        attributeId:
          type: string
        source_custom_field_id:
          type: string
        source_provider:
          type: string
        linked_user_id:
          type: string
      required:
        - attributeId
        - source_custom_field_id
        - source_provider
        - linked_user_id
    PassThroughRequestDto:
      type: object
      properties:
        method:
          enum:
            - GET
            - POST
            - PATCH
            - DELETE
            - PUT
          type: string
        path:
          type: string
        data:
          type: object
        headers:
          type: object
      required:
        - method
        - path
    PassThroughResponse:
      type: object
      properties:
        url:
          type: string
        status:
          type: number
        data:
          type: object
      required:
        - url
        - status
        - data
    UnifiedHrisBankinfoOutput:
      type: object
      properties: {}
    UnifiedHrisBenefitOutput:
      type: object
      properties: {}
    UnifiedHrisCompanyOutput:
      type: object
      properties: {}
    UnifiedHrisDependentOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeepayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeInput:
      type: object
      properties: {}
    UnifiedHrisEmployerbenefitOutput:
      type: object
      properties: {}
    UnifiedHrisEmploymentOutput:
      type: object
      properties: {}
    UnifiedHrisGroupOutput:
      type: object
      properties: {}
    UnifiedHrisLocationOutput:
      type: object
      properties: {}
    UnifiedHrisPaygroupOutput:
      type: object
      properties: {}
    UnifiedHrisPayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffInput:
      type: object
      properties: {}
    UnifiedHrisTimeoffbalanceOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionInput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationInput:
      type: object
      properties: {}
    UnifiedCampaignOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignInput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactInput:
      type: object
      properties: {}
    UnifiedMarketingautomationEmailOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationEventOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListInput:
      type: object
      properties: {}
    UnifiedMarketingautomationMessageOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateInput:
      type: object
      properties: {}
    UnifiedMarketingautomationUserOutput:
      type: object
      properties: {}
    UnifiedAtsActivityOutput:
      type: object
      properties:
        activity_type:
          type: string
          description: The type of activity
        subject:
          type: string
          description: The subject of the activity
        body:
          type: string
          description: The body of the activity
        visibility:
          type: string
          description: The visibility of the activity
        candidate_id:
          type: string
          description: The UUID of the candidate
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the activity
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the activity
        remote_id:
          type: string
          description: The remote ID of the activity in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsActivityInput:
      type: object
      properties:
        activity_type:
          type: string
          description: The type of activity
        subject:
          type: string
          description: The subject of the activity
        body:
          type: string
          description: The body of the activity
        visibility:
          type: string
          description: The visibility of the activity
        candidate_id:
          type: string
          description: The UUID of the candidate
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the activity
        field_mappings:
          type: object
          properties: {}
      required:
        - field_mappings
    UnifiedAtsApplicationOutput:
      type: object
      properties:
        applied_at:
          type: string
          format: date-time
          description: The application date
        rejected_at:
          type: string
          format: date-time
          description: The rejection date
        offers:
          description: The offers UUIDs for the application
          type: array
          items:
            type: string
        source:
          type: string
          description: The source of the application
        credited_to:
          type: string
          description: The UUID of the person credited for the application
        current_stage:
          type: string
          description: The UUID of the current stage of the application
        reject_reason:
          type: string
          description: The rejection reason for the application
        candidate_id:
          type: string
          description: The UUID of the candidate
        job_id:
          type: string
          description: The UUID of the job
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the application
        remote_id:
          type: string
          description: The remote ID of the application in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsApplicationInput:
      type: object
      properties:
        applied_at:
          type: string
          format: date-time
          description: The application date
        rejected_at:
          type: string
          format: date-time
          description: The rejection date
        offers:
          description: The offers UUIDs for the application
          type: array
          items:
            type: string
        source:
          type: string
          description: The source of the application
        credited_to:
          type: string
          description: The UUID of the person credited for the application
        current_stage:
          type: string
          description: The UUID of the current stage of the application
        reject_reason:
          type: string
          description: The rejection reason for the application
        candidate_id:
          type: string
          description: The UUID of the candidate
        job_id:
          type: string
          description: The UUID of the job
        field_mappings:
          type: object
          properties: {}
      required:
        - field_mappings
    UnifiedAtsAttachmentOutput:
      type: object
      properties:
        file_url:
          type: string
          description: The URL of the file
        file_name:
          type: string
          description: The name of the file
        attachment_type:
          type: string
          description: The type of the file
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the attachment
        remote_modified_at:
          type: string
          format: date-time
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          description: The UUID of the candidate
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the attachment
        remote_id:
          type: string
          description: The remote ID of the attachment
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsAttachmentInput:
      type: object
      properties:
        file_url:
          type: string
          description: The URL of the file
        file_name:
          type: string
          description: The name of the file
        attachment_type:
          type: string
          description: The type of the file
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the attachment
        remote_modified_at:
          type: string
          format: date-time
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          description: The UUID of the candidate
        field_mappings:
          type: object
          properties: {}
      required:
        - field_mappings
    Url:
      type: object
      properties: {}
    UnifiedAtsCandidateOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the candidate
        last_name:
          type: string
          description: The last name of the candidate
        company:
          type: string
          description: The company of the candidate
        title:
          type: string
          description: The title of the candidate
        locations:
          type: string
          description: The locations of the candidate
        is_private:
          type: boolean
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          description: Whether the candidate is reachable by email
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the candidate
        remote_modified_at:
          type: string
          format: date-time
          description: The remote modification date of the candidate
        last_interaction_at:
          type: string
          format: date-time
          description: The last interaction date with the candidate
        attachments:
          description: The attachments UUIDs of the candidate
          type: array
          items:
            type: string
        applications:
          description: The applications UUIDs of the candidate
          type: array
          items:
            type: string
        tags:
          description: The tags of the candidate
          type: array
          items:
            type: string
        urls:
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the candidate
        remote_id:
          type: string
          description: The id of the candidate in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsCandidateInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the candidate
        last_name:
          type: string
          description: The last name of the candidate
        company:
          type: string
          description: The company of the candidate
        title:
          type: string
          description: The title of the candidate
        locations:
          type: string
          description: The locations of the candidate
        is_private:
          type: boolean
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          description: Whether the candidate is reachable by email
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the candidate
        remote_modified_at:
          type: string
          format: date-time
          description: The remote modification date of the candidate
        last_interaction_at:
          type: string
          format: date-time
          description: The last interaction date with the candidate
        attachments:
          description: The attachments UUIDs of the candidate
          type: array
          items:
            type: string
        applications:
          description: The applications UUIDs of the candidate
          type: array
          items:
            type: string
        tags:
          description: The tags of the candidate
          type: array
          items:
            type: string
        urls:
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          properties: {}
      required:
        - field_mappings
    UnifiedAtsDepartmentOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the department
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the department
        remote_id:
          type: string
          description: The remote ID of the department in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsInterviewOutput:
      type: object
      properties:
        status:
          type: string
          description: The status of the interview
        application_id:
          type: string
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          description: The UUID of the job interview stage
        organized_by:
          type: string
          description: The UUID of the organizer
        interviewers:
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          description: The location of the interview
        start_at:
          type: string
          format: date-time
          description: The start date and time of the interview
        end_at:
          type: string
          format: date-time
          description: The end date and time of the interview
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the interview
        remote_updated_at:
          type: string
          format: date-time
          description: The remote modification date of the interview
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the interview
        remote_id:
          type: string
          description: The remote ID of the interview in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsInterviewInput:
      type: object
      properties:
        status:
          type: string
          description: The status of the interview
        application_id:
          type: string
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          description: The UUID of the job interview stage
        organized_by:
          type: string
          description: The UUID of the organizer
        interviewers:
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          description: The location of the interview
        start_at:
          type: string
          format: date-time
          description: The start date and time of the interview
        end_at:
          type: string
          format: date-time
          description: The end date and time of the interview
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the interview
        remote_updated_at:
          type: string
          format: date-time
          description: The remote modification date of the interview
        field_mappings:
          type: object
          properties: {}
      required:
        - field_mappings
    UnifiedAtsJobinterviewstageOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the job interview stage
        stage_order:
          type: number
          description: The order of the stage
        job_id:
          type: string
          description: The UUID of the job
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the job interview stage
        remote_id:
          type: string
          description: >-
            The remote ID of the job interview stage in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsJobOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the job
        description:
          type: string
          description: The description of the job
        code:
          type: string
          description: The code of the job
        status:
          type: string
          description: The status of the job
        type:
          type: string
          description: The type of the job
        confidential:
          type: boolean
          description: Whether the job is confidential
        departments:
          description: The departments UUIDs associated with the job
          type: array
          items:
            type: string
        offices:
          description: The offices UUIDs associated with the job
          type: array
          items:
            type: string
        managers:
          description: The managers UUIDs associated with the job
          type: array
          items:
            type: string
        recruiters:
          description: The recruiters UUIDs associated with the job
          type: array
          items:
            type: string
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the job
        remote_updated_at:
          type: string
          format: date-time
          description: The remote modification date of the job
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the job
        remote_id:
          type: string
          description: The remote ID of the job in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsOfferOutput:
      type: object
      properties:
        created_by:
          type: string
          description: The UUID of the creator
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the offer
        closed_at:
          type: string
          format: date-time
          description: The closing date of the offer
        sent_at:
          type: string
          format: date-time
          description: The sending date of the offer
        start_date:
          type: string
          format: date-time
          description: The start date of the offer
        status:
          type: string
          description: The status of the offer
        application_id:
          type: string
          description: The UUID of the application
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the offer
        remote_id:
          type: string
          description: The remote ID of the offer in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsOfficeOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the office
        location:
          type: string
          description: The location of the office
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the office
        remote_id:
          type: string
          description: The remote ID of the office in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsRejectreasonOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the reject reason
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the reject reason
        remote_id:
          type: string
          description: The remote ID of the reject reason in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsScorecardOutput:
      type: object
      properties:
        overall_recommendation:
          type: string
          description: The overall recommendation
        application_id:
          type: string
          description: The UUID of the application
        interview_id:
          type: string
          description: The UUID of the interview
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the scorecard
        submitted_at:
          type: string
          format: date-time
          description: The submission date of the scorecard
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the scorecard
        remote_id:
          type: string
          description: The remote ID of the scorecard in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsTagOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag
        id_ats_candidate:
          type: string
          description: The UUID of the candidate
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the tag
        remote_id:
          type: string
          description: The remote ID of the tag in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: string
          format: date-time
          description: The creation date of the tag
        modified_at:
          type: string
          format: date-time
          description: The modification date of the tag
      required:
        - field_mappings
        - remote_data
    UnifiedAtsUserOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the user
        last_name:
          type: string
          description: The last name of the user
        email:
          type: string
          description: The email of the user
        disabled:
          type: boolean
          description: Whether the user is disabled
        access_role:
          type: string
          description: The access role of the user
        remote_created_at:
          type: string
          format: date-time
          description: The remote creation date of the user
        remote_modified_at:
          type: string
          format: date-time
          description: The remote modification date of the user
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the user
        remote_id:
          type: string
          description: The remote ID of the user in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAtsEeocsOutput:
      type: object
      properties:
        candidate_id:
          type: string
          description: The UUID of the candidate
        submitted_at:
          type: string
          format: date-time
          description: The submission date of the EEOC
        race:
          type: string
          description: The race of the candidate
        gender:
          type: string
          description: The gender of the candidate
        veteran_status:
          type: string
          description: The veteran status of the candidate
        disability_status:
          type: string
          description: The disability status of the candidate
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the EEOC
        remote_id:
          type: string
          description: The remote ID of the EEOC in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedAccountingAccountOutput:
      type: object
      properties: {}
    UnifiedAccountingAccountInput:
      type: object
      properties: {}
    UnifiedAccountingAddressOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentInput:
      type: object
      properties: {}
    UnifiedAccountingBalancesheetOutput:
      type: object
      properties: {}
    UnifiedAccountingCashflowstatementOutput:
      type: object
      properties: {}
    UnifiedAccountingCompanyinfoOutput:
      type: object
      properties: {}
    UnifiedAccountingContactOutput:
      type: object
      properties: {}
    UnifiedAccountingContactInput:
      type: object
      properties: {}
    UnifiedAccountingCreditnoteOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseInput:
      type: object
      properties: {}
    UnifiedAccountingIncomestatementOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceInput:
      type: object
      properties: {}
    UnifiedAccountingItemOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryInput:
      type: object
      properties: {}
    UnifiedAccountingPaymentOutput:
      type: object
      properties: {}
    UnifiedAccountingPaymentInput:
      type: object
      properties: {}
    UnifiedAccountingPhonenumberOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderInput:
      type: object
      properties: {}
    UnifiedAccountingTaxrateOutput:
      type: object
      properties: {}
    UnifiedAccountingTrackingcategoryOutput:
      type: object
      properties: {}
    UnifiedAccountingTransactionOutput:
      type: object
      properties: {}
    UnifiedAccountingVendorcreditOutput:
      type: object
      properties: {}
    UnifiedFilestorageDriveOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the drive
        remote_created_at:
          type: string
          description: When the third party s drive was created.
        drive_url:
          type: string
          description: The url of the drive
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the drive
        remote_id:
          type: string
          description: The id of the drive in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - remote_created_at
        - drive_url
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedFilestorageFileOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the file
        file_url:
          type: string
          description: The url of the file
        mime_type:
          type: string
          description: The mime type of the file
        size:
          type: string
          description: The size of the file
        folder_id:
          type: string
          description: The UUID of the folder tied to the file
        permission:
          type: string
          description: The UUID of the permission tied to the file
        shared_link:
          type: string
          description: The UUID of the shared link tied to the file
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the file
        remote_id:
          type: string
          description: The id of the file in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedFilestorageFileInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the file
        file_url:
          type: string
          description: The url of the file
        mime_type:
          type: string
          description: The mime type of the file
        size:
          type: string
          description: The size of the file
        folder_id:
          type: string
          description: The UUID of the folder tied to the file
        permission:
          type: string
          description: The UUID of the permission tied to the file
        shared_link:
          type: string
          description: The UUID of the shared link tied to the file
        field_mappings:
          type: object
          properties: {}
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
        - field_mappings
    UnifiedFilestorageFolderOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder
        size:
          type: string
          description: The size of the folder
        folder_url:
          type: string
          description: The url of the folder
        description:
          type: string
          description: The description of the folder
        drive_id:
          type: string
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          description: The UUID of the parent folder
        shared_link:
          type: string
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the folder
        remote_id:
          type: string
          description: The id of the folder in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedFilestorageFolderInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder
        size:
          type: string
          description: The size of the folder
        folder_url:
          type: string
          description: The url of the folder
        description:
          type: string
          description: The description of the folder
        drive_id:
          type: string
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          description: The UUID of the parent folder
        shared_link:
          type: string
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          properties: {}
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
        - field_mappings
    UnifiedFilestorageGroupOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the group
        users:
          description: Uuids of users of the group
          type: array
          items:
            type: string
        remote_was_deleted:
          type: boolean
          description: >-
            Indicates whether or not this object has been deleted in the third party platform.
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the group
        remote_id:
          type: string
          description: The id of the group in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - users
        - remote_was_deleted
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedUserOutput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        is_me:
          type: boolean
          description: Whether the user is the one who linked this account.
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the user
        remote_id:
          type: string
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - name
        - email
        - is_me
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingAttachmentOutput:
      type: object
      properties:
        file_name:
          type: string
          description: The file name of the attachment
        file_url:
          type: string
          description: The file url of the attachment
        uploader:
          type: string
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          properties: {}
        id:
          type: string
          description: The UUID of the attachment
        remote_id:
          type: string
          description: The id of the attachment in the context of the 3rd Party
        remote_data:
          type: object
          properties: {}
        created_at:
          type: object
          properties: {}
        modified_at:
          type: object
          properties: {}
      required:
        - file_name
        - file_url
        - uploader
        - field_mappings
        - remote_data
        - created_at
        - modified_at
    UnifiedTicketingAttachmentInput:
      type: object
      properties:
        file_name:
          type: string
          description: The file name of the attachment
        file_url:
          type: string
          description: The file url of the attachment
        uploader:
          type: string
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          properties: {}
      required:
        - file_name
        - file_url
        - uploader
        - field_mappings
x-speakeasy-name-override:
  - operationId: ^retrieve.*
    methodNameOverride: retrieve
  - operationId: ^list.*
    methodNameOverride: list
  - operationId: ^create.*
    methodNameOverride: create
