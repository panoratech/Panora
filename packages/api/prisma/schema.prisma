generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id_user                 String     @id(map: "pk_users") @db.Uuid
  identification_strategy String
  email                   String?
  password_hash           String?
  first_name              String
  last_name               String
  id_stytch               String?    @unique(map: "force_stytch_id_unique")
  created_at              DateTime   @default(now()) @db.Timestamp(6)
  modified_at             DateTime   @default(now()) @db.Timestamp(6)
  api_keys                api_keys[]
  projects                projects[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model webhook_endpoints {
  id_webhook_endpoint       String                      @id(map: "pk_webhook_endpoint") @db.Uuid
  endpoint_description      String?
  url                       String
  secret                    String
  active                    Boolean
  created_at                DateTime                    @db.Timestamp(6)
  scope                     String[]
  id_project                String                      @db.Uuid
  last_update               DateTime?                   @db.Timestamp(6)
  webhook_delivery_attempts webhook_delivery_attempts[]
}

model webhooks_payloads {
  id_webhooks_payload       String                      @id(map: "pk_webhooks_payload") @db.Uuid
  data                      Json                        @db.Json
  webhook_delivery_attempts webhook_delivery_attempts[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model webhooks_reponses {
  id_webhooks_reponse       String                      @id(map: "pk_webhooks_reponse") @db.Uuid
  http_response_data        String
  http_status_code          String
  webhook_delivery_attempts webhook_delivery_attempts[]
}

model api_keys {
  id_api_key   String   @id(map: "id_") @db.Uuid
  api_key_hash String   @unique(map: "unique_api_keys")
  name         String?
  id_project   String   @db.Uuid
  id_user      String   @db.Uuid
  projects     projects @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_7")
  users        users    @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_8")

  @@index([id_user], map: "fk_2")
  @@index([id_project], map: "fk_api_keys_projects")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model attribute {
  id_attribute         String  @id(map: "pk_attribute") @db.Uuid
  status               String
  ressource_owner_type String
  slug                 String
  description          String
  data_type            String
  remote_id            String
  source               String
  id_entity            String? @db.Uuid
  id_project           String  @db.Uuid
  scope                String
  id_consumer          String? @db.Uuid
  entity               entity? @relation(fields: [id_entity], references: [id_entity], onDelete: NoAction, onUpdate: NoAction, map: "fk_32")
  value                value[]

  @@index([id_entity], map: "fk_attribute_entityid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model connection_strategies {
  id_connection_strategy String  @id(map: "pk_connection_strategies") @db.Uuid
  status                 Boolean
  type                   String
  id_project             String? @db.Uuid
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model connections {
  id_connection        String       @id(map: "pk_connections") @db.Uuid
  status               String
  provider_slug        String
  vertical             String
  account_url          String?
  token_type           String
  access_token         String?
  refresh_token        String?
  expiration_timestamp DateTime?    @db.Timestamp(6)
  created_at           DateTime     @db.Timestamp(6)
  connection_token     String?
  id_project           String       @db.Uuid
  id_linked_user       String       @db.Uuid
  linked_users         linked_users @relation(fields: [id_linked_user], references: [id_linked_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_11")
  projects             projects     @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_9")

  @@unique([access_token, refresh_token], map: "index_3")
  @@index([id_project], map: "fk_1")
  @@index([id_linked_user], map: "fk_connections_to_linkedusersid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_addresses {
  id_crm_address String         @id(map: "pk_crm_addresses") @db.Uuid
  street_1       String?
  street_2       String?
  city           String?
  state          String?
  postal_code    String?
  country        String?
  address_type   String?
  created_at     DateTime       @db.Timestamp(6)
  modified_at    DateTime       @db.Timestamp(6)
  owner_type     String
  id_crm_company String?        @db.Uuid
  id_crm_contact String?        @db.Uuid
  crm_contacts   crm_contacts?  @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_14")
  crm_companies  crm_companies? @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_15")

  @@index([id_crm_contact], map: "fk_crm_addresses_to_crm_contacts")
  @@index([id_crm_company], map: "fk_crm_adresses_to_crm_companies")
}

model crm_companies {
  id_crm_company      String                @id(map: "pk_crm_companies") @db.Uuid
  name                String?
  industry            String?
  number_of_employees BigInt?
  created_at          DateTime              @db.Timestamp(6)
  modified_at         DateTime              @db.Timestamp(6)
  remote_id           String?
  remote_platform     String?
  id_crm_user         String?               @db.Uuid
  id_linked_user      String?               @db.Uuid
  crm_addresses       crm_addresses[]
  crm_users           crm_users?            @relation(fields: [id_crm_user], references: [id_crm_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_24")
  crm_deals           crm_deals[]
  crm_email_addresses crm_email_addresses[]
  crm_engagements     crm_engagements[]
  crm_notes           crm_notes[]
  crm_phone_numbers   crm_phone_numbers[]
  crm_tasks           crm_tasks[]

  @@index([id_crm_user], map: "fk_crm_company_crm_userid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_contacts {
  id_crm_contact      String                @id(map: "pk_crm_contacts") @db.Uuid
  first_name          String
  last_name           String
  created_at          DateTime              @db.Timestamp(6)
  modified_at         DateTime              @db.Timestamp(6)
  remote_id           String
  remote_platform     String
  id_crm_user         String?               @db.Uuid
  id_linked_user      String?               @db.Uuid
  crm_addresses       crm_addresses[]
  crm_users           crm_users?            @relation(fields: [id_crm_user], references: [id_crm_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_23")
  crm_email_addresses crm_email_addresses[]
  crm_notes           crm_notes[]
  crm_phone_numbers   crm_phone_numbers[]

  @@index([id_crm_user], map: "fk_crm_contact_userid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_deals {
  id_crm_deal        String            @id(map: "pk_crm_deal") @db.Uuid
  name               String
  description        String
  amount             BigInt
  created_at         DateTime          @db.Timestamp(6)
  modified_at        DateTime          @db.Timestamp(6)
  remote_id          String?
  remote_platform    String?
  id_crm_user        String?           @db.Uuid
  id_crm_deals_stage String?           @db.Uuid
  id_linked_user     String?           @db.Uuid
  id_crm_company     String?           @db.Uuid
  crm_deals_stages   crm_deals_stages? @relation(fields: [id_crm_deals_stage], references: [id_crm_deals_stage], onDelete: NoAction, onUpdate: NoAction, map: "fk_21")
  crm_users          crm_users?        @relation(fields: [id_crm_user], references: [id_crm_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_22")
  crm_companies      crm_companies?    @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_47_1")
  crm_notes          crm_notes[]
  crm_tasks          crm_tasks[]

  @@index([id_crm_user], map: "crm_deal_crm_userid")
  @@index([id_crm_deals_stage], map: "crm_deal_deal_stageid")
  @@index([id_crm_company], map: "fk_crm_deal_crmcompanyid")
}

model crm_deals_stages {
  id_crm_deals_stage String      @id(map: "pk_crm_deal_stages") @db.Uuid
  stage_name         String?
  created_at         DateTime    @db.Timestamp(6)
  modified_at        DateTime    @db.Timestamp(6)
  id_linked_user     String?     @db.Uuid
  remote_id          String?
  remote_platform    String?
  crm_deals          crm_deals[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_email_addresses {
  id_crm_email       String         @id(map: "pk_crm_contact_email_addresses") @db.Uuid
  email_address      String
  email_address_type String
  owner_type         String
  created_at         DateTime       @db.Timestamp(6)
  modified_at        DateTime       @db.Timestamp(6)
  id_crm_company     String?        @db.Uuid
  id_crm_contact     String?        @db.Uuid
  crm_companies      crm_companies? @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_16")
  crm_contacts       crm_contacts?  @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_3")

  @@index([id_crm_contact], map: "crm_contactid_crm_contact_email_address")
  @@index([id_crm_company], map: "fk_contact_email_adress_companyid")
}

model crm_engagement_contacts {
  id_crm_engagement_contact String          @id(map: "pk_crm_engagement_contact") @db.Uuid
  id_crm_contact            String?         @db.Uuid
  id_crm_engagement         String          @db.Uuid
  crm_engagements           crm_engagements @relation(fields: [id_crm_engagement], references: [id_crm_engagement], onDelete: NoAction, onUpdate: NoAction, map: "fk_30")

  @@index([id_crm_engagement], map: "fk_crm_engagement_contacts_crmengagementid")
  @@index([id_crm_contact], map: "fk_engagement_contact_crmcontactid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_engagements {
  id_crm_engagement       String                    @id(map: "pk_crm_engagement") @db.Uuid
  content                 String?
  type                    String?
  direction               String?
  subject                 String?
  start_at                DateTime?                 @db.Timestamp(6)
  end_time                DateTime?                 @db.Timestamp(6)
  created_at              DateTime?                 @db.Timestamp(6)
  modified_at             DateTime?                 @db.Timestamp(6)
  remote_id               String?
  id_linked_user          String?                   @db.Uuid
  remote_platform         String?
  id_crm_company          String?                   @db.Uuid
  id_crm_user             String?                   @db.Uuid
  crm_engagement_contacts crm_engagement_contacts[]
  crm_companies           crm_companies?            @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_29")
  crm_users               crm_users?                @relation(fields: [id_crm_user], references: [id_crm_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_crm_engagement_crm_user")

  @@index([id_crm_user], map: "fk_crm_engagement_crm_user_id")
  @@index([id_crm_company], map: "fk_crm_engagement_crmcompanyid")
}

model crm_notes {
  id_crm_note     String         @id(map: "pk_crm_notes") @db.Uuid
  content         String
  created_at      DateTime       @db.Timestamp(6)
  modified_at     DateTime       @db.Timestamp(6)
  id_crm_company  String?        @db.Uuid
  id_crm_contact  String?        @db.Uuid
  id_crm_deal     String?        @db.Uuid
  id_linked_user  String?        @db.Uuid
  remote_id       String?
  remote_platform String?
  id_crm_user     String?        @db.Uuid
  crm_companies   crm_companies? @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_18")
  crm_contacts    crm_contacts?  @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_19")
  crm_deals       crm_deals?     @relation(fields: [id_crm_deal], references: [id_crm_deal], onDelete: NoAction, onUpdate: NoAction, map: "fk_20")

  @@index([id_crm_contact], map: "fk_crm_note_crm_companyid")
  @@index([id_crm_company], map: "fk_crm_note_crm_contactid")
  @@index([id_crm_user], map: "fk_crm_note_crm_userid")
  @@index([id_crm_deal], map: "fk_crm_notes_crm_dealid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model crm_phone_numbers {
  id_crm_phone_number String         @id(map: "pk_crm_contacts_phone_numbers") @db.Uuid
  phone_number        String
  phone_type          String
  owner_type          String
  created_at          DateTime       @db.Timestamp(6)
  modified_at         DateTime       @db.Timestamp(6)
  id_crm_company      String?        @db.Uuid
  id_crm_contact      String?        @db.Uuid
  crm_companies       crm_companies? @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_17")
  crm_contacts        crm_contacts?  @relation(fields: [id_crm_contact], references: [id_crm_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_phonenumber_crm_contactid")

  @@index([id_crm_contact], map: "crm_contactid_crm_contact_phone_number")
  @@index([id_crm_company], map: "fk_phone_number_companyid")
}

model crm_tasks {
  id_crm_task     String         @id(map: "pk_crm_task") @db.Uuid
  subject         String?
  content         String?
  status          String?
  due_date        DateTime?      @db.Timestamp(6)
  finished_date   DateTime?      @db.Timestamp(6)
  created_at      DateTime       @db.Timestamp(6)
  modified_at     DateTime       @db.Timestamp(6)
  id_crm_user     String?        @db.Uuid
  id_crm_company  String?        @db.Uuid
  id_crm_deal     String?        @db.Uuid
  id_linked_user  String?        @db.Uuid
  remote_id       String?
  remote_platform String?
  crm_users       crm_users?     @relation(fields: [id_crm_user], references: [id_crm_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_25")
  crm_companies   crm_companies? @relation(fields: [id_crm_company], references: [id_crm_company], onDelete: NoAction, onUpdate: NoAction, map: "fk_26")
  crm_deals       crm_deals?     @relation(fields: [id_crm_deal], references: [id_crm_deal], onDelete: NoAction, onUpdate: NoAction, map: "fk_27")

  @@index([id_crm_company], map: "fk_crm_task_companyid")
  @@index([id_crm_user], map: "fk_crm_task_userid")
  @@index([id_crm_deal], map: "fk_crmtask_dealid")
}

model crm_users {
  id_crm_user     String            @id(map: "pk_crm_users") @db.Uuid
  name            String?
  email           String?
  created_at      DateTime          @db.Timestamp(6)
  modified_at     DateTime          @db.Timestamp(6)
  id_linked_user  String?           @db.Uuid
  remote_id       String?
  remote_platform String?
  crm_companies   crm_companies[]
  crm_contacts    crm_contacts[]
  crm_deals       crm_deals[]
  crm_engagements crm_engagements[]
  crm_tasks       crm_tasks[]
}

model cs_attributes {
  id_cs_attribute String @id(map: "pk_ct_attributes") @db.Uuid
  attribute_slug  String
  data_type       String
  id_cs_entity    String @db.Uuid
}

model cs_entities {
  id_cs_entity           String @id(map: "pk_ct_entities") @db.Uuid
  id_connection_strategy String @db.Uuid
}

model cs_values {
  id_cs_value     String @id(map: "pk_ct_values") @db.Uuid
  value           String
  id_cs_attribute String @db.Uuid
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model entity {
  id_entity          String      @id(map: "pk_entity") @db.Uuid
  ressource_owner_id String      @db.Uuid
  attribute          attribute[]
  value              value[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model events {
  id_event                  String                      @id(map: "pk_jobs") @db.Uuid
  status                    String
  type                      String
  direction                 String
  timestamp                 DateTime                    @default(now()) @db.Timestamp(6)
  method                    String
  url                       String
  provider                  String
  id_linked_user            String                      @db.Uuid
  linked_users              linked_users                @relation(fields: [id_linked_user], references: [id_linked_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_12")
  jobs_status_history       jobs_status_history[]
  webhook_delivery_attempts webhook_delivery_attempts[]

  @@index([id_linked_user], map: "fk_linkeduserid_projectid")
}

model invite_links {
  id_invite_link String       @id(map: "pk_invite_links") @db.Uuid
  status         String
  email          String?
  id_linked_user String       @db.Uuid
  linked_users   linked_users @relation(fields: [id_linked_user], references: [id_linked_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_37")

  @@index([id_linked_user], map: "fk_invite_link_linkeduserid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jobs_status_history {
  id_jobs_status_history String   @id(map: "pk_jobs_status_history") @db.Uuid
  timestamp              DateTime @default(now()) @db.Timestamp(6)
  previous_status        String
  new_status             String
  id_event               String   @db.Uuid
  events                 events   @relation(fields: [id_event], references: [id_event], onDelete: NoAction, onUpdate: NoAction, map: "fk_4")

  @@index([id_event], map: "id_job_jobs_status_history")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model linked_users {
  id_linked_user        String         @id(map: "key_id_linked_users") @db.Uuid
  linked_user_origin_id String
  alias                 String
  id_project            String         @db.Uuid
  connections           connections[]
  events                events[]
  invite_links          invite_links[]
  projects              projects       @relation(fields: [id_project], references: [id_project], onDelete: NoAction, onUpdate: NoAction, map: "fk_10")

  @@index([id_project], map: "fk_proectid_linked_users")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projects {
  id_project       String         @id(map: "pk_projects") @db.Uuid
  name             String
  sync_mode        String
  pull_frequency   BigInt?
  redirect_url     String?
  id_user          String         @db.Uuid
  id_connector_set String         @db.Uuid
  api_keys         api_keys[]
  connections      connections[]
  linked_users     linked_users[]
  users            users          @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_46_1")
  connector_sets   connector_sets @relation(fields: [id_connector_set], references: [id_connector_set], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_connectorsetid")

  @@index([id_connector_set], map: "fk_connectors_sets")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model remote_data {
  id_remote_data     String    @id(map: "pk_remote_data") @db.Uuid
  ressource_owner_id String?   @unique(map: "force_unique_ressourceownerid") @db.Uuid
  format             String?
  data               String?
  created_at         DateTime? @db.Timestamp(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tcg_accounts {
  id_tcg_account  String         @id(map: "pk_tcg_account") @db.Uuid
  remote_id       String?
  name            String?
  domains         String[]
  remote_platform String?
  created_at      DateTime       @db.Timestamp(6)
  modified_at     DateTime       @db.Timestamp(6)
  id_linked_user  String?        @db.Uuid
  tcg_contacts    tcg_contacts[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tcg_attachments {
  id_tcg_attachment String        @id(map: "pk_tcg_attachments") @db.Uuid
  remote_id         String?
  remote_platform   String?
  file_name         String?
  file_url          String?
  uploader          String        @db.Uuid
  created_at        DateTime      @db.Timestamp(6)
  modified_at       DateTime      @db.Timestamp(6)
  id_linked_user    String?       @db.Uuid
  id_tcg_ticket     String?       @db.Uuid
  id_tcg_comment    String?       @db.Uuid
  tcg_tickets       tcg_tickets?  @relation(fields: [id_tcg_ticket], references: [id_tcg_ticket], onDelete: NoAction, onUpdate: NoAction, map: "fk_50")
  tcg_comments      tcg_comments? @relation(fields: [id_tcg_comment], references: [id_tcg_comment], onDelete: NoAction, onUpdate: NoAction, map: "fk_51")

  @@index([id_tcg_comment], map: "fk_tcg_attachment_tcg_commentid")
  @@index([id_tcg_ticket], map: "fk_tcg_attachment_tcg_ticketid")
}

model tcg_collections {
  id_tcg_collection String   @id(map: "pk_tcg_collections") @db.Uuid
  name              String?
  description       String?
  remote_id         String?
  remote_platform   String?
  collection_type   String?
  parent_collection String?  @db.Uuid
  created_at        DateTime @db.Timestamp(6)
  modified_at       DateTime @db.Timestamp(6)
  id_linked_user    String   @db.Uuid
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tcg_comments {
  id_tcg_comment    String            @id(map: "pk_tcg_comments") @db.Uuid
  body              String?
  html_body         String?
  is_private        Boolean?
  remote_id         String?
  remote_platform   String?
  created_at        DateTime?         @db.Timestamp(6)
  modified_at       DateTime?         @db.Timestamp(6)
  creator_type      String?
  id_tcg_attachment String[]
  id_tcg_ticket     String?           @db.Uuid
  id_tcg_contact    String?           @db.Uuid
  id_tcg_user       String?           @db.Uuid
  id_linked_user    String?           @db.Uuid
  tcg_attachments   tcg_attachments[]
  tcg_tickets       tcg_tickets?      @relation(fields: [id_tcg_ticket], references: [id_tcg_ticket], onDelete: NoAction, onUpdate: NoAction, map: "fk_40_1")
  tcg_contacts      tcg_contacts?     @relation(fields: [id_tcg_contact], references: [id_tcg_contact], onDelete: NoAction, onUpdate: NoAction, map: "fk_41")
  tcg_users         tcg_users?        @relation(fields: [id_tcg_user], references: [id_tcg_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_42")

  @@index([id_tcg_contact], map: "fk_tcg_comment_tcg_contact")
  @@index([id_tcg_ticket], map: "fk_tcg_comment_tcg_ticket")
  @@index([id_tcg_user], map: "fk_tcg_comment_tcg_userid")
}

model tcg_contacts {
  id_tcg_contact  String         @id(map: "pk_tcg_contact") @db.Uuid
  name            String?
  email_address   String?
  phone_number    String?
  details         String?
  remote_id       String?
  remote_platform String?
  created_at      DateTime?      @db.Timestamp(6)
  modified_at     DateTime?      @db.Timestamp(6)
  id_tcg_account  String?        @db.Uuid
  id_linked_user  String?        @db.Uuid
  tcg_comments    tcg_comments[]
  tcg_accounts    tcg_accounts?  @relation(fields: [id_tcg_account], references: [id_tcg_account], onDelete: NoAction, onUpdate: NoAction, map: "fk_49")

  @@index([id_tcg_account], map: "fk_tcg_contact_tcg_account_id")
}

model tcg_tags {
  id_tcg_tag      String       @id(map: "pk_tcg_tags") @db.Uuid
  name            String?
  remote_id       String?
  remote_platform String?
  created_at      DateTime     @db.Timestamp(6)
  modified_at     DateTime     @db.Timestamp(6)
  id_tcg_ticket   String?      @db.Uuid
  id_linked_user  String?      @db.Uuid
  tcg_tickets     tcg_tickets? @relation(fields: [id_tcg_ticket], references: [id_tcg_ticket], onDelete: NoAction, onUpdate: NoAction, map: "fk_48")

  @@index([id_tcg_ticket], map: "fk_tcg_tag_tcg_ticketid")
}

model tcg_teams {
  id_tcg_team     String   @id(map: "pk_tcg_teams") @db.Uuid
  remote_id       String?
  remote_platform String?
  name            String?
  description     String?
  created_at      DateTime @db.Timestamp(6)
  modified_at     DateTime @db.Timestamp(6)
  id_linked_user  String?  @db.Uuid
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tcg_tickets {
  id_tcg_ticket   String            @id(map: "pk_tcg_tickets") @db.Uuid
  name            String?
  status          String?
  description     String?
  due_date        DateTime?         @db.Timestamp(6)
  ticket_type     String?
  parent_ticket   String?           @db.Uuid
  tags            String[]
  collections     String[]
  completed_at    DateTime?         @db.Timestamp(6)
  priority        String?
  created_at      DateTime          @db.Timestamp(6)
  modified_at     DateTime          @db.Timestamp(6)
  assigned_to     String[]
  remote_id       String?
  remote_platform String?
  creator_type    String?
  id_tcg_user     String?           @db.Uuid
  id_linked_user  String            @db.Uuid
  tcg_attachments tcg_attachments[]
  tcg_comments    tcg_comments[]
  tcg_tags        tcg_tags[]

  @@index([id_tcg_user], map: "fk_tcg_ticket_tcg_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tcg_users {
  id_tcg_user     String         @id(map: "pk_tcg_users") @db.Uuid
  name            String?
  email_address   String?
  remote_id       String?
  remote_platform String?
  teams           String[]
  created_at      DateTime?      @db.Timestamp(6)
  modified_at     DateTime?      @db.Timestamp(6)
  id_linked_user  String?        @db.Uuid
  tcg_comments    tcg_comments[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model value {
  id_value     String    @id(map: "pk_value") @db.Uuid
  data         String
  id_entity    String    @db.Uuid
  id_attribute String    @db.Uuid
  attribute    attribute @relation(fields: [id_attribute], references: [id_attribute], onDelete: NoAction, onUpdate: NoAction, map: "fk_33")
  entity       entity    @relation(fields: [id_entity], references: [id_entity], onDelete: NoAction, onUpdate: NoAction, map: "fk_34")

  @@index([id_attribute], map: "fk_value_attributeid")
  @@index([id_entity], map: "fk_value_entityid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model webhook_delivery_attempts {
  id_webhook_delivery_attempt String             @id(map: "pk_webhook_event") @db.Uuid
  timestamp                   DateTime           @db.Timestamp(6)
  status                      String
  next_retry                  DateTime?          @db.Timestamp(6)
  attempt_count               BigInt
  id_webhooks_payload         String?            @db.Uuid
  id_webhook_endpoint         String?            @db.Uuid
  id_event                    String?            @db.Uuid
  id_webhooks_reponse         String?            @db.Uuid
  webhooks_payloads           webhooks_payloads? @relation(fields: [id_webhooks_payload], references: [id_webhooks_payload], onDelete: NoAction, onUpdate: NoAction, map: "fk_38_1")
  webhook_endpoints           webhook_endpoints? @relation(fields: [id_webhook_endpoint], references: [id_webhook_endpoint], onDelete: NoAction, onUpdate: NoAction, map: "fk_38_2")
  events                      events?            @relation(fields: [id_event], references: [id_event], onDelete: NoAction, onUpdate: NoAction, map: "fk_39")
  webhooks_reponses           webhooks_reponses? @relation(fields: [id_webhooks_reponse], references: [id_webhooks_reponse], onDelete: NoAction, onUpdate: NoAction, map: "fk_40")

  @@index([id_webhooks_payload], map: "fk_we_payload_webhookid")
  @@index([id_webhook_endpoint], map: "fk_we_webhookendpointid")
  @@index([id_event], map: "fk_webhook_delivery_attempt_eventid")
  @@index([id_webhooks_reponse], map: "fk_webhook_delivery_attempt_webhook_responseid")
}

model connector_sets {
  id_connector_set String     @id(map: "pk_project_connector") @db.Uuid
  crm_hubspot      Boolean
  crm_zoho         Boolean
  crm_attio        Boolean
  crm_pipedrive    Boolean
  tcg_zendesk      Boolean
  tcg_jira         Boolean
  tcg_gorgias      Boolean
  tcg_gitlab       Boolean
  tcg_front        Boolean
  projects         projects[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model managed_webhooks {
  id_managed_webhook    String   @id(map: "pk_managed_webhooks") @db.Uuid
  active                Boolean
  id_connection         String   @db.Uuid
  endpoint              String   @db.Uuid
  api_version           String?
  active_events         String[]
  remote_signing_secret String?
  modified_at           DateTime @db.Timestamp(6)
  created_at            DateTime @db.Timestamp(6)
}

model fs_drives {
  id_fs_drive       String    @id(map: "pk_fs_drives") @db.Uuid
  remote_created_at DateTime? @db.Timestamp(6)
  drive_url         String?
  created_at        DateTime  @db.Timestamp(6)
  modified_at       DateTime  @db.Timestamp(6)
  remote_id         String?
}

model fs_files {
  id_fs_file       String   @id(map: "pk_fs_files") @db.Uuid
  name             String?
  type             String?
  path             String?
  mime_type        String?
  size             BigInt?
  remote_id        String?
  id_fs_folder     String?  @db.Uuid
  created_at       DateTime @db.Timestamp(6)
  modified_at      DateTime @db.Timestamp(6)
  id_fs_permission String   @db.Uuid

  @@index([id_fs_folder], map: "fk_fs_file_folderid")
  @@index([id_fs_permission], map: "fk_fs_file_permissionid")
}

model fs_folders {
  id_fs_folder     String   @id(map: "pk_fs_folders") @db.Uuid
  folder_url       String?
  size             BigInt?
  description      String?
  parent_folder    String?  @db.Uuid
  remote_id        String?
  created_at       DateTime @db.Timestamp(6)
  modified_at      DateTime @db.Timestamp(6)
  id_fs_drive      String?  @db.Uuid
  id_fs_permission String   @db.Uuid

  @@index([id_fs_drive], map: "fk_fs_folder_driveid")
  @@index([id_fs_permission], map: "fk_fs_folder_permissionid")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model fs_permissions {
  id_fs_permission String   @id(map: "pk_fs_permissions") @db.Uuid
  remote_id        String?
  created_at       DateTime @db.Timestamp(6)
  modified_at      DateTime @db.Timestamp(6)
  user             String   @db.Uuid
  group            String   @db.Uuid
  type             String[]
  roles            String[]
}

model fs_shared_links {
  id_fs_shared_link String   @id(map: "pk_fs_shared_links") @db.Uuid
  created_at        DateTime @db.Timestamp(6)
  modified_at       DateTime @db.Timestamp(6)
}
