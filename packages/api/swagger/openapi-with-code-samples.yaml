openapi: 3.0.0
paths:
  /:
    get:
      operationId: hello
      summary: ''
      parameters: []
      responses:
        '200':
          description: Returns a greeting message
          content:
            text/plain:
              schema:
                type: string
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: hello
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hello()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: hello
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hello(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: hello
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hello()\n\nif ! res.res.nil?\n  # handle response\nend"
  /health:
    get:
      operationId: health
      summary: ''
      parameters: []
      responses:
        '200':
          description: Api is healthy
          content:
            application/json:
              schema:
                type: number
                example: 200
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: health
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.health()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: health
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Health(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Number != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: health
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.health()\n\nif ! res.number.nil?\n  # handle response\nend"
  /auth/login:
    post:
      operationId: signIn
      summary: Log In
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '201':
          description: ''
      tags:
        - auth
      x-speakeasy-group: auth.login
      x-codeSamples:
        - lang: typescript
          label: signIn
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.auth.login.signIn({\n    idUser: \"<value>\",\n    email: \"Oda.Treutel97@hotmail.com\",\n    passwordHash: \"<value>\",\n  });\n\n  \n}\n\nrun();"
        - lang: python
          label: signIn
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.auth.login.sign_in(request={
                "email": "Oda.Treutel97@hotmail.com",
                "password_hash": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: signIn
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.LoginDto{
                    Email: "Oda.Treutel97@hotmail.com",
                    PasswordHash: "<value>",
                }
                ctx := context.Background()
                res, err := s.Auth.Login.SignIn(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: signIn
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::LoginDto.new(\n  email: \"Oda.Treutel97@hotmail.com\",\n  password_hash: \"<value>\",\n)\n    \nres = s.auth_login.sign_in(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /connections:
    get:
      operationId: getConnections
      summary: List Connections
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      tags:
        - connections
      x-codeSamples:
        - lang: typescript
          label: getConnections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.connections.getConnections();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: getConnections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.connections.get_connections()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: getConnections
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Connections.GetConnections(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Connections != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getConnections
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.connections.get_connections()\n\nif ! res.connections.nil?\n  # handle response\nend"
  /webhooks:
    get:
      operationId: listWebhooks
      summary: List webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
      tags: &ref_0
        - webhooks
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.list();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listWebhooks
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listWebhooks
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listWebhooks
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.list()\n\nif ! res.webhook_responses.nil?\n  # handle response\nend"
    post:
      operationId: createWebhookPublic
      summary: Create webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: createWebhookPublic
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.create({
                url: "https://acme.com/webhook_receiver",
                description: "Webhook to receive connection events",
                scope: [
                  "connection.created",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createWebhookPublic
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.create(request={
                "url": "https://acme.com/webhook_receiver",
                "description": "Webhook to receive connection events",
                "scope": [
                    "connection.created",
                ],
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createWebhookPublic
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.WebhookDto{
                    URL: gosdk.String("https://acme.com/webhook_receiver"),
                    Description: gosdk.String("Webhook to receive connection events"),
                    Scope: []string{
                        "connection.created",
                    },
                }
                ctx := context.Background()
                res, err := s.Webhooks.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createWebhookPublic
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::WebhookDto.new(\n  url: \"https://acme.com/webhook_receiver\",\n  description: \"Webhook to receive connection events\",\n  scope: [\n    \"<value>\",\n  ],\n)\n    \nres = s.webhooks.create(req)\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/{id}:
    delete:
      operationId: delete
      summary: Delete Webhook
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the webhook to delete.
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.delete({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: delete
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.delete(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: delete
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"
                ctx := context.Background()
                res, err := s.Webhooks.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: delete
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.delete(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
    put:
      operationId: updateStatus
      summary: Update webhook status
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the webhook to update.
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.updateStatus({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: updateStatus
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.update_status(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: updateStatus
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"
                ctx := context.Background()
                res, err := s.Webhooks.UpdateStatus(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: updateStatus
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.update_status(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/verifyEvent:
    post:
      operationId: verifyEvent
      summary: Verify payload signature of the webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerificationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    additionalProperties: true
                    description: Dynamic event payload
      tags: *ref_0
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.verifyEvent({
                payload: {
                  "key": "<value>",
                },
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: verifyEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.verify_event(request={
                "payload": {
                    "key": "<value>",
                },
                "signature": "<value>",
                "secret": "<value>",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: verifyEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.SignatureVerificationDto{
                    Payload: map[string]any{
                        "key": "<value>",
                    },
                    Signature: gosdk.String("<value>"),
                    Secret: gosdk.String("<value>"),
                }
                ctx := context.Background()
                res, err := s.Webhooks.VerifyEvent(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: verifyEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::SignatureVerificationDto.new(\n  payload: {\n    \"East\": \"<value>\",\n  },\n  signature: \"<value>\",\n  secret: \"<value>\",\n)\n    \nres = s.webhooks.verify_event(req)\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tickets:
    get:
      operationId: listTicketingTicket
      summary: List  Tickets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: &ref_1
        - ticketing/tickets
      x-speakeasy-group: ticketing.tickets
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTicket
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Tickets.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingTicket
      summary: Create Tickets
      description: Create Tickets in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingTicketInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";
            import {
              UnifiedTicketingTicketInputCreatorType,
              UnifiedTicketingTicketInputPriority,
              UnifiedTicketingTicketInputStatus,
              UnifiedTicketingTicketInputType,
            } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedTicketingTicketInput: {
                  name: "Customer Service Inquiry",
                  status: UnifiedTicketingTicketInputStatus.Open,
                  description: "Help customer",
                  dueDate: new Date("2024-10-01T12:00:00Z"),
                  type: UnifiedTicketingTicketInputType.Bug,
                  parentTicket: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  collections: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  tags: [
                    "my_tag",
                    "urgent_tag",
                  ],
                  completedAt: new Date("2024-10-01T12:00:00Z"),
                  priority: UnifiedTicketingTicketInputPriority.High,
                  assignedTo: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  comment: {
                    body: "Assigned to Eric !",
                    htmlBody: "<p>Assigned to Eric !</p>",
                    isPrivate: false,
                    creatorType: UnifiedTicketingTicketInputCreatorType.User,
                    ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    attachments: [
                      "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                  },
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingTicket
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.create(x_connection_token="<value>", unified_ticketing_ticket_input={
                "name": "Customer Service Inquiry",
                "status": panora_sdk.UnifiedTicketingTicketInputStatus.OPEN,
                "description": "Help customer",
                "due_date": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "type": panora_sdk.UnifiedTicketingTicketInputType.BUG,
                "parent_ticket": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "collections": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "tags": [
                    "my_tag",
                    "urgent_tag",
                ],
                "completed_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "priority": panora_sdk.UnifiedTicketingTicketInputPriority.HIGH,
                "assigned_to": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "comment": {
                    "body": "Assigned to Eric !",
                    "html_body": "<p>Assigned to Eric !</p>",
                    "is_private": False,
                    "creator_type": panora_sdk.UnifiedTicketingTicketInputCreatorType.USER,
                    "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "attachments": [
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                },
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingTicketInput := components.UnifiedTicketingTicketInput{
                    Name: gosdk.String("Customer Service Inquiry"),
                    Status: components.UnifiedTicketingTicketInputStatusOpen.ToPointer(),
                    Description: gosdk.String("Help customer"),
                    DueDate: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Type: components.UnifiedTicketingTicketInputTypeBug.ToPointer(),
                    ParentTicket: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Collections: []components.UnifiedTicketingTicketInputCollections{
                        components.CreateUnifiedTicketingTicketInputCollectionsStr(
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Tags: []components.UnifiedTicketingTicketInputTags{
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                        "my_tag",
                        ),
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                        "urgent_tag",
                        ),
                    },
                    CompletedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Priority: components.UnifiedTicketingTicketInputPriorityHigh.ToPointer(),
                    AssignedTo: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Comment: &components.UnifiedTicketingTicketInputComment{
                        Body: gosdk.String("Assigned to Eric !"),
                        HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                        IsPrivate: gosdk.Bool(false),
                        CreatorType: components.UnifiedTicketingTicketInputCreatorTypeUser.ToPointer(),
                        TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        Attachments: []components.UnifiedTicketingTicketInputCommentAttachments{
                            components.CreateUnifiedTicketingTicketInputCommentAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                            ),
                        },
                    },
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingTicketInputAttachments{
                        components.CreateUnifiedTicketingTicketInputAttachmentsStr(
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Create(ctx, xConnectionToken, unifiedTicketingTicketInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.create(x_connection_token=\"<value>\", unified_ticketing_ticket_input=::OpenApiSDK::Shared::UnifiedTicketingTicketInput.new(\n    name: \"Customer Service Inquiry\",\n    status: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputStatus::OPEN,\n    description: \"Help customer\",\n    due_date: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    type: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputType::BUG,\n    parent_ticket: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    collections: [\n      \"<value>\",\n    ],\n    tags: [\n      \"<value>\",\n    ],\n    completed_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    priority: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputPriority::HIGH,\n    assigned_to: [\n      \"<value>\",\n    ],\n    comment: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputComment.new(\n      body: \"Assigned to Eric !\",\n      html_body: \"<p>Assigned to Eric !</p>\",\n      is_private: false,\n      creator_type: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputCreatorType::USER,\n      ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      attachments: [\n        \"<value>\",\n      ],\n    ),\n    account_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    attachments: [\n      \"<value>\",\n    ],\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/tickets/{id}:
    get:
      operationId: retrieveTicketingTicket
      summary: Retrieve Tickets
      description: Retrieve Tickets from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `ticket` you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_1
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/users:
    get:
      operationId: listTicketingUsers
      summary: List Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: &ref_2
        - ticketing/users
      x-speakeasy-group: ticketing.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Users.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/users/{id}:
    get:
      operationId: retrieveTicketingUser
      summary: Retrieve User
      description: Retrieve a User from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: *ref_2
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Users.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_user_output.nil?\n  # handle response\nend"
  /ticketing/accounts:
    get:
      operationId: listTicketingAccount
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: &ref_3
        - ticketing/accounts
      x-speakeasy-group: ticketing.accounts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingAccount
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Accounts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_accounts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/accounts/{id}:
    get:
      operationId: retrieveTicketingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: *ref_3
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Accounts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_accounts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ticketing_account_output.nil?\n  # handle response\nend"
  /ticketing/contacts:
    get:
      operationId: listTicketingContacts
      summary: List Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: &ref_4
        - ticketing/contacts
      x-speakeasy-group: ticketing.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Contacts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/contacts/{id}:
    get:
      operationId: retrieveTicketingContact
      summary: Retrieve Contact
      description: Retrieve a Contact from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: *ref_4
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_contacts.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /sync/status/{vertical}:
    get:
      operationId: status
      summary: Retrieve sync status of a certain vertical
      parameters:
        - name: vertical
          required: true
          in: path
          example: ticketing
          schema:
            enum:
              - ticketing
              - marketingautomation
              - crm
              - filestorage
              - ats
              - hris
              - accounting
              - ecommerce
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_5
        - sync
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: status
          source: "import { Panora } from \"@panora/sdk\";\nimport { Vertical } from \"@panora/sdk/models/operations\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.sync.status({\n    vertical: Vertical.Ticketing,\n  });\n\n  \n}\n\nrun();"
        - lang: python
          label: status
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.sync.status(vertical=panora_sdk.PathParamVertical.TICKETING)

            # Use the SDK ...
        - lang: go
          label: status
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var vertical operations.Vertical = operations.VerticalTicketing
                ctx := context.Background()
                res, err := s.Sync.Status(ctx, vertical)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: status
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.sync.status(vertical=::OpenApiSDK::Operations::Vertical::TICKETING)\n\nif res.status_code == 200\n  # handle response\nend"
  /sync/resync:
    post:
      operationId: resync
      summary: Resync common objects across a vertical
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResyncStatusDto'
      tags: *ref_5
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: resync
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.sync.resync()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: resync
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.Resync(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ResyncStatusDto != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: resync
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.sync.resync()\n\nif ! res.resync_status_dto.nil?\n  # handle response\nend"
  /crm/companies:
    get:
      operationId: listCrmCompany
      summary: List Companies
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: &ref_6
        - crm/companies
      x-speakeasy-group: crm.companies
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmCompany
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Companies.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmCompany
      summary: Create Companies
      description: Create Companies in any supported CRM software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmCompanyInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_6
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";
            import { AddressType, EmailAddressType, PhoneType, UnifiedCrmCompanyInputIndustry } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmCompanyInput: {
                  name: "Acme",
                  industry: UnifiedCrmCompanyInputIndustry.Accounting,
                  numberOfEmployees: 10,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  emailAddresses: [
                    {
                      emailAddress: "acme@gmail.com",
                      emailAddressType: EmailAddressType.Work,
                    },
                  ],
                  addresses: [
                    {
                      street1: "5th Avenue",
                      street2: "Street 2",
                      city: "New York",
                      state: "NY",
                      postalCode: "10001",
                      country: "USA",
                      addressType: AddressType.Work,
                      ownerType: "<value>",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "+33660606067",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmCompany
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.create(x_connection_token="<value>", unified_crm_company_input={
                "name": "Acme",
                "industry": panora_sdk.UnifiedCrmCompanyInputIndustry.ACCOUNTING,
                "number_of_employees": 10,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "email_addresses": [
                    {
                        "email_address": "acme@gmail.com",
                        "email_address_type": panora_sdk.EmailAddressType.WORK,
                    },
                ],
                "addresses": [
                    {
                        "street_1": "5th Avenue",
                        "street_2": "<value>",
                        "city": "New York",
                        "state": "NY",
                        "postal_code": "46842",
                        "country": "USA",
                        "address_type": panora_sdk.AddressType.WORK,
                        "owner_type": "<value>",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "+33660606067",
                        "phone_type": panora_sdk.PhoneType.WORK,
                    },
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmCompanyInput := components.UnifiedCrmCompanyInput{
                    Name: gosdk.String("Acme"),
                    Industry: components.UnifiedCrmCompanyInputIndustryAccounting.ToPointer(),
                    NumberOfEmployees: gosdk.Float64(10),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("acme@gmail.com"),
                            EmailAddressType: components.EmailAddressTypeWork.ToPointer(),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("5th Avenue"),
                            Street2: gosdk.String("<value>"),
                            City: gosdk.String("New York"),
                            State: gosdk.String("NY"),
                            PostalCode: gosdk.String("46842"),
                            Country: gosdk.String("USA"),
                            AddressType: components.AddressTypeWork.ToPointer(),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("+33660606067"),
                            PhoneType: components.PhoneTypeWork.ToPointer(),
                        },
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Companies.Create(ctx, xConnectionToken, unifiedCrmCompanyInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.create(x_connection_token=\"<value>\", unified_crm_company_input=::OpenApiSDK::Shared::UnifiedCrmCompanyInput.new(\n    name: \"Acme\",\n    industry: ::OpenApiSDK::Shared::UnifiedCrmCompanyInputIndustry::ACCOUNTING,\n    number_of_employees: 10.0,\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    email_addresses: [\n      ::OpenApiSDK::Shared::Email.new(\n        email_address: \"Jena.Nienow28@yahoo.com\",\n        email_address_type: ::OpenApiSDK::Shared::EmailAddressType::PERSONAL,\n      ),\n    ],\n    addresses: [\n      ::OpenApiSDK::Shared::Address.new(\n        street_1: \"<value>\",\n        street_2: \"<value>\",\n        city: \"Bernhardworth\",\n        state: \"South Carolina\",\n        postal_code: \"98041\",\n        country: \"French Polynesia\",\n        address_type: ::OpenApiSDK::Shared::AddressType::PERSONAL,\n        owner_type: \"<value>\",\n      ),\n    ],\n    phone_numbers: [\n      ::OpenApiSDK::Shared::Phone.new(\n        phone_number: \"<value>\",\n        phone_type: ::OpenApiSDK::Shared::PhoneType::WORK,\n      ),\n    ],\n    field_mappings: {\n      \"fuchsia\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/companies/{id}:
    get:
      operationId: retrieveCrmCompany
      summary: Retrieve Companies
      description: Retrieve Companies from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the company you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_6
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Companies.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/contacts:
    get:
      operationId: listCrmContacts
      summary: List CRM Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: &ref_7
        - crm/contacts
      x-speakeasy-group: crm.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Contacts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmContact
      summary: Create Contacts
      description: Create Contacts in any supported CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_7
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";
            import { AddressType, EmailAddressType, PhoneType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmContactInput: {
                  firstName: "John",
                  lastName: "Doe",
                  emailAddresses: [
                    {
                      emailAddress: "Jena.Nienow28@yahoo.com",
                      emailAddressType: EmailAddressType.Personal,
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "<value>",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  addresses: [
                    {
                      street1: "5th Avenue",
                      street2: "Street 2",
                      city: "Anytown",
                      state: "CA",
                      postalCode: "10001",
                      country: "USA",
                      addressType: AddressType.Personal,
                      ownerType: "<value>",
                    },
                  ],
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmContact
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.create(x_connection_token="<value>", unified_crm_contact_input={
                "first_name": "John",
                "last_name": "Doe",
                "email_addresses": [
                    {
                        "email_address": "Jena.Nienow28@yahoo.com",
                        "email_address_type": panora_sdk.EmailAddressType.PERSONAL,
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "<value>",
                        "phone_type": panora_sdk.PhoneType.WORK,
                    },
                ],
                "addresses": [
                    {
                        "street_1": "<value>",
                        "street_2": "<value>",
                        "city": "Anytown",
                        "state": "CA",
                        "postal_code": "97398",
                        "country": "USA",
                        "address_type": panora_sdk.AddressType.PERSONAL,
                        "owner_type": "<value>",
                    },
                ],
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmContactInput := components.UnifiedCrmContactInput{
                    FirstName: gosdk.String("John"),
                    LastName: gosdk.String("Doe"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("Jena.Nienow28@yahoo.com"),
                            EmailAddressType: components.EmailAddressTypePersonal.ToPointer(),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("<value>"),
                            PhoneType: components.PhoneTypeWork.ToPointer(),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("<value>"),
                            Street2: gosdk.String("<value>"),
                            City: gosdk.String("Anytown"),
                            State: gosdk.String("CA"),
                            PostalCode: gosdk.String("97398"),
                            Country: gosdk.String("USA"),
                            AddressType: components.AddressTypePersonal.ToPointer(),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Contacts.Create(ctx, xConnectionToken, unifiedCrmContactInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.create(x_connection_token=\"<value>\", unified_crm_contact_input=::OpenApiSDK::Shared::UnifiedCrmContactInput.new(\n    first_name: \"John\",\n    last_name: \"Doe\",\n    email_addresses: [\n      ::OpenApiSDK::Shared::Email.new(\n        email_address: \"Jena.Nienow28@yahoo.com\",\n        email_address_type: ::OpenApiSDK::Shared::EmailAddressType::PERSONAL,\n      ),\n    ],\n    phone_numbers: [\n      ::OpenApiSDK::Shared::Phone.new(\n        phone_number: \"<value>\",\n        phone_type: ::OpenApiSDK::Shared::PhoneType::WORK,\n      ),\n    ],\n    addresses: [\n      ::OpenApiSDK::Shared::Address.new(\n        street_1: \"<value>\",\n        street_2: \"<value>\",\n        city: \"Fort Peytonbury\",\n        state: \"West Virginia\",\n        postal_code: \"04130-7788\",\n        country: \"Marshall Islands\",\n        address_type: ::OpenApiSDK::Shared::AddressType::WORK,\n        owner_type: \"<value>\",\n      ),\n    ],\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"Polestar\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/contacts/{id}:
    get:
      operationId: retrieveCrmContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `contact` you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_7
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Contacts.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/deals:
    get:
      operationId: listCrmDeals
      summary: List Deals
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: &ref_8
        - crm/deals
      x-speakeasy-group: crm.deals
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmDeals
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmDeals
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Deals.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmDeals
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmDeal
      summary: Create Deals
      description: Create Deals in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmDealInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_8
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "Huge Contract with Acme",
                  description: "Contract with Sales Operations Team",
                  amount: 1000,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  stageId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.create(x_connection_token="<value>", unified_crm_deal_input={
                "name": "Huge Contract with Acme",
                "description": "Contract with Sales Operations Team",
                "amount": 1000,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "stage_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmDealInput := components.UnifiedCrmDealInput{
                    Name: gosdk.String("Huge Contract with Acme"),
                    Description: gosdk.String("Contract with Sales Operations Team"),
                    Amount: gosdk.Float64(1000),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    StageID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }
                ctx := context.Background()
                res, err := s.Crm.Deals.Create(ctx, xConnectionToken, unifiedCrmDealInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.create(x_connection_token=\"<value>\", unified_crm_deal_input=::OpenApiSDK::Shared::UnifiedCrmDealInput.new(\n    name: \"Huge Contract with Acme\",\n    description: \"Contract with Sales Operations Team\",\n    amount: 1000.0,\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    stage_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/deals/{id}:
    get:
      operationId: retrieveCrmDeal
      summary: Retrieve Deals
      description: Retrieve Deals from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the deal you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_8
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Deals.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/engagements:
    get:
      operationId: listCrmEngagements
      summary: List Engagements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: &ref_9
        - crm/engagements
      x-speakeasy-group: crm.engagements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmEngagements
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmEngagements
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Engagements.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmEngagements
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmEngagement
      summary: Create Engagements
      description: Create Engagements in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmEngagementInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_9
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedCrmEngagementInputDirection, UnifiedCrmEngagementInputType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmEngagementInput: {
                  content: "Meeting call with CTO",
                  direction: UnifiedCrmEngagementInputDirection.Inbound,
                  subject: "Technical features planning",
                  startAt: new Date("2024-10-01T12:00:00Z"),
                  endTime: new Date("2024-10-01T22:00:00Z"),
                  type: UnifiedCrmEngagementInputType.Meeting,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contacts: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmEngagement
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.create(x_connection_token="<value>", unified_crm_engagement_input={
                "content": "Meeting call with CTO",
                "direction": panora_sdk.UnifiedCrmEngagementInputDirection.INBOUND,
                "subject": "Technical features planning",
                "start_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "end_time": dateutil.parser.isoparse("2024-10-01T22:00:00Z"),
                "type": panora_sdk.UnifiedCrmEngagementInputType.MEETING,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contacts": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmEngagementInput := components.UnifiedCrmEngagementInput{
                    Content: gosdk.String("Meeting call with CTO"),
                    Direction: components.UnifiedCrmEngagementInputDirectionInbound.ToPointer(),
                    Subject: gosdk.String("Technical features planning"),
                    StartAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    EndTime: types.MustNewTimeFromString("2024-10-01T22:00:00Z"),
                    Type: components.UnifiedCrmEngagementInputTypeMeeting.ToPointer(),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Contacts: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Engagements.Create(ctx, xConnectionToken, unifiedCrmEngagementInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.create(x_connection_token=\"<value>\", unified_crm_engagement_input=::OpenApiSDK::Shared::UnifiedCrmEngagementInput.new(\n    content: \"Meeting call with CTO\",\n    direction: ::OpenApiSDK::Shared::UnifiedCrmEngagementInputDirection::INBOUND,\n    subject: \"Technical features planning\",\n    start_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    end_time: DateTime.iso8601('2024-10-01T22:00:00Z'),\n    type: ::OpenApiSDK::Shared::UnifiedCrmEngagementInputType::MEETING,\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    contacts: [\n      \"<value>\",\n    ],\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/engagements/{id}:
    get:
      operationId: retrieveCrmEngagement
      summary: Retrieve Engagements
      description: Retrieve Engagements from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the engagement you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_9
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Engagements.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/notes:
    get:
      operationId: listCrmNote
      summary: List Notes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: &ref_10
        - crm/notes
      x-speakeasy-group: crm.notes
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Notes.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmNote
      summary: Create Notes
      description: Create Notes in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmNoteInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_10
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmNoteInput: {
                  content: "My notes taken during the meeting",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.create(x_connection_token="<value>", unified_crm_note_input={
                "content": "My notes taken during the meeting",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmNoteInput := components.UnifiedCrmNoteInput{
                    Content: gosdk.String("My notes taken during the meeting"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Notes.Create(ctx, xConnectionToken, unifiedCrmNoteInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.create(x_connection_token=\"<value>\", unified_crm_note_input=::OpenApiSDK::Shared::UnifiedCrmNoteInput.new(\n    content: \"My notes taken during the meeting\",\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    deal_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/notes/{id}:
    get:
      operationId: retrieveCrmNote
      summary: Retrieve Notes
      description: Retrieve Notes from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the note you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_10
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Notes.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/stages:
    get:
      operationId: listCrmStages
      summary: List  Stages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: &ref_11
        - crm/stages
      x-speakeasy-group: crm.stages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmStages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmStages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Stages.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmStages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_stages.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/stages/{id}:
    get:
      operationId: retrieveCrmStage
      summary: Retrieve Stages
      description: Retrieve Stages from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the stage you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: *ref_11
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Stages.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmStageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_stages.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_stage_output.nil?\n  # handle response\nend"
  /crm/tasks:
    get:
      operationId: listCrmTask
      summary: List Tasks
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: &ref_12
        - crm/tasks
      x-speakeasy-group: crm.tasks
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmTask
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Tasks.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmTask
      summary: Create Tasks
      description: Create Tasks in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmTaskInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_12
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedCrmTaskInputStatus } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "Answer customers",
                  content: "Prepare email campaign",
                  status: UnifiedCrmTaskInputStatus.Pending,
                  dueDate: "2024-10-01T12:00:00Z",
                  finishedDate: "2024-10-01T12:00:00Z",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createCrmTask
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.create(x_connection_token="<value>", unified_crm_task_input={
                "subject": "Answer customers",
                "content": "Prepare email campaign",
                "status": panora_sdk.UnifiedCrmTaskInputStatus.PENDING,
                "due_date": "2024-10-01T12:00:00Z",
                "finished_date": "2024-10-01T12:00:00Z",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmTaskInput := components.UnifiedCrmTaskInput{
                    Subject: gosdk.String("Answer customers"),
                    Content: gosdk.String("Prepare email campaign"),
                    Status: components.UnifiedCrmTaskInputStatusPending.ToPointer(),
                    DueDate: gosdk.String("2024-10-01T12:00:00Z"),
                    FinishedDate: gosdk.String("2024-10-01T12:00:00Z"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }
                ctx := context.Background()
                res, err := s.Crm.Tasks.Create(ctx, xConnectionToken, unifiedCrmTaskInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.create(x_connection_token=\"<value>\", unified_crm_task_input=::OpenApiSDK::Shared::UnifiedCrmTaskInput.new(\n    subject: \"Answer customers\",\n    content: \"Prepare email campaign\",\n    status: ::OpenApiSDK::Shared::UnifiedCrmTaskInputStatus::PENDING,\n    due_date: \"2024-10-01T12:00:00Z\",\n    finished_date: \"2024-10-01T12:00:00Z\",\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    deal_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/tasks/{id}:
    get:
      operationId: retrieveCrmTask
      summary: Retrieve Tasks
      description: Retrieve Tasks from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the task you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_12
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Crm.Tasks.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/users:
    get:
      operationId: listCrmUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: &ref_13
        - crm/users
      x-speakeasy-group: crm.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listCrmUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Crm.Users.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/users/{id}:
    get:
      operationId: retrieveCrmUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: b008e199-eda9-4629-bd41-a01b6195864a
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: *ref_13
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "b008e199-eda9-4629-bd41-a01b6195864a",
                remoteData: true,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCrmUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.retrieve(x_connection_token="<value>", id="b008e199-eda9-4629-bd41-a01b6195864a", remote_data=True)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "b008e199-eda9-4629-bd41-a01b6195864a"

                var remoteData *bool = gosdk.Bool(true)
                ctx := context.Background()
                res, err := s.Crm.Users.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_users.retrieve(x_connection_token=\"<value>\", id=\"b008e199-eda9-4629-bd41-a01b6195864a\", remote_data=true)\n\nif ! res.unified_crm_user_output.nil?\n  # handle response\nend"
  /ticketing/collections:
    get:
      operationId: listTicketingCollections
      summary: List Collections
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingCollectionOutput
      tags: &ref_14
        - ticketing/collections
      x-speakeasy-group: ticketing.collections
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingCollections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingCollections
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Collections.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingCollections
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_collections.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/collections/{id}:
    get:
      operationId: retrieveCollection
      summary: Retrieve Collections
      description: Retrieve Collections from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the collection you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
      tags: *ref_14
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveCollection
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCollection
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Collections.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCollectionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCollection
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_collections.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_collection_output.nil?\n  # handle response\nend"
  /ticketing/comments:
    get:
      operationId: listTicketingComments
      summary: List Comments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: &ref_15
        - ticketing/comments
      x-speakeasy-group: ticketing.comments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingComments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingComments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Comments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingComments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingComment
      summary: Create Comments
      description: Create Comments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingCommentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_15
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedTicketingCommentInputCreatorType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "Assigned to Eric !",
                  htmlBody: "<p>Assigned to Eric !</p>",
                  isPrivate: false,
                  creatorType: UnifiedTicketingCommentInputCreatorType.User,
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingComment
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.create(x_connection_token="<value>", unified_ticketing_comment_input={
                "body": "Assigned to Eric !",
                "html_body": "<p>Assigned to Eric !</p>",
                "is_private": False,
                "creator_type": panora_sdk.UnifiedTicketingCommentInputCreatorType.USER,
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingCommentInput := components.UnifiedTicketingCommentInput{
                    Body: gosdk.String("Assigned to Eric !"),
                    HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                    IsPrivate: gosdk.Bool(false),
                    CreatorType: components.UnifiedTicketingCommentInputCreatorTypeUser.ToPointer(),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingCommentInputAttachments{
                        components.CreateUnifiedTicketingCommentInputAttachmentsStr(
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                }
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Create(ctx, xConnectionToken, unifiedTicketingCommentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCommentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.create(x_connection_token=\"<value>\", unified_ticketing_comment_input=::OpenApiSDK::Shared::UnifiedTicketingCommentInput.new(\n    body: \"Assigned to Eric !\",\n    html_body: \"<p>Assigned to Eric !</p>\",\n    is_private: false,\n    creator_type: ::OpenApiSDK::Shared::UnifiedTicketingCommentInputCreatorType::USER,\n    ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    attachments: [\n      \"<value>\",\n    ],\n  ), remote_data=false)\n\nif ! res.unified_ticketing_comment_output.nil?\n  # handle response\nend"
  /ticketing/comments/{id}:
    get:
      operationId: retrieveTicketingComment
      summary: Retrieve Comment
      description: Retrieve a Comment from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `comment` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_15
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags:
    get:
      operationId: listTicketingTags
      summary: List Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: &ref_16
        - ticketing/tags
      x-speakeasy-group: ticketing.tags
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingTags
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTags
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Tags.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTags
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tags.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags/{id}:
    get:
      operationId: retrieveTicketingTag
      summary: Retrieve Tag
      description: Retrieve a Tag from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: *ref_16
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTag
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Tags.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTagOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTag
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tags.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_tag_output.nil?\n  # handle response\nend"
  /ticketing/teams:
    get:
      operationId: listTicketingTeams
      summary: List  Teams
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: &ref_17
        - ticketing/teams
      x-speakeasy-group: ticketing.teams
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingTeams
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTeams
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Teams.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTeams
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_teams.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/teams/{id}:
    get:
      operationId: retrieveTicketingTeam
      summary: Retrieve Teams
      description: Retrieve Teams from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the team you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: *ref_17
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingTeam
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTeam
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Teams.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTeamOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTeam
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_teams.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_team_output.nil?\n  # handle response\nend"
  /linked_users:
    post:
      operationId: createLinkedUser
      summary: Create Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: &ref_18
        - linkedUsers
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "id_1",
                alias: "acme",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.create(request={
                "linked_user_origin_id": "id_1",
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.CreateLinkedUserDto{
                    LinkedUserOriginID: "id_1",
                    Alias: gosdk.String("acme"),
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateLinkedUserDto.new(\n  linked_user_origin_id: \"id_1\",\n  alias_: \"acme\",\n)\n    \nres = s.linked_users.create(req)\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
    get:
      operationId: listLinkedUsers
      summary: List Linked Users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: listLinkedUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listLinkedUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listLinkedUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.list()\n\nif ! res.linked_user_responses.nil?\n  # handle response\nend"
  /linked_users/batch:
    post:
      operationId: importBatch
      summary: Add Batch Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.importBatch({
                linkedUserOriginIds: [
                  "id_1",
                ],
                alias: "acme",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: importBatch
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.import_batch(request={
                "linked_user_origin_ids": [
                    "id_1",
                ],
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: importBatch
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.CreateBatchLinkedUserDto{
                    LinkedUserOriginIds: []string{
                        "id_1",
                    },
                    Alias: gosdk.String("acme"),
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.ImportBatch(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: importBatch
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateBatchLinkedUserDto.new(\n  linked_user_origin_ids: [\n    \"<value>\",\n  ],\n  alias_: \"acme\",\n)\n    \nres = s.linked_users.import_batch(req)\n\nif ! res.linked_user_responses.nil?\n  # handle response\nend"
  /linked_users/{id}:
    get:
      operationId: retrieveLinkedUser
      summary: Retrieve Linked Users
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.retrieve({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.retrieve(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"
                ctx := context.Background()
                res, err := s.LinkedUsers.Retrieve(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.retrieve(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
  /linked_users/fromRemoteId:
    get:
      operationId: remoteId
      summary: Retrieve a Linked User From A Remote Id
      parameters:
        - name: remoteId
          required: true
          in: query
          example: id_1
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_18
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.remoteId({
                remoteId: "id_1",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: remoteId
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.remote_id(remote_id="id_1")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: remoteId
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var remoteID string = "id_1"
                ctx := context.Background()
                res, err := s.LinkedUsers.RemoteID(ctx, remoteID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: remoteId
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.remote_id(remote_id=\"id_1\")\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
  /projects:
    get:
      operationId: getProjects
      summary: Retrieve projects
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
      tags: &ref_19
        - projects
      x-codeSamples:
        - lang: typescript
          label: getProjects
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.getProjects();

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: getProjects
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.get_projects()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: getProjects
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Projects.GetProjects(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getProjects
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.projects.get_projects()\n\nif ! res.project_responses.nil?\n  # handle response\nend"
    post:
      operationId: createProject
      summary: Create a project
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
      tags: *ref_19
      x-codeSamples:
        - lang: typescript
          label: createProject
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.create({
                name: "Project Name",
                idOrganization: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                idUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createProject
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.create(request={
                "name": "Project Name",
                "id_organization": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "id_user": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createProject
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.CreateProjectDto{
                    Name: "Project Name",
                    IDOrganization: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    IDUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                }
                ctx := context.Background()
                res, err := s.Projects.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createProject
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateProjectDto.new(\n  name: \"Project Name\",\n  id_organization: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  id_user: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.projects.create(req)\n\nif ! res.project_response.nil?\n  # handle response\nend"
  /field_mappings/values:
    get:
      operationId: getFieldMappingValues
      summary: Retrieve field mappings values
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_20
        - fieldMappings
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingValues
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappingValues();\n\n  \n}\n\nrun();"
        - lang: python
          label: getFieldMappingValues
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mapping_values()

            # Use the SDK ...
        - lang: go
          label: getFieldMappingValues
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingValues(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappingValues
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mapping_values()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/entities:
    get:
      operationId: getFieldMappingsEntities
      summary: Retrieve field mapping entities
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_20
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingsEntities
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappingsEntities();\n\n  \n}\n\nrun();"
        - lang: python
          label: getFieldMappingsEntities
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings_entities()

            # Use the SDK ...
        - lang: go
          label: getFieldMappingsEntities
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingsEntities(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappingsEntities
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mappings_entities()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/attributes:
    get:
      operationId: getFieldMappings
      summary: Retrieve field mappings
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_20
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappings
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappings();\n\n  \n}\n\nrun();"
        - lang: python
          label: getFieldMappings
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings()

            # Use the SDK ...
        - lang: go
          label: getFieldMappings
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappings(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappings
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mappings()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/define:
    post:
      operationId: definitions
      summary: Define target Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefineTargetFieldDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_20
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: definitions
          source: |-
            import { Panora } from "@panora/sdk";
            import { DataType, ObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.definitions({
                objectTypeOwner: ObjectTypeOwner.Company,
                name: "fav_dish",
                description: "My favorite dish",
                dataType: DataType.String,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: definitions
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.definitions(request={
                "object_type_owner": panora_sdk.ObjectTypeOwner.COMPANY,
                "name": "fav_dish",
                "description": "My favorite dish",
                "data_type": panora_sdk.DataType.STRING,
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: definitions
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.DefineTargetFieldDto{
                    ObjectTypeOwner: components.ObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("fav_dish"),
                    Description: gosdk.String("My favorite dish"),
                    DataType: components.DataTypeString.ToPointer(),
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Definitions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: definitions
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::DefineTargetFieldDto.new(\n  object_type_owner: ::OpenApiSDK::Shared::ObjectTypeOwner::COMPANY,\n  name: \"fav_dish\",\n  description: \"My favorite dish\",\n  data_type: ::OpenApiSDK::Shared::DataType::STRING,\n)\n    \nres = s.field_mappings.definitions(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /field_mappings:
    post:
      operationId: defineCustomField
      summary: Create Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_20
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: defineCustomField
          source: |-
            import { Panora } from "@panora/sdk";
            import { CustomFieldCreateDtoDataType, CustomFieldCreateDtoObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.defineCustomField({
                objectTypeOwner: CustomFieldCreateDtoObjectTypeOwner.Company,
                name: "my_favorite_dish",
                description: "Favorite Dish",
                dataType: CustomFieldCreateDtoDataType.String,
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: defineCustomField
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.define_custom_field(request={
                "object_type_owner": panora_sdk.CustomFieldCreateDtoObjectTypeOwner.COMPANY,
                "name": "my_favorite_dish",
                "description": "Favorite Dish",
                "data_type": panora_sdk.CustomFieldCreateDtoDataType.STRING,
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: defineCustomField
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.CustomFieldCreateDto{
                    ObjectTypeOwner: components.CustomFieldCreateDtoObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("my_favorite_dish"),
                    Description: gosdk.String("Favorite Dish"),
                    DataType: components.CustomFieldCreateDtoDataTypeString.ToPointer(),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                }
                ctx := context.Background()
                res, err := s.FieldMappings.DefineCustomField(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: defineCustomField
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CustomFieldCreateDto.new(\n  object_type_owner: ::OpenApiSDK::Shared::CustomFieldCreateDtoObjectTypeOwner::COMPANY,\n  name: \"my_favorite_dish\",\n  description: \"Favorite Dish\",\n  data_type: ::OpenApiSDK::Shared::CustomFieldCreateDtoDataType::STRING,\n  source_custom_field_id: \"id_1\",\n  source_provider: \"hubspot\",\n  linked_user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.field_mappings.define_custom_field(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /field_mappings/map:
    post:
      operationId: map
      summary: Map Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapFieldToProviderDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_20
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.map({
                attributeId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: map
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.map(request={
                "attribute_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: map
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                request := components.MapFieldToProviderDto{
                    AttributeID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Map(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: map
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::MapFieldToProviderDto.new(\n  attribute_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  source_custom_field_id: \"id_1\",\n  source_provider: \"hubspot\",\n  linked_user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.field_mappings.map(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /events:
    get:
      operationId: getPanoraCoreEvents
      summary: List Events
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: limit
          required: false
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'
      tags:
        - events
      x-codeSamples:
        - lang: typescript
          label: getPanoraCoreEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.events.getPanoraCoreEvents({});

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: getPanoraCoreEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.events.get_panora_core_events()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: getPanoraCoreEvents
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Events.GetPanoraCoreEvents(ctx, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EventResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getPanoraCoreEvents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.events.get_panora_core_events(page=5232.51, limit=1895.12)\n\nif ! res.event_responses.nil?\n  # handle response\nend"
  /passthrough:
    post:
      operationId: request
      summary: Make a passthrough request
      parameters:
        - name: x-connection-token
          required: true
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassThroughRequestDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: &ref_21
        - passthrough
      x-speakeasy-group: passthrough
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { PassThroughRequestDtoMethod } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.passthrough.request({
                xConnectionToken: "<value>",
                passThroughRequestDto: {
                  method: PassThroughRequestDtoMethod.Get,
                  path: "/dev",
                  data: {},
                requestFormat:     {
                      "key": "<value>",
                    },
                  overrideBaseUrl: {
                    "key": "<value>",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: request
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.passthrough.request(x_connection_token="<value>", pass_through_request_dto={
                "method": panora_sdk.PassThroughRequestDtoMethod.GET,
                "path": "/dev",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: request
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                passThroughRequestDto := components.PassThroughRequestDto{
                    Method: components.PassThroughRequestDtoMethodGet,
                    Path: gosdk.String("/dev"),
                }
                ctx := context.Background()
                res, err := s.Passthrough.Request(ctx, xConnectionToken, passThroughRequestDto)
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONObject != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: request
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.passthrough.request(x_connection_token=\"<value>\", pass_through_request_dto=::OpenApiSDK::Shared::PassThroughRequestDto.new(\n    method: ::OpenApiSDK::Shared::PassThroughRequestDtoMethod::GET,\n    path: \"/dev\",\n  ))\n\nif ! res.two_hundred_application_json_object.nil?\n  # handle response\nend"
  /passthrough/{retryId}:
    get:
      operationId: getRetriedRequestResponse
      summary: Retrieve response of a failed passthrough request due to rate limits
      parameters:
        - name: retryId
          required: true
          in: path
          description: >-
            id of the retryJob returned when you initiated a passthrough request.
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_21
      x-speakeasy-group: passthrough.{retryid}
      x-codeSamples:
        - lang: typescript
          label: getRetriedRequestResponse
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.passthrough.retryid.getRetriedRequestResponse({\n    retryId: \"<value>\",\n  });\n\n  \n}\n\nrun();"
        - lang: python
          label: getRetriedRequestResponse
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.passthrough.retryid.get_retried_request_response(retry_id="<value>")

            # Use the SDK ...
        - lang: go
          label: getRetriedRequestResponse
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var retryID string = "<value>"
                ctx := context.Background()
                res, err := s.Passthrough.{retryid}.GetRetriedRequestResponse(ctx, retryID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getRetriedRequestResponse
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.passthrough_retryid.get_retried_request_response(retry_id=\"<value>\")\n\nif res.status_code == 200\n  # handle response\nend"
  /hris/bankinfos:
    get:
      operationId: listHrisBankInfo
      summary: List Bank Info
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: &ref_22
        - hris/bankinfos
      x-speakeasy-group: hris.bankinfos
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisBankInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfos.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisBankInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.bankinfos.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisBankInfo
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Bankinfos.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisBankInfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_bankinfos.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/bankinfos/{id}:
    get:
      operationId: retrieveHrisBankInfo
      summary: Retrieve Bank Info
      description: Retrieve Bank Info from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the bank info you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBankinfoOutput'
      tags: *ref_22
      x-speakeasy-group: hris.bankinfos
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfos.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisBankInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.bankinfos.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisBankInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Bankinfos.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBankinfoOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisBankInfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_bankinfos.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_bankinfo_output.nil?\n  # handle response\nend"
  /hris/benefits:
    get:
      operationId: listHrisBenefits
      summary: List Benefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: &ref_23
        - hris/benefits
      x-speakeasy-group: hris.benefits
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefits
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisBenefits
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.benefits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisBenefits
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Benefits.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisBenefits
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_benefits.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/benefits/{id}:
    get:
      operationId: retrieveHrisBenefit
      summary: Retrieve Benefit
      description: Retrieve a Benefit from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the benefit you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisBenefitOutput'
      tags: *ref_23
      x-speakeasy-group: hris.benefits
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.benefits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Benefits.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBenefitOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_benefits.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_benefit_output.nil?\n  # handle response\nend"
  /hris/companies:
    get:
      operationId: listHrisCompanies
      summary: List Companies
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisCompanyOutput'
      tags: &ref_24
        - hris/companies
      x-speakeasy-group: hris.companies
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanies
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.companies.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisCompanies
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.companies.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisCompanies
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Companies.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisCompanies
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_companies.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/companies/{id}:
    get:
      operationId: retrieveHrisCompany
      summary: Retrieve Company
      description: Retrieve a Company from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the company you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisCompanyOutput'
      tags: *ref_24
      x-speakeasy-group: hris.companies
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.companies.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.companies.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Companies.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_companies.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_company_output.nil?\n  # handle response\nend"
  /hris/dependents:
    get:
      operationId: listHrisDependents
      summary: List Dependents
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: &ref_25
        - hris/dependents
      x-speakeasy-group: hris.dependents
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependents.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisDependents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.dependents.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisDependents
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Dependents.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisDependents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_dependents.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/dependents/{id}:
    get:
      operationId: retrieveHrisDependent
      summary: Retrieve Dependent
      description: Retrieve a Dependent from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the dependent you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisDependentOutput'
      tags: *ref_25
      x-speakeasy-group: hris.dependents
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependents.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisDependent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.dependents.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisDependent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Dependents.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisDependentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisDependent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_dependents.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_dependent_output.nil?\n  # handle response\nend"
  /hris/employeepayrollruns:
    get:
      operationId: listHrisEmployeePayrollRun
      summary: List Employee Payroll Runs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployeepayrollrunOutput
      tags: &ref_26
        - hris/employeepayrollruns
      x-speakeasy-group: hris.employeepayrollruns
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employeepayrollruns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisEmployeePayrollRun
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Employeepayrollruns.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisEmployeePayrollRun
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employeepayrollruns.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employeepayrollruns/{id}:
    get:
      operationId: retrieveHrisEmployeePayrollRun
      summary: Retrieve Employee Payroll Run
      description: Retrieve Employee Payroll Run from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employeepayrollrun you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeepayrollrunOutput'
      tags: *ref_26
      x-speakeasy-group: hris.employeepayrollruns
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployeePayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employeepayrollruns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeepayrollrunOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployeePayrollRun
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employeepayrollruns.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_employeepayrollrun_output.nil?\n  # handle response\nend"
  /hris/employees:
    get:
      operationId: listHrisEmployees
      summary: List Employees
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: &ref_27
        - hris/employees
      x-speakeasy-group: hris.employees
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployees
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisEmployees
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisEmployees
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Employees.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisEmployees
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employees.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createHrisEmployee
      summary: Create Employees
      description: Create Employees in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisEmployeeInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_27
      x-speakeasy-group: hris.employees
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.create({
                xConnectionToken: "<value>",
                unifiedHrisEmployeeInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.create(x_connection_token="<value>", unified_hris_employee_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedHrisEmployeeInput := components.UnifiedHrisEmployeeInput{}
                ctx := context.Background()
                res, err := s.Hris.Employees.Create(ctx, xConnectionToken, unifiedHrisEmployeeInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createHrisEmployee
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employees.create(x_connection_token=\"<value>\", unified_hris_employee_input=::OpenApiSDK::Shared::UnifiedHrisEmployeeInput.new(), remote_data=false)\n\nif ! res.unified_hris_employee_output.nil?\n  # handle response\nend"
  /hris/employees/{id}:
    get:
      operationId: retrieveHrisEmployee
      summary: Retrieve Employee
      description: Retrieve an Employee from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employee you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployeeOutput'
      tags: *ref_27
      x-speakeasy-group: hris.employees
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployee
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employees.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployee
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Employees.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployee
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employees.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_employee_output.nil?\n  # handle response\nend"
  /hris/employerbenefits:
    get:
      operationId: listHrisEmployerBenefits
      summary: List Employer Benefits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedHrisEmployerbenefitOutput
      tags: &ref_28
        - hris/employerbenefits
      x-speakeasy-group: hris.employerbenefits
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefits
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisEmployerBenefits
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employerbenefits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisEmployerBenefits
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Employerbenefits.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisEmployerBenefits
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employerbenefits.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employerbenefits/{id}:
    get:
      operationId: retrieveHrisEmployerBenefit
      summary: Retrieve Employer Benefit
      description: Retrieve an Employer Benefit from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employer benefit you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmployerbenefitOutput'
      tags: *ref_28
      x-speakeasy-group: hris.employerbenefits
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployerBenefit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employerbenefits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployerBenefit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployerbenefitOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployerBenefit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employerbenefits.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_employerbenefit_output.nil?\n  # handle response\nend"
  /hris/employments:
    get:
      operationId: listHrisEmployments
      summary: List Employments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: &ref_29
        - hris/employments
      x-speakeasy-group: hris.employments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisEmployments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisEmployments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Employments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisEmployments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/employments/{id}:
    get:
      operationId: retrieveHrisEmployment
      summary: Retrieve Employment
      description: Retrieve an Employment from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the employment you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisEmploymentOutput'
      tags: *ref_29
      x-speakeasy-group: hris.employments
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisEmployment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.employments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisEmployment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Employments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmploymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisEmployment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_employments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_employment_output.nil?\n  # handle response\nend"
  /hris/groups:
    get:
      operationId: listHrisGroups
      summary: List Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: &ref_30
        - hris/groups
      x-speakeasy-group: hris.groups
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisGroups
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.groups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisGroups
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.groups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisGroups
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Groups.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisGroups
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_groups.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/groups/{id}:
    get:
      operationId: retrieveHrisGroup
      summary: Retrieve Group
      description: Retrieve a Group from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the group you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisGroupOutput'
      tags: *ref_30
      x-speakeasy-group: hris.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.groups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.groups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Groups.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisGroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_groups.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_group_output.nil?\n  # handle response\nend"
  /hris/locations:
    get:
      operationId: listHrisLocations
      summary: List Locations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: &ref_31
        - hris/locations
      x-speakeasy-group: hris.locations
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisLocations
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.locations.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisLocations
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.locations.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisLocations
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Locations.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisLocations
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_locations.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/locations/{id}:
    get:
      operationId: retrieveHrisLocation
      summary: Retrieve Location
      description: Retrieve a Location from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the location you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisLocationOutput'
      tags: *ref_31
      x-speakeasy-group: hris.locations
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.locations.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisLocation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.locations.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisLocation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Locations.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisLocationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisLocation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_locations.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_location_output.nil?\n  # handle response\nend"
  /hris/paygroups:
    get:
      operationId: listHrisPaygroups
      summary: List Pay Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: &ref_32
        - hris/paygroups
      x-speakeasy-group: hris.paygroups
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroups
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisPaygroups
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.paygroups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisPaygroups
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Paygroups.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisPaygroups
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_paygroups.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/paygroups/{id}:
    get:
      operationId: retrieveHrisPaygroup
      summary: Retrieve Pay Group
      description: Retrieve a Pay Group from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the paygroup you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisPaygroupOutput'
      tags: *ref_32
      x-speakeasy-group: hris.paygroups
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisPaygroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.paygroups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisPaygroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Paygroups.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPaygroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisPaygroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_paygroups.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_paygroup_output.nil?\n  # handle response\nend"
  /hris/payrollruns:
    get:
      operationId: listHrisPayrollRuns
      summary: List Payroll Runs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisPayrollrunOutput'
      tags: &ref_33
        - hris/payrollruns
      x-speakeasy-group: hris.payrollruns
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.payrollruns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisPayrollRuns
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.payrollruns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisPayrollRuns
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Payrollruns.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisPayrollRuns
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_payrollruns.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/payrollruns/{id}:
    get:
      operationId: retrieveHrisPayrollRun
      summary: Retrieve Payroll Run
      description: Retrieve a Payroll Run from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the payroll run you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisPayrollrunOutput'
      tags: *ref_33
      x-speakeasy-group: hris.payrollruns
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.payrollruns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisPayrollRun
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.payrollruns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisPayrollRun
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Payrollruns.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPayrollrunOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisPayrollRun
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_payrollruns.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_payrollrun_output.nil?\n  # handle response\nend"
  /hris/timeoffs:
    get:
      operationId: listHrisTimeoffs
      summary: List Time Offs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: &ref_34
        - hris/timeoffs
      x-speakeasy-group: hris.timeoffs
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisTimeoffs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisTimeoffs
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Timeoffs.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisTimeoffs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_timeoffs.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createHrisTimeoff
      summary: Create Timeoffs
      description: Create Timeoffs in any supported Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedHrisTimeoffInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_34
      x-speakeasy-group: hris.timeoffs
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.create({
                xConnectionToken: "<value>",
                unifiedHrisTimeoffInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.create(x_connection_token="<value>", unified_hris_timeoff_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedHrisTimeoffInput := components.UnifiedHrisTimeoffInput{}
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Create(ctx, xConnectionToken, unifiedHrisTimeoffInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createHrisTimeoff
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_timeoffs.create(x_connection_token=\"<value>\", unified_hris_timeoff_input=::OpenApiSDK::Shared::UnifiedHrisTimeoffInput.new(), remote_data=false)\n\nif ! res.unified_hris_timeoff_output.nil?\n  # handle response\nend"
  /hris/timeoffs/{id}:
    get:
      operationId: retrieveHrisTimeoff
      summary: Retrieve Time Off
      description: Retrieve a Time Off from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the time off you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffOutput'
      tags: *ref_34
      x-speakeasy-group: hris.timeoffs
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisTimeoff
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffs.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisTimeoff
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisTimeoff
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_timeoffs.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_timeoff_output.nil?\n  # handle response\nend"
  /hris/timeoffbalances:
    get:
      operationId: listHrisTimeoffbalances
      summary: List  TimeoffBalances
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: &ref_35
        - hris/timeoffbalances
      x-speakeasy-group: hris.timeoffbalances
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalances
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listHrisTimeoffbalances
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffbalances.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listHrisTimeoffbalances
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Hris.Timeoffbalances.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listHrisTimeoffbalances
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_timeoffbalances.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /hris/timeoffbalances/{id}:
    get:
      operationId: retrieveHrisTimeoffbalance
      summary: Retrieve Time off Balances
      description: Retrieve Time off Balances from any connected Hris software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the timeoffbalance you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Hris software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedHrisTimeoffbalanceOutput'
      tags: *ref_35
      x-speakeasy-group: hris.timeoffbalances
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveHrisTimeoffbalance
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hris.timeoffbalances.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveHrisTimeoffbalance
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffbalanceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveHrisTimeoffbalance
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hris_timeoffbalances.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_hris_timeoffbalance_output.nil?\n  # handle response\nend"
  /marketingautomation/actions:
    get:
      operationId: listMarketingautomationAction
      summary: List Actions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationActionOutput
      tags: &ref_36
        - marketingautomation/actions
      x-speakeasy-group: marketingautomation.actions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationAction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Actions.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAction
      summary: Create Action
      description: Create a action in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationActionInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_36
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.create(x_connection_token="<value>", unified_marketingautomation_action_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationActionInput := components.UnifiedMarketingautomationActionInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Create(ctx, xConnectionToken, unifiedMarketingautomationActionInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.create(x_connection_token=\"<value>\", unified_marketingautomation_action_input=::OpenApiSDK::Shared::UnifiedMarketingautomationActionInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/actions/{id}:
    get:
      operationId: retrieveMarketingautomationAction
      summary: Retrieve Actions
      description: Retrieve Actions from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the action you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_36
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/automations:
    get:
      operationId: listMarketingautomationAutomations
      summary: List Automations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: &ref_37
        - marketingautomation/automations
      x-speakeasy-group: marketingautomation.automations
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomations
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationAutomations
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationAutomations
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Automations.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationAutomations
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAutomation
      summary: Create Automation
      description: Create a automation in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationAutomationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_37
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.create(x_connection_token="<value>", unified_marketingautomation_automation_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationAutomationInput := components.UnifiedMarketingautomationAutomationInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Create(ctx, xConnectionToken, unifiedMarketingautomationAutomationInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.create(x_connection_token=\"<value>\", unified_marketingautomation_automation_input=::OpenApiSDK::Shared::UnifiedMarketingautomationAutomationInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/automations/{id}:
    get:
      operationId: retrieveMarketingautomationAutomation
      summary: Retrieve Automation
      description: Retrieve an Automation from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the automation you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_37
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns:
    get:
      operationId: listMarketingautomationCampaigns
      summary: List Campaigns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationCampaignOutput
      tags: &ref_38
        - marketingautomation/campaigns
      x-speakeasy-group: marketingautomation.campaigns
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaigns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationCampaigns
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationCampaigns
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Campaigns.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationCampaigns
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationCampaign
      summary: Create Campaign
      description: Create a campaign in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationCampaignInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationCampaignOutput'
      tags: *ref_38
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.create(x_connection_token="<value>", unified_marketingautomation_campaign_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationCampaignInput := components.UnifiedMarketingautomationCampaignInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Create(ctx, xConnectionToken, unifiedMarketingautomationCampaignInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.create(x_connection_token=\"<value>\", unified_marketingautomation_campaign_input=::OpenApiSDK::Shared::UnifiedMarketingautomationCampaignInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns/{id}:
    get:
      operationId: retrieveMarketingautomationCampaign
      summary: Retrieve Campaign
      description: Retrieve a Campaign from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the campaign you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationCampaignOutput'
      tags: *ref_38
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts:
    get:
      operationId: listMarketingAutomationContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationContactOutput
      tags: &ref_39
        - marketingautomation/contacts
      x-speakeasy-group: marketingautomation.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Contacts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingAutomationContact
      summary: Create Contact
      description: Create a contact in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_39
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.create(x_connection_token="<value>", unified_marketingautomation_contact_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationContactInput := components.UnifiedMarketingautomationContactInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Create(ctx, xConnectionToken, unifiedMarketingautomationContactInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.create(x_connection_token=\"<value>\", unified_marketingautomation_contact_input=::OpenApiSDK::Shared::UnifiedMarketingautomationContactInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts/{id}:
    get:
      operationId: retrieveMarketingAutomationContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_39
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/emails:
    get:
      operationId: listMarketingautomationEmails
      summary: List Emails
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEmailOutput
      tags: &ref_40
        - marketingautomation/emails
      x-speakeasy-group: marketingautomation.emails
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationEmails
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationEmails
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Emails.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationEmails
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_emails.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/emails/{id}:
    get:
      operationId: retrieveMarketingautomationEmail
      summary: Retrieve Email
      description: Retrieve an Email from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the email you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEmailOutput'
      tags: *ref_40
      x-speakeasy-group: marketingautomation.emails
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEmail
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEmail
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEmailOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEmail
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_emails.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_email_output.nil?\n  # handle response\nend"
  /marketingautomation/events:
    get:
      operationId: listMarketingAutomationEvents
      summary: List Events
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEventOutput
      tags: &ref_41
        - marketingautomation/events
      x-speakeasy-group: marketingautomation.events
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationEvents
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Events.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationEvents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_events.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/events/{id}:
    get:
      operationId: retrieveMarketingautomationEvent
      summary: Retrieve Event
      description: Retrieve an Event from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the event you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEventOutput'
      tags: *ref_41
      x-speakeasy-group: marketingautomation.events
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Events.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEventOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_events.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_event_output.nil?\n  # handle response\nend"
  /marketingautomation/lists:
    get:
      operationId: listMarketingautomationLists
      summary: List Lists
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationListOutput
      tags: &ref_42
        - marketingautomation/lists
      x-speakeasy-group: marketingautomation.lists
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationLists
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationLists
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Lists.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationLists
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationList
      summary: Create Lists
      description: Create Lists in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationListInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_42
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.create(x_connection_token="<value>", unified_marketingautomation_list_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationListInput := components.UnifiedMarketingautomationListInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Create(ctx, xConnectionToken, unifiedMarketingautomationListInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.create(x_connection_token=\"<value>\", unified_marketingautomation_list_input=::OpenApiSDK::Shared::UnifiedMarketingautomationListInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/lists/{id}:
    get:
      operationId: retrieveMarketingautomationList
      summary: Retrieve List
      description: Retrieve a List from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the list you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_42
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/messages:
    get:
      operationId: listMarketingautomationMessages
      summary: List Messages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationMessageOutput
      tags: &ref_43
        - marketingautomation/messages
      x-speakeasy-group: marketingautomation.messages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationMessages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationMessages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Messages.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationMessages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_messages.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/messages/{id}:
    get:
      operationId: retrieveMarketingautomationMessage
      summary: Retrieve Messages
      description: Retrieve Messages from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the message you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationMessageOutput'
      tags: *ref_43
      x-speakeasy-group: marketingautomation.messages
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationMessage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationMessage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationMessageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationMessage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_messages.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_message_output.nil?\n  # handle response\nend"
  /marketingautomation/templates:
    get:
      operationId: listMarketingautomationTemplates
      summary: List Templates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationTemplateOutput
      tags: &ref_44
        - marketingautomation/templates
      x-speakeasy-group: marketingautomation.templates
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingautomationTemplates
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationTemplates
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Templates.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationTemplates
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationTemplate
      summary: Create Template
      description: Create a template in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationTemplateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_44
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.create(x_connection_token="<value>", unified_marketingautomation_template_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationTemplateInput := components.UnifiedMarketingautomationTemplateInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Create(ctx, xConnectionToken, unifiedMarketingautomationTemplateInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.create(x_connection_token=\"<value>\", unified_marketingautomation_template_input=::OpenApiSDK::Shared::UnifiedMarketingautomationTemplateInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/templates/{id}:
    get:
      operationId: retrieveMarketingautomationTemplate
      summary: Retrieve Template
      description: Retrieve a Template from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the template you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_44
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/users:
    get:
      operationId: listMarketingAutomationUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationUserOutput
      tags: &ref_45
        - marketingautomation/users
      x-speakeasy-group: marketingautomation.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Users.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/users/{id}:
    get:
      operationId: retrieveMarketingAutomationUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationUserOutput'
      tags: *ref_45
      x-speakeasy-group: marketingautomation.users
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Marketingautomation.Users.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_user_output.nil?\n  # handle response\nend"
  /ats/activities:
    get:
      operationId: listAtsActivity
      summary: List  Activities
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: &ref_46
        - ats/activities
      x-speakeasy-group: ats.activities
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsActivity
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Activities.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_activities.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsActivity
      summary: Create Activities
      description: Create Activities in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsActivityInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_46
      x-speakeasy-group: ats.activities
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsActivityInputActivityType, UnifiedAtsActivityInputVisibility } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsActivityInput: {
                  activityType: UnifiedAtsActivityInputActivityType.Note,
                  subject: "Email subject",
                  body: "Dear Diana, I love you",
                  visibility: UnifiedAtsActivityInputVisibility.Public,
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsActivity
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.create(x_connection_token="<value>", unified_ats_activity_input={
                "activity_type": panora_sdk.UnifiedAtsActivityInputActivityType.NOTE,
                "subject": "Email subject",
                "body": "Dear Diana, I love you",
                "visibility": panora_sdk.UnifiedAtsActivityInputVisibility.PUBLIC,
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsActivityInput := components.UnifiedAtsActivityInput{
                    ActivityType: components.UnifiedAtsActivityInputActivityTypeNote.ToPointer(),
                    Subject: gosdk.String("Email subject"),
                    Body: gosdk.String("Dear Diana, I love you"),
                    Visibility: components.UnifiedAtsActivityInputVisibilityPublic.ToPointer(),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Activities.Create(ctx, xConnectionToken, unifiedAtsActivityInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_activities.create(x_connection_token=\"<value>\", unified_ats_activity_input=::OpenApiSDK::Shared::UnifiedAtsActivityInput.new(\n    activity_type: ::OpenApiSDK::Shared::UnifiedAtsActivityInputActivityType::NOTE,\n    subject: \"Email subject\",\n    body: \"Dear Diana, I love you\",\n    visibility: ::OpenApiSDK::Shared::UnifiedAtsActivityInputVisibility::PUBLIC,\n    candidate_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remote_created_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ats_activity_output.nil?\n  # handle response\nend"
  /ats/activities/{id}:
    get:
      operationId: retrieveAtsActivity
      summary: Retrieve Activities
      description: Retrieve Activities from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the activity you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsActivityOutput'
      tags: *ref_46
      x-speakeasy-group: ats.activities
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsActivity
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.activities.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsActivity
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Activities.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsActivity
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_activities.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_activity_output.nil?\n  # handle response\nend"
  /ats/applications:
    get:
      operationId: listAtsApplication
      summary: List  Applications
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: &ref_47
        - ats/applications
      x-speakeasy-group: ats.applications
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsApplication
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Applications.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_applications.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsApplication
      summary: Create Applications
      description: Create Applications in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsApplicationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_47
      x-speakeasy-group: ats.applications
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsApplicationInput: {
                  appliedAt: new Date("2024-10-01T12:00:00Z"),
                  rejectedAt: new Date("2024-10-01T12:00:00Z"),
                  offers: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "12345678-1234-1234-1234-123456789012",
                  ],
                  source: "Source Name",
                  creditedTo: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  currentStage: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  rejectReason: "Candidate not experienced enough",
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  jobId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsApplication
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.create(x_connection_token="<value>", unified_ats_application_input={
                "applied_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "rejected_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "offers": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "12345678-1234-1234-1234-123456789012",
                ],
                "source": "Source Name",
                "credited_to": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "current_stage": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "reject_reason": "Candidate not experienced enough",
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "job_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsApplicationInput := components.UnifiedAtsApplicationInput{
                    AppliedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RejectedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Offers: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "12345678-1234-1234-1234-123456789012",
                    },
                    Source: gosdk.String("Source Name"),
                    CreditedTo: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CurrentStage: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    RejectReason: gosdk.String("Candidate not experienced enough"),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JobID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Applications.Create(ctx, xConnectionToken, unifiedAtsApplicationInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_applications.create(x_connection_token=\"<value>\", unified_ats_application_input=::OpenApiSDK::Shared::UnifiedAtsApplicationInput.new(\n    applied_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    rejected_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    offers: [\n      \"<value>\",\n    ],\n    source: \"Source Name\",\n    credited_to: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    current_stage: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    reject_reason: \"Candidate not experienced enough\",\n    candidate_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    job_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ats_application_output.nil?\n  # handle response\nend"
  /ats/applications/{id}:
    get:
      operationId: retrieveAtsApplication
      summary: Retrieve Applications
      description: Retrieve Applications from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the application you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
      tags: *ref_47
      x-speakeasy-group: ats.applications
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsApplication
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.applications.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsApplication
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Applications.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsApplication
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_applications.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_application_output.nil?\n  # handle response\nend"
  /ats/attachments:
    get:
      operationId: listAtsAttachment
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: &ref_48
        - ats/attachments
      x-speakeasy-group: ats.attachments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsAttachment
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Attachments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_attachments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsAttachment
      summary: Create Attachments
      description: Create Attachments in any supported ATS software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_48
      x-speakeasy-group: ats.attachments
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsAttachmentInputAttachmentType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsAttachmentInput: {
                  fileUrl: "https://example.com/file.pdf",
                  fileName: "file.pdf",
                  attachmentType: UnifiedAtsAttachmentInputAttachmentType.Resume,
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteModifiedAt: new Date("2024-10-01T12:00:00Z"),
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsAttachment
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.create(x_connection_token="<value>", unified_ats_attachment_input={
                "file_url": "https://example.com/file.pdf",
                "file_name": "file.pdf",
                "attachment_type": panora_sdk.UnifiedAtsAttachmentInputAttachmentType.RESUME,
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_modified_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "candidate_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsAttachmentInput := components.UnifiedAtsAttachmentInput{
                    FileURL: gosdk.String("https://example.com/file.pdf"),
                    FileName: gosdk.String("file.pdf"),
                    AttachmentType: components.UnifiedAtsAttachmentInputAttachmentTypeResume.ToPointer(),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteModifiedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    CandidateID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Attachments.Create(ctx, xConnectionToken, unifiedAtsAttachmentInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_attachments.create(x_connection_token=\"<value>\", unified_ats_attachment_input=::OpenApiSDK::Shared::UnifiedAtsAttachmentInput.new(\n    file_url: \"https://example.com/file.pdf\",\n    file_name: \"file.pdf\",\n    attachment_type: ::OpenApiSDK::Shared::UnifiedAtsAttachmentInputAttachmentType::RESUME,\n    remote_created_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    remote_modified_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    candidate_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ats_attachment_output.nil?\n  # handle response\nend"
  /ats/attachments/{id}:
    get:
      operationId: retrieveAtsAttachment
      summary: Retrieve Attachments
      description: Retrieve Attachments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
      tags: *ref_48
      x-speakeasy-group: ats.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Attachments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_attachments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_attachment_output.nil?\n  # handle response\nend"
  /ats/candidates:
    get:
      operationId: listAtsCandidate
      summary: List  Candidates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: &ref_49
        - ats/candidates
      x-speakeasy-group: ats.candidates
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsCandidate
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Candidates.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_candidates.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsCandidate
      summary: Create Candidates
      description: Create Candidates in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsCandidateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_49
      x-speakeasy-group: ats.candidates
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";
            import { EmailAddressType, PhoneType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsCandidateInput: {
                  firstName: "Joe",
                  lastName: "Doe",
                  company: "Acme",
                  title: "Analyst",
                  locations: "New York",
                  isPrivate: false,
                  emailReachable: true,
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteModifiedAt: new Date("2024-10-01T12:00:00Z"),
                  lastInteractionAt: new Date("2024-10-01T12:00:00Z"),
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  applications: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  tags: [
                    "tag_1",
                    "tag_2",
                  ],
                  urls: [
                    {
                      url: "mywebsite.com",
                      urlType: "WEBSITE",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "+33660688899",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  emailAddresses: [
                    {
                      emailAddress: "joedoe@gmail.com",
                      emailAddressType: EmailAddressType.Work,
                    },
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsCandidate
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.create(x_connection_token="<value>", unified_ats_candidate_input={
                "first_name": "Joe",
                "last_name": "Doe",
                "company": "Acme",
                "title": "Analyst",
                "locations": "New York",
                "is_private": False,
                "email_reachable": True,
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_modified_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "last_interaction_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "applications": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "tags": [
                    "tag_1",
                    "tag_2",
                ],
                "urls": [
                    {
                        "url": "mywebsite.com",
                        "url_type": "WEBSITE",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "+33660688899",
                        "phone_type": panora_sdk.PhoneType.WORK,
                    },
                ],
                "email_addresses": [
                    {
                        "email_address": "joedoe@gmail.com",
                        "email_address_type": panora_sdk.EmailAddressType.WORK,
                    },
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsCandidateInput := components.UnifiedAtsCandidateInput{
                    FirstName: gosdk.String("Joe"),
                    LastName: gosdk.String("Doe"),
                    Company: gosdk.String("Acme"),
                    Title: gosdk.String("Analyst"),
                    Locations: gosdk.String("New York"),
                    IsPrivate: gosdk.Bool(false),
                    EmailReachable: gosdk.Bool(true),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteModifiedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    LastInteractionAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Attachments: []components.UnifiedAtsCandidateInputAttachments{
                        components.CreateUnifiedAtsCandidateInputAttachmentsStr(
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Applications: []components.UnifiedAtsCandidateInputApplications{
                        components.CreateUnifiedAtsCandidateInputApplicationsStr(
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Tags: []components.UnifiedAtsCandidateInputTags{
                        components.CreateUnifiedAtsCandidateInputTagsStr(
                        "tag_1",
                        ),
                        components.CreateUnifiedAtsCandidateInputTagsStr(
                        "tag_2",
                        ),
                    },
                    Urls: []components.URL{
                        components.URL{
                            URL: gosdk.String("mywebsite.com"),
                            URLType: gosdk.String("WEBSITE"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("+33660688899"),
                            PhoneType: components.PhoneTypeWork.ToPointer(),
                        },
                    },
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("joedoe@gmail.com"),
                            EmailAddressType: components.EmailAddressTypeWork.ToPointer(),
                        },
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Candidates.Create(ctx, xConnectionToken, unifiedAtsCandidateInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_candidates.create(x_connection_token=\"<value>\", unified_ats_candidate_input=::OpenApiSDK::Shared::UnifiedAtsCandidateInput.new(\n    first_name: \"Joe\",\n    last_name: \"Doe\",\n    company: \"Acme\",\n    title: \"Analyst\",\n    locations: \"New York\",\n    is_private: false,\n    email_reachable: true,\n    remote_created_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    remote_modified_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    last_interaction_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    attachments: [\n      \"<value>\",\n    ],\n    applications: [\n      \"<value>\",\n    ],\n    tags: [\n      \"<value>\",\n    ],\n    urls: [\n      ::OpenApiSDK::Shared::Url.new(\n        url: \"http://limp-pastry.org\",\n        url_type: \"<value>\",\n      ),\n    ],\n    phone_numbers: [\n      ::OpenApiSDK::Shared::Phone.new(\n        phone_number: \"<value>\",\n        phone_type: ::OpenApiSDK::Shared::PhoneType::MOBILE,\n      ),\n    ],\n    email_addresses: [\n      ::OpenApiSDK::Shared::Email.new(\n        email_address: \"Bria99@gmail.com\",\n        email_address_type: ::OpenApiSDK::Shared::EmailAddressType::WORK,\n      ),\n    ],\n    field_mappings: {\n      \"abnormally\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ats_candidate_output.nil?\n  # handle response\nend"
  /ats/candidates/{id}:
    get:
      operationId: retrieveAtsCandidate
      summary: Retrieve Candidates
      description: Retrieve Candidates from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the candidate you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsCandidateOutput'
      tags: *ref_49
      x-speakeasy-group: ats.candidates
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsCandidate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.candidates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsCandidate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Candidates.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsCandidate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_candidates.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_candidate_output.nil?\n  # handle response\nend"
  /ats/departments:
    get:
      operationId: listAtsDepartments
      summary: List  Departments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: &ref_50
        - ats/departments
      x-speakeasy-group: ats.departments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.departments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsDepartments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.departments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsDepartments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Departments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsDepartments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_departments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/departments/{id}:
    get:
      operationId: retrieveAtsDepartment
      summary: Retrieve Departments
      description: Retrieve Departments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the department you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsDepartmentOutput'
      tags: *ref_50
      x-speakeasy-group: ats.departments
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.departments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsDepartment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.departments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsDepartment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Departments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsDepartmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsDepartment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_departments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_department_output.nil?\n  # handle response\nend"
  /ats/interviews:
    get:
      operationId: listAtsInterview
      summary: List  Interviews
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: &ref_51
        - ats/interviews
      x-speakeasy-group: ats.interviews
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsInterview
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Interviews.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_interviews.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAtsInterview
      summary: Create Interviews
      description: Create Interviews in any supported Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAtsInterviewInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_51
      x-speakeasy-group: ats.interviews
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsInterviewInputStatus } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsInterviewInput: {
                  status: UnifiedAtsInterviewInputStatus.Scheduled,
                  applicationId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  jobInterviewStageId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  organizedBy: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  interviewers: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  location: "San Francisco",
                  startAt: new Date("2024-10-01T12:00:00Z"),
                  endAt: new Date("2024-10-01T12:00:00Z"),
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteUpdatedAt: new Date("2024-10-01T12:00:00Z"),
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAtsInterview
          source: |-
            import dateutil.parser
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.create(x_connection_token="<value>", unified_ats_interview_input={
                "status": panora_sdk.UnifiedAtsInterviewInputStatus.SCHEDULED,
                "application_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "job_interview_stage_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "organized_by": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "interviewers": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "location": "San Francisco",
                "start_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "end_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_created_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "remote_updated_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"github.com/panoratech/go-sdk/types"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsInterviewInput := components.UnifiedAtsInterviewInput{
                    Status: components.UnifiedAtsInterviewInputStatusScheduled.ToPointer(),
                    ApplicationID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JobInterviewStageID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    OrganizedBy: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Interviewers: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Location: gosdk.String("San Francisco"),
                    StartAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    EndAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteCreatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    RemoteUpdatedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Interviews.Create(ctx, xConnectionToken, unifiedAtsInterviewInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_interviews.create(x_connection_token=\"<value>\", unified_ats_interview_input=::OpenApiSDK::Shared::UnifiedAtsInterviewInput.new(\n    status: ::OpenApiSDK::Shared::UnifiedAtsInterviewInputStatus::SCHEDULED,\n    application_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    job_interview_stage_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    organized_by: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    interviewers: [\n      \"<value>\",\n    ],\n    location: \"San Francisco\",\n    start_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    end_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    remote_created_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    remote_updated_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ats_interview_output.nil?\n  # handle response\nend"
  /ats/interviews/{id}:
    get:
      operationId: retrieveAtsInterview
      summary: Retrieve Interviews
      description: Retrieve Interviews from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the interview you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsInterviewOutput'
      tags: *ref_51
      x-speakeasy-group: ats.interviews
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsInterview
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.interviews.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsInterview
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Interviews.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsInterview
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_interviews.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_interview_output.nil?\n  # handle response\nend"
  /ats/jobinterviewstages:
    get:
      operationId: listAtsJobInterviewStage
      summary: List  JobInterviewStages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAtsJobinterviewstageOutput
      tags: &ref_52
        - ats/jobinterviewstages
      x-speakeasy-group: ats.jobinterviewstages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobinterviewstages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsJobInterviewStage
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Jobinterviewstages.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsJobInterviewStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_jobinterviewstages.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/jobinterviewstages/{id}:
    get:
      operationId: retrieveAtsJobInterviewStage
      summary: Retrieve Job Interview Stages
      description: Retrieve Job Interview Stages from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the jobinterviewstage you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobinterviewstageOutput'
      tags: *ref_52
      x-speakeasy-group: ats.jobinterviewstages
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsJobInterviewStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobinterviewstages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsJobInterviewStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobinterviewstageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsJobInterviewStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_jobinterviewstages.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_jobinterviewstage_output.nil?\n  # handle response\nend"
  /ats/jobs:
    get:
      operationId: listAtsJob
      summary: List  Jobs
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: &ref_53
        - ats/jobs
      x-speakeasy-group: ats.jobs
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsJob
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Jobs.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsJob
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_jobs.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/jobs/{id}:
    get:
      operationId: retrieveAtsJob
      summary: Retrieve Jobs
      description: Retrieve Jobs from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the job you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsJobOutput'
      tags: *ref_53
      x-speakeasy-group: ats.jobs
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobs.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsJob
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.jobs.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsJob
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Jobs.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsJob
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_jobs.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_job_output.nil?\n  # handle response\nend"
  /ats/offers:
    get:
      operationId: listAtsOffer
      summary: List  Offers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: &ref_54
        - ats/offers
      x-speakeasy-group: ats.offers
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsOffer
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Offers.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsOffer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_offers.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/offers/{id}:
    get:
      operationId: retrieveAtsOffer
      summary: Retrieve Offers
      description: Retrieve Offers from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the offer you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfferOutput'
      tags: *ref_54
      x-speakeasy-group: ats.offers
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offers.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsOffer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offers.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsOffer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Offers.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfferOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsOffer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_offers.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_offer_output.nil?\n  # handle response\nend"
  /ats/offices:
    get:
      operationId: listAtsOffice
      summary: List Offices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: &ref_55
        - ats/offices
      x-speakeasy-group: ats.offices
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offices.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offices.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsOffice
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Offices.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsOffice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_offices.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/offices/{id}:
    get:
      operationId: retrieveAtsOffice
      summary: Retrieve Offices
      description: Retrieve Offices from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the office you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsOfficeOutput'
      tags: *ref_55
      x-speakeasy-group: ats.offices
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offices.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsOffice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.offices.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsOffice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Offices.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfficeOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsOffice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_offices.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_office_output.nil?\n  # handle response\nend"
  /ats/rejectreasons:
    get:
      operationId: listAtsRejectReasons
      summary: List  RejectReasons
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: &ref_56
        - ats/rejectreasons
      x-speakeasy-group: ats.rejectreasons
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreasons.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsRejectReasons
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.rejectreasons.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsRejectReasons
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Rejectreasons.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsRejectReasons
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_rejectreasons.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/rejectreasons/{id}:
    get:
      operationId: retrieveAtsRejectReason
      summary: Retrieve Reject Reasons
      description: Retrieve Reject Reasons from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the rejectreason you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsRejectreasonOutput'
      tags: *ref_56
      x-speakeasy-group: ats.rejectreasons
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreasons.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsRejectReason
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.rejectreasons.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsRejectReason
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsRejectreasonOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsRejectReason
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_rejectreasons.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_rejectreason_output.nil?\n  # handle response\nend"
  /ats/scorecards:
    get:
      operationId: listAtsScorecard
      summary: List  ScoreCards
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: &ref_57
        - ats/scorecards
      x-speakeasy-group: ats.scorecards
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecards.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.scorecards.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsScorecard
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Scorecards.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsScorecard
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_scorecards.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/scorecards/{id}:
    get:
      operationId: retrieveAtsScorecard
      summary: Retrieve Score Cards
      description: Retrieve Score Cards from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the scorecard you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsScorecardOutput'
      tags: *ref_57
      x-speakeasy-group: ats.scorecards
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecards.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsScorecard
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.scorecards.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsScorecard
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Scorecards.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsScorecardOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsScorecard
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_scorecards.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_scorecard_output.nil?\n  # handle response\nend"
  /ats/tags:
    get:
      operationId: listAtsTags
      summary: List  Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: &ref_58
        - ats/tags
      x-speakeasy-group: ats.tags
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.tags.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsTags
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.tags.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsTags
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Tags.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsTags
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_tags.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/tags/{id}:
    get:
      operationId: retrieveAtsTag
      summary: Retrieve Tags
      description: Retrieve Tags from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsTagOutput'
      tags: *ref_58
      x-speakeasy-group: ats.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.tags.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsTag
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.tags.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Tags.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsTagOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsTag
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_tags.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_tag_output.nil?\n  # handle response\nend"
  /ats/users:
    get:
      operationId: listAtsUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: &ref_59
        - ats/users
      x-speakeasy-group: ats.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Users.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/users/{id}:
    get:
      operationId: retrieveAtsUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsUserOutput'
      tags: *ref_59
      x-speakeasy-group: ats.users
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ats.Users.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ats_user_output.nil?\n  # handle response\nend"
  /ats/eeocs:
    get:
      operationId: listAtsEeocs
      summary: List  Eeocss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: &ref_60
        - ats/eeocs
      x-speakeasy-group: ats.eeocs
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.eeocs.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAtsEeocs
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ats.Eeocs.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAtsEeocs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_eeocs.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ats/eeocs/{id}:
    get:
      operationId: retrieveAtsEeocs
      summary: Retrieve Eeocs
      description: Retrieve a eeocs from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the eeocs you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAtsEeocsOutput'
      tags: *ref_60
      x-speakeasy-group: ats.eeocs
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAtsEeocs
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ats.eeocs.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAtsEeocs
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Eeocs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsEeocsOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAtsEeocs
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ats_eeocs.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ats_eeocs_output.nil?\n  # handle response\nend"
  /accounting/accounts:
    get:
      operationId: listAccountingAccounts
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: &ref_61
        - accounting/accounts
      x-speakeasy-group: accounting.accounts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingAccounts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAccounts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Accounts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAccounts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAccount
      summary: Create Accounts
      description: Create accounts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAccountInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_61
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAccountInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.create(x_connection_token="<value>", unified_accounting_account_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingAccountInput := components.UnifiedAccountingAccountInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Create(ctx, xConnectionToken, unifiedAccountingAccountInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.create(x_connection_token=\"<value>\", unified_accounting_account_input=::OpenApiSDK::Shared::UnifiedAccountingAccountInput.new(), remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/accounts/{id}:
    get:
      operationId: retrieveAccountingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_61
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/addresses:
    get:
      operationId: listAccountingAddress
      summary: List  Addresss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: &ref_62
        - accounting/addresses
      x-speakeasy-group: accounting.addresses
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAddress
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Addresses.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_addresses.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/addresses/{id}:
    get:
      operationId: retrieveAccountingAddress
      summary: Retrieve Addresses
      description: Retrieve Addresses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the address you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: *ref_62
      x-speakeasy-group: accounting.addresses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAddress
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Addresses.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAddressOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_addresses.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_address_output.nil?\n  # handle response\nend"
  /accounting/attachments:
    get:
      operationId: listAccountingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingAttachmentOutput
      tags: &ref_63
        - accounting/attachments
      x-speakeasy-group: accounting.attachments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Attachments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAttachment
      summary: Create Attachments
      description: Create attachments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_63
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.create(x_connection_token="<value>", unified_accounting_attachment_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingAttachmentInput := components.UnifiedAccountingAttachmentInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Create(ctx, xConnectionToken, unifiedAccountingAttachmentInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.create(x_connection_token=\"<value>\", unified_accounting_attachment_input=::OpenApiSDK::Shared::UnifiedAccountingAttachmentInput.new(), remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/attachments/{id}:
    get:
      operationId: retrieveAccountingAttachment
      summary: Retrieve Attachments
      description: Retrieve attachments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_63
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/balancesheets:
    get:
      operationId: listAccountingBalanceSheets
      summary: List  BalanceSheets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingBalancesheetOutput
      tags: &ref_64
        - accounting/balancesheets
      x-speakeasy-group: accounting.balancesheets
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingBalanceSheets
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingBalanceSheets
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Balancesheets.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingBalanceSheets
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_balancesheets.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/balancesheets/{id}:
    get:
      operationId: retrieveAccountingBalanceSheet
      summary: Retrieve BalanceSheets
      description: Retrieve BalanceSheets from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the balancesheet you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingBalancesheetOutput'
      tags: *ref_64
      x-speakeasy-group: accounting.balancesheets
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingBalanceSheet
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingBalanceSheet
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingBalancesheetOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingBalanceSheet
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_balancesheets.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_balancesheet_output.nil?\n  # handle response\nend"
  /accounting/cashflowstatements:
    get:
      operationId: listAccountingCashflowStatement
      summary: List  CashflowStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCashflowstatementOutput
      tags: &ref_65
        - accounting/cashflowstatements
      x-speakeasy-group: accounting.cashflowstatements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCashflowStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Cashflowstatements.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_cashflowstatements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/cashflowstatements/{id}:
    get:
      operationId: retrieveAccountingCashflowStatement
      summary: Retrieve Cashflow Statements
      description: Retrieve Cashflow Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the cashflowstatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCashflowstatementOutput'
      tags: *ref_65
      x-speakeasy-group: accounting.cashflowstatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCashflowStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCashflowstatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_cashflowstatements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_cashflowstatement_output.nil?\n  # handle response\nend"
  /accounting/companyinfos:
    get:
      operationId: listAccountingCompanyInfos
      summary: List  CompanyInfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCompanyinfoOutput
      tags: &ref_66
        - accounting/companyinfos
      x-speakeasy-group: accounting.companyinfos
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingCompanyInfos
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCompanyInfos
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Companyinfos.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCompanyInfos
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_companyinfos.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/companyinfos/{id}:
    get:
      operationId: retrieveAccountingCompanyInfo
      summary: Retrieve Company Infos
      description: Retrieve Company Infos from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the companyinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCompanyinfoOutput'
      tags: *ref_66
      x-speakeasy-group: accounting.companyinfos
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCompanyInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCompanyInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCompanyinfoOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCompanyInfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_companyinfos.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_companyinfo_output.nil?\n  # handle response\nend"
  /accounting/contacts:
    get:
      operationId: listAccountingContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: &ref_67
        - accounting/contacts
      x-speakeasy-group: accounting.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Contacts.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingContact
      summary: Create Contacts
      description: Create contacts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_67
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.create(x_connection_token="<value>", unified_accounting_contact_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingContactInput := components.UnifiedAccountingContactInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Create(ctx, xConnectionToken, unifiedAccountingContactInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.create(x_connection_token=\"<value>\", unified_accounting_contact_input=::OpenApiSDK::Shared::UnifiedAccountingContactInput.new(), remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/contacts/{id}:
    get:
      operationId: retrieveAccountingContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_67
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/creditnotes:
    get:
      operationId: listAccountingCreditNote
      summary: List  CreditNotes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCreditnoteOutput
      tags: &ref_68
        - accounting/creditnotes
      x-speakeasy-group: accounting.creditnotes
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCreditNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Creditnotes.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_creditnotes.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/creditnotes/{id}:
    get:
      operationId: retrieveAccountingCreditNote
      summary: Retrieve Credit Notes
      description: Retrieve Credit Notes from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the creditnote you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCreditnoteOutput'
      tags: *ref_68
      x-speakeasy-group: accounting.creditnotes
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCreditNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCreditnoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_creditnotes.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_creditnote_output.nil?\n  # handle response\nend"
  /accounting/expenses:
    get:
      operationId: listAccountingExpense
      summary: List  Expenses
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: &ref_69
        - accounting/expenses
      x-speakeasy-group: accounting.expenses
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingExpense
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Expenses.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingExpense
      summary: Create Expenses
      description: Create Expenses in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingExpenseInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_69
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingExpenseInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.create(x_connection_token="<value>", unified_accounting_expense_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingExpenseInput := components.UnifiedAccountingExpenseInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Create(ctx, xConnectionToken, unifiedAccountingExpenseInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.create(x_connection_token=\"<value>\", unified_accounting_expense_input=::OpenApiSDK::Shared::UnifiedAccountingExpenseInput.new(), remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/expenses/{id}:
    get:
      operationId: retrieveAccountingExpense
      summary: Retrieve Expenses
      description: Retrieve Expenses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the expense you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_69
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/incomestatements:
    get:
      operationId: listAccountingIncomeStatement
      summary: List  IncomeStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingIncomestatementOutput
      tags: &ref_70
        - accounting/incomestatements
      x-speakeasy-group: accounting.incomestatements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingIncomeStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Incomestatements.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_incomestatements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/incomestatements/{id}:
    get:
      operationId: retrieveAccountingIncomeStatement
      summary: Retrieve Income Statements
      description: Retrieve Income Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the incomestatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingIncomestatementOutput'
      tags: *ref_70
      x-speakeasy-group: accounting.incomestatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingIncomeStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingIncomestatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_incomestatements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_incomestatement_output.nil?\n  # handle response\nend"
  /accounting/invoices:
    get:
      operationId: listAccountingInvoice
      summary: List  Invoices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: &ref_71
        - accounting/invoices
      x-speakeasy-group: accounting.invoices
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingInvoice
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Invoices.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingInvoice
      summary: Create Invoices
      description: Create invoices in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingInvoiceInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_71
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingInvoiceInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.create(x_connection_token="<value>", unified_accounting_invoice_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingInvoiceInput := components.UnifiedAccountingInvoiceInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Create(ctx, xConnectionToken, unifiedAccountingInvoiceInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.create(x_connection_token=\"<value>\", unified_accounting_invoice_input=::OpenApiSDK::Shared::UnifiedAccountingInvoiceInput.new(), remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/invoices/{id}:
    get:
      operationId: retrieveAccountingInvoice
      summary: Retrieve Invoices
      description: Retrieve Invoices from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the invoice you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_71
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/items:
    get:
      operationId: listAccountingItem
      summary: List  Items
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: &ref_72
        - accounting/items
      x-speakeasy-group: accounting.items
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingItem
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Items.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_items.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/items/{id}:
    get:
      operationId: retrieveAccountingItem
      summary: Retrieve Items
      description: Retrieve Items from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the item you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: *ref_72
      x-speakeasy-group: accounting.items
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingItem
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Items.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingItemOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_items.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_item_output.nil?\n  # handle response\nend"
  /accounting/journalentries:
    get:
      operationId: listAccountingJournalEntry
      summary: List  JournalEntrys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingJournalentryOutput
      tags: &ref_73
        - accounting/journalentries
      x-speakeasy-group: accounting.journalentries
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingJournalEntry
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Journalentries.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingJournalEntry
      summary: Create Journal Entries
      description: Create Journal Entries in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingJournalentryInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_73
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingJournalentryInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.create(x_connection_token="<value>", unified_accounting_journalentry_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingJournalentryInput := components.UnifiedAccountingJournalentryInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Create(ctx, xConnectionToken, unifiedAccountingJournalentryInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.create(x_connection_token=\"<value>\", unified_accounting_journalentry_input=::OpenApiSDK::Shared::UnifiedAccountingJournalentryInput.new(), remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/journalentries/{id}:
    get:
      operationId: retrieveAccountingJournalEntry
      summary: Retrieve Journal Entries
      description: Retrieve Journal Entries from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the journalentry you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_73
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/payments:
    get:
      operationId: listAccountingPayment
      summary: List  Payments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: &ref_74
        - accounting/payments
      x-speakeasy-group: accounting.payments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPayment
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Payments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPayment
      summary: Create Payments
      description: Create Payments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPaymentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_74
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPaymentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.create(x_connection_token="<value>", unified_accounting_payment_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingPaymentInput := components.UnifiedAccountingPaymentInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Payments.Create(ctx, xConnectionToken, unifiedAccountingPaymentInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.create(x_connection_token=\"<value>\", unified_accounting_payment_input=::OpenApiSDK::Shared::UnifiedAccountingPaymentInput.new(), remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/payments/{id}:
    get:
      operationId: retrieveAccountingPayment
      summary: Retrieve Payments
      description: Retrieve Payments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the payment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_74
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Payments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/phonenumbers:
    get:
      operationId: listAccountingPhonenumber
      summary: List  PhoneNumbers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPhonenumberOutput
      tags: &ref_75
        - accounting/phonenumbers
      x-speakeasy-group: accounting.phonenumbers
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPhonenumber
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Phonenumbers.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_phonenumbers.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/phonenumbers/{id}:
    get:
      operationId: retrieveAccountingPhonenumber
      summary: Retrieve Phone Numbers
      description: Retrieve Phone Numbers from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the phonenumber you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPhonenumberOutput'
      tags: *ref_75
      x-speakeasy-group: accounting.phonenumbers
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPhonenumber
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPhonenumberOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_phonenumbers.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_phonenumber_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders:
    get:
      operationId: listAccountingPurchaseOrder
      summary: List  PurchaseOrders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPurchaseorderOutput
      tags: &ref_76
        - accounting/purchaseorders
      x-speakeasy-group: accounting.purchaseorders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPurchaseOrder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Purchaseorders.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPurchaseOrder
      summary: Create Purchase Orders
      description: Create Purchase Orders in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPurchaseorderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_76
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPurchaseorderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.create(x_connection_token="<value>", unified_accounting_purchaseorder_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingPurchaseorderInput := components.UnifiedAccountingPurchaseorderInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Create(ctx, xConnectionToken, unifiedAccountingPurchaseorderInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.create(x_connection_token=\"<value>\", unified_accounting_purchaseorder_input=::OpenApiSDK::Shared::UnifiedAccountingPurchaseorderInput.new(), remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders/{id}:
    get:
      operationId: retrieveAccountingPurchaseOrder
      summary: Retrieve Purchase Orders
      description: Retrieve Purchase Orders from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the purchaseorder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_76
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/taxrates:
    get:
      operationId: listAccountingTaxRate
      summary: List  TaxRates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: &ref_77
        - accounting/taxrates
      x-speakeasy-group: accounting.taxrates
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTaxRate
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Taxrates.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_taxrates.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/taxrates/{id}:
    get:
      operationId: retrieveAccountingTaxRate
      summary: Retrieve Tax Rates
      description: Retrieve Tax Rates from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the taxrate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: *ref_77
      x-speakeasy-group: accounting.taxrates
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTaxRate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Taxrates.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTaxrateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_taxrates.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_taxrate_output.nil?\n  # handle response\nend"
  /accounting/trackingcategories:
    get:
      operationId: listAccountingTrackingCategorys
      summary: List  TrackingCategorys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTrackingcategoryOutput
      tags: &ref_78
        - accounting/trackingcategories
      x-speakeasy-group: accounting.trackingcategories
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingTrackingCategorys
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTrackingCategorys
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Trackingcategories.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTrackingCategorys
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_trackingcategories.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/trackingcategories/{id}:
    get:
      operationId: retrieveAccountingTrackingCategory
      summary: Retrieve Tracking Categories
      description: Retrieve Tracking Categories from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the trackingcategory you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTrackingcategoryOutput'
      tags: *ref_78
      x-speakeasy-group: accounting.trackingcategories
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTrackingCategory
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTrackingCategory
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTrackingcategoryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTrackingCategory
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_trackingcategories.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_trackingcategory_output.nil?\n  # handle response\nend"
  /accounting/transactions:
    get:
      operationId: listAccountingTransaction
      summary: List  Transactions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTransactionOutput
      tags: &ref_79
        - accounting/transactions
      x-speakeasy-group: accounting.transactions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTransaction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Transactions.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_transactions.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/transactions/{id}:
    get:
      operationId: retrieveAccountingTransaction
      summary: Retrieve Transactions
      description: Retrieve Transactions from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the transaction you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTransactionOutput'
      tags: *ref_79
      x-speakeasy-group: accounting.transactions
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTransaction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Transactions.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTransactionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_transactions.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_transaction_output.nil?\n  # handle response\nend"
  /accounting/vendorcredits:
    get:
      operationId: listAccountingVendorCredit
      summary: List  VendorCredits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingVendorcreditOutput
      tags: &ref_80
        - accounting/vendorcredits
      x-speakeasy-group: accounting.vendorcredits
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingVendorCredit
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Accounting.Vendorcredits.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_vendorcredits.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/vendorcredits/{id}:
    get:
      operationId: retrieveAccountingVendorCredit
      summary: Retrieve Vendor Credits
      description: Retrieve Vendor Credits from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the vendorcredit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingVendorcreditOutput'
      tags: *ref_80
      x-speakeasy-group: accounting.vendorcredits
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingVendorCredit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingVendorcreditOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_vendorcredits.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_vendorcredit_output.nil?\n  # handle response\nend"
  /filestorage/drives:
    get:
      operationId: listFilestorageDrives
      summary: List Drives
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: &ref_81
        - filestorage/drives
      x-speakeasy-group: filestorage.drives
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageDrives
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listFilestorageDrives
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.drives.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageDrives
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Filestorage.Drives.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageDrives
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_drives.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/drives/{id}:
    get:
      operationId: retrieveFilestorageDrive
      summary: Retrieve Drive
      description: Retrieve a Drive from any connected file storage service
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the drive you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original file storage service.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageDriveOutput'
      tags: *ref_81
      x-speakeasy-group: filestorage.drives
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageDrive
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageDrive
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.drives.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageDrive
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Drives.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageDriveOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageDrive
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_drives.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_drive_output.nil?\n  # handle response\nend"
  /filestorage/files:
    get:
      operationId: listFilestorageFile
      summary: List  Files
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: &ref_82
        - filestorage/files
      x-speakeasy-group: filestorage.files
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageFile
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Filestorage.Files.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFile
      summary: Create Files
      description: Create Files in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFileInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_82
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "my_paris_photo.png",
                  fileUrl: "https://example.com/my_paris_photo.png",
                  mimeType: "application/pdf",
                  size: "1024",
                  folderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.create(x_connection_token="<value>", unified_filestorage_file_input={
                "name": "my_paris_photo.png",
                "file_url": "https://example.com/my_paris_photo.png",
                "mime_type": "application/pdf",
                "size": "1024",
                "folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedFilestorageFileInput := components.UnifiedFilestorageFileInput{
                    Name: gosdk.String("my_paris_photo.png"),
                    FileURL: gosdk.String("https://example.com/my_paris_photo.png"),
                    MimeType: gosdk.String("application/pdf"),
                    Size: gosdk.String("1024"),
                    FolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Files.Create(ctx, xConnectionToken, unifiedFilestorageFileInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.create(x_connection_token=\"<value>\", unified_filestorage_file_input=::OpenApiSDK::Shared::UnifiedFilestorageFileInput.new(\n    name: \"my_paris_photo.png\",\n    file_url: \"https://example.com/my_paris_photo.png\",\n    mime_type: \"application/pdf\",\n    size: \"1024\",\n    folder_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    shared_link: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /filestorage/files/{id}:
    get:
      operationId: retrieveFilestorageFile
      summary: Retrieve Files
      description: Retrieve Files from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the file you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_82
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Files.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /filestorage/folders:
    get:
      operationId: listFilestorageFolder
      summary: List  Folders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: &ref_83
        - filestorage/folders
      x-speakeasy-group: filestorage.folders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageFolder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Filestorage.Folders.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFolder
      summary: Create Folders
      description: Create Folders in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFolderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_83
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "school",
                  size: "2048",
                  folderUrl: "https://example.com/school",
                  description: "All things school related",
                  driveId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  parentFolderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.create(x_connection_token="<value>", unified_filestorage_folder_input={
                "name": "school",
                "size": "2048",
                "folder_url": "https://example.com/school",
                "description": "All things school related",
                "drive_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "parent_folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedFilestorageFolderInput := components.UnifiedFilestorageFolderInput{
                    Name: gosdk.String("school"),
                    Size: gosdk.String("2048"),
                    FolderURL: gosdk.String("https://example.com/school"),
                    Description: "All things school related",
                    DriveID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ParentFolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Create(ctx, xConnectionToken, unifiedFilestorageFolderInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.create(x_connection_token=\"<value>\", unified_filestorage_folder_input=::OpenApiSDK::Shared::UnifiedFilestorageFolderInput.new(\n    name: \"school\",\n    size: \"2048\",\n    folder_url: \"https://example.com/school\",\n    description: \"All things school related\",\n    drive_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    parent_folder_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    shared_link: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/folders/{id}:
    get:
      operationId: retrieveFilestorageFolder
      summary: Retrieve Folders
      description: Retrieve Folders from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the folder you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_83
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/groups:
    get:
      operationId: listFilestorageGroup
      summary: List  Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: &ref_84
        - filestorage/groups
      x-speakeasy-group: filestorage.groups
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageGroup
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Filestorage.Groups.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_groups.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/groups/{id}:
    get:
      operationId: retrieveFilestorageGroup
      summary: Retrieve Groups
      description: Retrieve Groups from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: *ref_84
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Groups.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageGroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_groups.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_group_output.nil?\n  # handle response\nend"
  /filestorage/users:
    get:
      operationId: listFilestorageUsers
      summary: List Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
      tags: &ref_85
        - filestorage/users
      x-speakeasy-group: filestorage.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listFilestorageUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Filestorage.Users.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/users/{id}:
    get:
      operationId: retrieveFilestorageUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
      tags: *ref_85
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveFilestorageUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Filestorage.Users.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_user_output.nil?\n  # handle response\nend"
  /ecommerce/products:
    get:
      operationId: listEcommerceProducts
      summary: List Products
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: &ref_86
        - ecommerce/products
      x-speakeasy-group: ecommerce.products
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceProducts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listEcommerceProducts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceProducts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ecommerce.Products.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceProducts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createEcommerceProduct
      summary: Create Products
      description: Create Products in any supported Ecommerce software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedEcommerceProductInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: *ref_86
      x-speakeasy-group: ecommerce.products
      x-codeSamples:
        - lang: typescript
          label: createEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedEcommerceProductInputProductStatus } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceProductInput: {
                  productUrl: "https://product_url/tee",
                  productType: "teeshirt",
                  productStatus: UnifiedEcommerceProductInputProductStatus.Active,
                  imagesUrls: [
                    "https://myproduct/image",
                  ],
                  description: "best tee ever",
                  vendor: "vendor_extern",
                  variants: [
                    {},
                  ],
                  tags: [
                    "tag_1",
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.create(x_connection_token="<value>", unified_ecommerce_product_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedEcommerceProductInput := components.UnifiedEcommerceProductInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ecommerce.Products.Create(ctx, xConnectionToken, unifiedEcommerceProductInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createEcommerceProduct
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.create(x_connection_token=\"<value>\", unified_ecommerce_product_input=::OpenApiSDK::Shared::UnifiedEcommerceProductInput.new(), remote_data=false)\n\nif ! res.unified_ecommerce_product_output.nil?\n  # handle response\nend"
  /ecommerce/products/{id}:
    get:
      operationId: retrieveEcommerceProduct
      summary: Retrieve Products
      description: Retrieve products from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the product you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: *ref_86
      x-speakeasy-group: ecommerce.products
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ecommerce.Products.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceProduct
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ecommerce_product_output.nil?\n  # handle response\nend"
  /ecommerce/orders:
    get:
      operationId: listEcommerceOrders
      summary: List Orders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: &ref_87
        - ecommerce/orders
      x-speakeasy-group: ecommerce.orders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceOrders
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listEcommerceOrders
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceOrders
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ecommerce.Orders.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceOrders
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createEcommerceOrder
      summary: Create Orders
      description: Create Orders in any supported Ecommerce software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedEcommerceOrderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: *ref_87
      x-speakeasy-group: ecommerce.orders
      x-codeSamples:
        - lang: typescript
          label: createEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedEcommerceOrderInputCurrency } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceOrderInput: {
                  orderStatus: "PAID",
                  orderNumber: "19823838833",
                  paymentStatus: "SUCCESS",
                  currency: UnifiedEcommerceOrderInputCurrency.Aud,
                  totalPrice: 300,
                  totalDiscount: 10,
                  totalShipping: 120,
                  totalTax: 120,
                  fulfillmentStatus: "delivered",
                  customerId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  items: {},
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createEcommerceOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.create(x_connection_token="<value>", unified_ecommerce_order_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedEcommerceOrderInput := components.UnifiedEcommerceOrderInput{}

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Create(ctx, xConnectionToken, unifiedEcommerceOrderInput, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createEcommerceOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.create(x_connection_token=\"<value>\", unified_ecommerce_order_input=::OpenApiSDK::Shared::UnifiedEcommerceOrderInput.new(), remote_data=false)\n\nif ! res.unified_ecommerce_order_output.nil?\n  # handle response\nend"
  /ecommerce/orders/{id}:
    get:
      operationId: retrieveEcommerceOrder
      summary: Retrieve Orders
      description: Retrieve orders from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the order you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: *ref_87
      x-speakeasy-group: ecommerce.orders
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveEcommerceOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ecommerce_order_output.nil?\n  # handle response\nend"
  /ecommerce/customers:
    get:
      operationId: listEcommerceCustomers
      summary: List Customers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceCustomerOutput'
      tags: &ref_88
        - ecommerce/customers
      x-speakeasy-group: ecommerce.customers
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceCustomers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listEcommerceCustomers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceCustomers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ecommerce.Customers.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceCustomers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_customers.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ecommerce/customers/{id}:
    get:
      operationId: retrieveEcommerceCustomer
      summary: Retrieve Customers
      description: Retrieve customers from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the customer you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceCustomerOutput'
      tags: *ref_88
      x-speakeasy-group: ecommerce.customers
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceCustomer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveEcommerceCustomer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceCustomer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ecommerce.Customers.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceCustomerOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceCustomer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_customers.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ecommerce_customer_output.nil?\n  # handle response\nend"
  /ecommerce/fulfillments:
    get:
      operationId: listEcommerceFulfillments
      summary: List Fulfillments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedEcommerceFulfillmentOutput
      tags: &ref_89
        - ecommerce/fulfillments
      x-speakeasy-group: ecommerce.fulfillments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceFulfillments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listEcommerceFulfillments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceFulfillments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ecommerce.Fulfillments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceFulfillments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_fulfillments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ecommerce/fulfillments/{id}:
    get:
      operationId: retrieveEcommerceFulfillment
      summary: Retrieve Fulfillments
      description: Retrieve fulfillments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the fulfillment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceFulfillmentOutput'
      tags: *ref_89
      x-speakeasy-group: ecommerce.fulfillments
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceFulfillment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveEcommerceFulfillment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceFulfillment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ecommerce.Fulfillments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceFulfillmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceFulfillment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_fulfillments.retrieve(x_connection_token=\"<value>\", id=\"<value>\", remote_data=false)\n\nif ! res.unified_ecommerce_fulfillment_output.nil?\n  # handle response\nend"
  /ticketing/attachments:
    get:
      operationId: listTicketingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingAttachmentOutput
      tags: &ref_90
        - ticketing/attachments
      x-speakeasy-group: ticketing.attachments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
        - lang: python
          label: listTicketingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n    var xConnectionToken string = \"<value>\"\n\n    var remoteData *bool = gosdk.Bool(true)\n\n    var limit *float64 = gosdk.Float64(10)\n\n    var cursor *string = gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n    ctx := context.Background()\n    res, err := s.Ticketing.Attachments.List(ctx, xConnectionToken, remoteData, limit, cursor)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingAttachment
      summary: Create Attachments
      description: Create Attachments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_90
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "features_planning.pdf",
                  fileUrl: "https://example.com/features_planning.pdf",
                  uploader: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  commentId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: createTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.create(x_connection_token="<value>", unified_ticketing_attachment_input={
                "file_name": "features_planning.pdf",
                "file_url": "https://example.com/features_planning.pdf",
                "uploader": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "comment_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingAttachmentInput := components.UnifiedTicketingAttachmentInput{
                    FileName: gosdk.String("features_planning.pdf"),
                    FileURL: gosdk.String("https://example.com/features_planning.pdf"),
                    Uploader: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CommentID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Create(ctx, xConnectionToken, unifiedTicketingAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.create(x_connection_token=\"<value>\", unified_ticketing_attachment_input=::OpenApiSDK::Shared::UnifiedTicketingAttachmentInput.new(\n    file_name: \"features_planning.pdf\",\n    file_url: \"https://example.com/features_planning.pdf\",\n    uploader: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    comment_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    field_mappings: {\n      \"online\": \"<value>\",\n    },\n  ), remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
  /ticketing/attachments/{id}:
    get:
      operationId: retrieveTicketingAttachment
      summary: Retrieve Attachments
      description: Retrieve Attachments from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_90
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
        - lang: python
          label: retrieveTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )
                var xConnectionToken string = "<value>"

                var id string = "801f9ede-c698-4e66-a7fc-48d19eebaa4f"

                var remoteData *bool = gosdk.Bool(false)
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Retrieve(ctx, xConnectionToken, id, remoteData)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
info:
  title: Panora API
  description: A unified API to ship integrations
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://api.panora.dev
    description: Production server
  - url: https://api-sandbox.panora.dev
    description: Sandbox server
  - url: https://api-dev.panora.dev
    description: Development server
components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    LoginDto:
      type: object
      properties:
        id_user:
          type: string
        email:
          type: string
        password_hash:
          type: string
      required:
        - id_user
        - email
        - password_hash
    Connection:
      type: object
      properties:
        id_connection:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the connection
        status:
          type: string
          example: active
          description: Status of the connection
        provider_slug:
          type: string
          example: hubspot
          description: Slug for the provider
        vertical:
          type: string
          example: crm
          description: Vertical category of the connection
        account_url:
          type: string
          example: https://example.com/account
          description: URL of the account
        token_type:
          type: string
          example: oauth2
          enum:
            - oauth2
            - apikey
            - basic
          description: Strategy type
        access_token:
          type: string
          example: access_token_example
          description: Access token for the connection
        refresh_token:
          type: string
          example: refresh_token_example
          description: Refresh token for the connection
        expiration_timestamp:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Expiration timestamp of the access token
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Timestamp when the connection was created
        connection_token:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID Token for the connection
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: Project ID associated with the connection
        id_linked_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Linked user ID associated with the connection
      required:
        - id_connection
        - status
        - provider_slug
        - vertical
        - account_url
        - token_type
        - access_token
        - refresh_token
        - expiration_timestamp
        - created_at
        - connection_token
        - id_project
        - id_linked_user
    WebhookResponse:
      type: object
      properties:
        id_webhook_endpoint:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The unique UUID of the webhook.
        endpoint_description:
          type: string
          example: Webhook to receive connection events
          nullable: true
          description: The description of the webhook.
        url:
          type: string
          example: https://acme.com/webhook_receiver
          nullable: true
          description: The endpoint url of the webhook.
        secret:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The secret of the webhook.
        active:
          type: boolean
          example: true
          nullable: true
          description: The status of the webhook.
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the webhook.
          nullable: true
        scope:
          example:
            - connection.created
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
        id_project:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The project id tied to the webhook.
        last_update:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The last update date of the webhook.
      required:
        - id_webhook_endpoint
        - endpoint_description
        - url
        - secret
        - active
        - created_at
        - scope
        - id_project
        - last_update
    WebhookDto:
      type: object
      properties:
        url:
          type: string
          example: https://acme.com/webhook_receiver
          nullable: true
          description: The endpoint url of the webhook.
        description:
          type: string
          example: Webhook to receive connection events
          nullable: true
          description: The description of the webhook.
        scope:
          example:
            - connection.created
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
      required:
        - url
        - description
        - scope
    SignatureVerificationDto:
      type: object
      properties:
        payload:
          type: object
          additionalProperties: true
          nullable: true
          description: The payload event of the webhook.
        signature:
          type: string
          nullable: true
          description: The signature of the webhook.
        secret:
          type: string
          nullable: true
          description: The secret of the webhook.
      required:
        - payload
        - signature
        - secret
    PaginatedDto:
      type: object
      properties:
        prev_cursor:
          type: string
          nullable: true
        next_cursor:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: object
      required:
        - prev_cursor
        - next_cursor
        - data
    UnifiedTicketingCommentInput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          example: Assigned to Eric !
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          example: <p>Assigned to Eric !</p>
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          example: false
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          example: USER
          enum: &ref_120
            - USER
            - CONTACT
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          type: array
          items: &ref_121
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
          nullable: true
          example: &ref_122
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attachements UUIDs tied to the comment
      required:
        - body
    UnifiedTicketingTicketOutput:
      type: object
      properties:
        name:
          type: string
          example: Customer Service Inquiry
          nullable: true
          description: The name of the ticket
        status:
          type: string
          example: OPEN
          enum: &ref_91
            - OPEN
            - CLOSED
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          example: Help customer
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          example: BUG
          enum: &ref_92
            - BUG
            - SUBTASK
            - TASK
            - TO-DO
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: array
          items: &ref_93
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
          example: &ref_94
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          type: array
          items: &ref_95
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingTagOutput'
          example: &ref_96
            - my_tag
            - urgent_tag
          nullable: true
          description: The tags names of the ticket
        completed_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          example: HIGH
          enum: &ref_97
            - HIGH
            - MEDIUM
            - LOW
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          example: &ref_98
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          example: &ref_99
            content: Assigned the issue !
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          type: array
          items: &ref_100
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
          example: &ref_101
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attachements UUIDs tied to the ticket
          nullable: true
        field_mappings:
          type: object
          example: &ref_102
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the ticket
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the ticket in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the ticket in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - description
    UnifiedTicketingTicketInput:
      type: object
      properties:
        name:
          type: string
          example: Customer Service Inquiry
          nullable: true
          description: The name of the ticket
        status:
          type: string
          example: OPEN
          enum: *ref_91
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          example: Help customer
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          example: BUG
          enum: *ref_92
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: array
          items: *ref_93
          example: *ref_94
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          type: array
          items: *ref_95
          example: *ref_96
          nullable: true
          description: The tags names of the ticket
        completed_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          example: HIGH
          enum: *ref_97
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          example: *ref_98
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          example: *ref_99
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          type: array
          items: *ref_100
          example: *ref_101
          description: The attachements UUIDs tied to the ticket
          nullable: true
        field_mappings:
          type: object
          example: *ref_102
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
    UnifiedTicketingUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the user
          example: John Doe
        email_address:
          type: string
          nullable: true
          description: The email address of the user
          example: john.doe@example.com
        teams:
          nullable: true
          description: The teams whose the user is part of
          example:
            - team1
            - team2
          type: array
          items:
            type: string
        account_id:
          type: string
          nullable: true
          description: The account or organization the user is part of
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the user
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2023-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
    UnifiedTicketingAccountOutput:
      type: object
      properties:
        name:
          type: string
          example: My Personal Account
          nullable: true
          description: The name of the account
        domains:
          example:
            - acme.com
            - acme-test.com
          nullable: true
          description: The domains of the account
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the account between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the account in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the account in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the account
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the account
          nullable: true
      required:
        - name
    UnifiedTicketingContactOutput:
      type: object
      properties:
        name:
          type: string
          example: Joe
          nullable: true
          description: The name of the contact
        email_address:
          type: string
          example: joedoe@acme.org
          nullable: true
          description: The email address of the contact
        phone_number:
          type: string
          example: +33 6 50 11 11 10
          nullable: true
          description: The phone number of the contact
        details:
          type: string
          example: Contact Details
          nullable: true
          description: The details of the contact
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the contact in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
    ResyncStatusDto:
      type: object
      properties:
        timestamp:
          format: date-time
          type: string
          example: ''
          nullable: true
        vertical:
          type: string
          example: ticketing
          enum:
            - ticketing
            - ats
            - accounting
            - hris
            - crm
            - filestorage
            - ecommerce
            - marketingautomation
          nullable: true
        provider:
          type: string
          example: gitlab
          nullable: true
        status:
          type: string
          example: success
          enum:
            - success
            - fail
          nullable: true
      required:
        - timestamp
        - vertical
        - provider
        - status
    Email:
      type: object
      properties:
        email_address:
          type: string
          nullable: true
          description: The email address
        email_address_type:
          type: string
          enum:
            - PERSONAL
            - WORK
          nullable: true
          description: >-
            The email address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          enum:
            - COMPANY
            - CONTACT
          nullable: true
          description: The owner type of an email
      required:
        - email_address
        - email_address_type
    Address:
      type: object
      properties:
        street_1:
          type: string
          nullable: true
          example: 5th Avenue
          description: The street
        street_2:
          type: string
          nullable: true
          example: Street 2
          description: 'More information about the street '
        city:
          type: string
          nullable: true
          example: New York
          description: The city
        state:
          type: string
          example: New York
          nullable: true
          description: The state
        postal_code:
          type: string
          example: '10001'
          nullable: true
          description: The postal code
        country:
          type: string
          example: United States of America
          nullable: true
          description: The country
        address_type:
          type: string
          enum:
            - PERSONAL
            - WORK
          nullable: true
          example: PERSONAL
          description: The address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          nullable: true
          description: The owner type of the address
      required:
        - street_1
        - street_2
        - city
        - state
        - postal_code
        - country
        - address_type
        - owner_type
    Phone:
      type: object
      properties:
        phone_number:
          type: string
          nullable: true
          description: >-
            The phone number starting with a plus (+) followed by the country code (e.g +336676778890 for France)
        phone_type:
          type: string
          enum:
            - MOBILE
            - WORK
          nullable: true
          description: The phone type. Authorized values are either MOBILE or WORK
        owner_type:
          type: string
          nullable: true
          description: The owner type of a phone number
      required:
        - phone_number
        - phone_type
    UnifiedCrmCompanyOutput:
      type: object
      properties:
        name:
          type: string
          example: Acme
          description: The name of the company
          nullable: true
        industry:
          type: string
          example: ACCOUNTING
          enum: &ref_103
            - ACCOUNTING
            - AIRLINES_AVIATION
            - ALTERNATIVE_DISPUTE_RESOLUTION
            - ALTERNATIVE_MEDICINE
            - ANIMATION
            - APPAREL_FASHION
            - ARCHITECTURE_PLANNING
            - ARTS_AND_CRAFTS
            - AUTOMOTIVE
            - AVIATION_AEROSPACE
            - BANKING
            - BIOTECHNOLOGY
            - BROADCAST_MEDIA
            - BUILDING_MATERIALS
            - BUSINESS_SUPPLIES_AND_EQUIPMENT
            - CAPITAL_MARKETS
            - CHEMICALS
            - CIVIC_SOCIAL_ORGANIZATION
            - CIVIL_ENGINEERING
            - COMMERCIAL_REAL_ESTATE
            - COMPUTER_NETWORK_SECURITY
            - COMPUTER_GAMES
            - COMPUTER_HARDWARE
            - COMPUTER_NETWORKING
            - COMPUTER_SOFTWARE
            - INTERNET
            - CONSTRUCTION
            - CONSUMER_ELECTRONICS
            - CONSUMER_GOODS
            - CONSUMER_SERVICES
            - COSMETICS
            - DAIRY
            - DEFENSE_SPACE
            - DESIGN
            - EDUCATION_MANAGEMENT
            - E_LEARNING
            - ELECTRICAL_ELECTRONIC_MANUFACTURING
            - ENTERTAINMENT
            - ENVIRONMENTAL_SERVICES
            - EVENTS_SERVICES
            - EXECUTIVE_OFFICE
            - FACILITIES_SERVICES
            - FARMING
            - FINANCIAL_SERVICES
            - FINE_ART
            - FISHERY
            - FOOD_BEVERAGES
            - FOOD_PRODUCTION
            - FUND_RAISING
            - FURNITURE
            - GAMBLING_CASINOS
            - GLASS_CERAMICS_CONCRETE
            - GOVERNMENT_ADMINISTRATION
            - GOVERNMENT_RELATIONS
            - GRAPHIC_DESIGN
            - HEALTH_WELLNESS_AND_FITNESS
            - HIGHER_EDUCATION
            - HOSPITAL_HEALTH_CARE
            - HOSPITALITY
            - HUMAN_RESOURCES
            - IMPORT_AND_EXPORT
            - INDIVIDUAL_FAMILY_SERVICES
            - INDUSTRIAL_AUTOMATION
            - INFORMATION_SERVICES
            - INFORMATION_TECHNOLOGY_AND_SERVICES
            - INSURANCE
            - INTERNATIONAL_AFFAIRS
            - INTERNATIONAL_TRADE_AND_DEVELOPMENT
            - INVESTMENT_BANKING
            - INVESTMENT_MANAGEMENT
            - JUDICIARY
            - LAW_ENFORCEMENT
            - LAW_PRACTICE
            - LEGAL_SERVICES
            - LEGISLATIVE_OFFICE
            - LEISURE_TRAVEL_TOURISM
            - LIBRARIES
            - LOGISTICS_AND_SUPPLY_CHAIN
            - LUXURY_GOODS_JEWELRY
            - MACHINERY
            - MANAGEMENT_CONSULTING
            - MARITIME
            - MARKET_RESEARCH
            - MARKETING_AND_ADVERTISING
            - MECHANICAL_OR_INDUSTRIAL_ENGINEERING
            - MEDIA_PRODUCTION
            - MEDICAL_DEVICES
            - MEDICAL_PRACTICE
            - MENTAL_HEALTH_CARE
            - MILITARY
            - MINING_METALS
            - MOTION_PICTURES_AND_FILM
            - MUSEUMS_AND_INSTITUTIONS
            - MUSIC
            - NANOTECHNOLOGY
            - NEWSPAPERS
            - NON_PROFIT_ORGANIZATION_MANAGEMENT
            - OIL_ENERGY
            - ONLINE_MEDIA
            - OUTSOURCING_OFFSHORING
            - PACKAGE_FREIGHT_DELIVERY
            - PACKAGING_AND_CONTAINERS
            - PAPER_FOREST_PRODUCTS
            - PERFORMING_ARTS
            - PHARMACEUTICALS
            - PHILANTHROPY
            - PHOTOGRAPHY
            - PLASTICS
            - POLITICAL_ORGANIZATION
            - PRIMARY_SECONDARY_EDUCATION
            - PRINTING
            - PROFESSIONAL_TRAINING_COACHING
            - PROGRAM_DEVELOPMENT
            - PUBLIC_POLICY
            - PUBLIC_RELATIONS_AND_COMMUNICATIONS
            - PUBLIC_SAFETY
            - PUBLISHING
            - RAILROAD_MANUFACTURE
            - RANCHING
            - REAL_ESTATE
            - RECREATIONAL_FACILITIES_AND_SERVICES
            - RELIGIOUS_INSTITUTIONS
            - RENEWABLES_ENVIRONMENT
            - RESEARCH
            - RESTAURANTS
            - RETAIL
            - SECURITY_AND_INVESTIGATIONS
            - SEMICONDUCTORS
            - SHIPBUILDING
            - SPORTING_GOODS
            - SPORTS
            - STAFFING_AND_RECRUITING
            - SUPERMARKETS
            - TELECOMMUNICATIONS
            - TEXTILES
            - THINK_TANKS
            - TOBACCO
            - TRANSLATION_AND_LOCALIZATION
            - TRANSPORTATION_TRUCKING_RAILROAD
            - UTILITIES
            - VENTURE_CAPITAL_PRIVATE_EQUITY
            - VETERINARY
            - WAREHOUSING
            - WHOLESALE
            - WINE_AND_SPIRITS
            - WIRELESS
            - WRITING_AND_EDITING
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          example: 10
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          example: &ref_104
            - email_address: acme@gmail.com
              email_address_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          example: &ref_105
            - street_1: 5th Avenue
              city: New York
              state: NY
              country: USA
              address_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          example: &ref_106
            - phone_number: '+33660606067'
              phone_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          example: &ref_107
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the company
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the company in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the company in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
    UnifiedCrmCompanyInput:
      type: object
      properties:
        name:
          type: string
          example: Acme
          description: The name of the company
          nullable: true
        industry:
          type: string
          example: ACCOUNTING
          enum: *ref_103
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          example: 10
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          example: *ref_104
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          example: *ref_105
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          example: *ref_106
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          example: *ref_107
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
    UnifiedCrmContactOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
          example: John
          nullable: true
        last_name:
          type: string
          description: The last name of the contact
          example: Doe
          nullable: true
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          example: &ref_108
            - email: john.doe@example.com
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          example: &ref_109
            - phone: '1234567890'
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          example: &ref_110
            - street: 123 Main St
              city: Anytown
              state: CA
              zip: '12345'
              country: USA
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: &ref_111
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          description: The UUID of the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the contact in the context of the Crm 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - first_name
        - last_name
    UnifiedCrmContactInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
          example: John
          nullable: true
        last_name:
          type: string
          description: The last name of the contact
          example: Doe
          nullable: true
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          example: *ref_108
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          example: *ref_109
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          example: *ref_110
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: *ref_111
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - first_name
        - last_name
    UnifiedCrmDealOutput:
      type: object
      properties:
        name:
          type: string
          example: Huge Contract with Acme
          description: The name of the deal
          nullable: true
        description:
          type: string
          example: Contract with Sales Operations Team
          description: The description of the deal
          nullable: true
        amount:
          type: number
          example: 1000
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          example: &ref_112
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the deal in the context of the Crm 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the deal in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - name
        - description
        - amount
    UnifiedCrmDealInput:
      type: object
      properties:
        name:
          type: string
          example: Huge Contract with Acme
          description: The name of the deal
          nullable: true
        description:
          type: string
          example: Contract with Sales Operations Team
          description: The description of the deal
          nullable: true
        amount:
          type: number
          example: 1000
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          example: *ref_112
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
        - amount
    UnifiedCrmEngagementOutput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          example: Meeting call with CTO
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          example: INBOUND
          enum: &ref_113
            - INBOUND
            - OUTBOUND
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          example: Technical features planning
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T22:00:00Z'
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          example: MEETING
          enum: &ref_114
            - EMAIL
            - CALL
            - MEETING
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          example: &ref_115
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          example: &ref_116
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the engagement
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the engagement in the context of the Crm 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The remote data of the engagement in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - type
    UnifiedCrmEngagementInput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          example: Meeting call with CTO
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          example: INBOUND
          enum: *ref_113
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          example: Technical features planning
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T22:00:00Z'
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          example: MEETING
          enum: *ref_114
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          example: *ref_115
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          example: *ref_116
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - type
    UnifiedCrmNoteOutput:
      type: object
      properties:
        content:
          type: string
          example: My notes taken during the meeting
          description: The content of the note
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the note
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact tied to the note
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          example: &ref_117
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the note
        remote_id:
          type: string
          example: id_1
          description: The ID of the note in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the note in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - content
    UnifiedCrmNoteInput:
      type: object
      properties:
        content:
          type: string
          example: My notes taken during the meeting
          description: The content of the note
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the note
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact tied to the note
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          example: *ref_117
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - content
    UnifiedCrmStageOutput:
      type: object
      properties:
        stage_name:
          type: string
          example: Qualified
          description: The name of the stage
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the stage between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The ID of the stage in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the stage in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - stage_name
    UnifiedCrmTaskOutput:
      type: object
      properties:
        subject:
          type: string
          example: Answer customers
          description: The subject of the task
          nullable: true
        content:
          type: string
          example: Prepare email campaign
          description: The content of the task
          nullable: true
        status:
          type: string
          example: PENDING
          enum: &ref_118
            - PENDING
            - COMPLETED
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The due date of the task
          nullable: true
        finished_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          example: &ref_119
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the task
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The ID of the task in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          description: The remote data of the task in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - subject
        - content
        - status
    UnifiedCrmTaskInput:
      type: object
      properties:
        subject:
          type: string
          example: Answer customers
          description: The subject of the task
          nullable: true
        content:
          type: string
          example: Prepare email campaign
          description: The content of the task
          nullable: true
        status:
          type: string
          example: PENDING
          enum: *ref_118
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The due date of the task
          nullable: true
        finished_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          example: *ref_119
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - subject
        - content
        - status
    UnifiedCrmUserOutput:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
          description: The name of the user
          nullable: true
        email:
          type: string
          example: jane.doe@example.com
          description: The email of the user
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the user in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the user in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
        - email
    UnifiedTicketingCollectionOutput:
      type: object
      properties:
        name:
          type: string
          example: My Personal Collection
          nullable: true
          description: The name of the collection
        description:
          type: string
          example: Collect issues
          nullable: true
          description: The description of the collection
        collection_type:
          type: string
          example: PROJECT
          enum:
            - PROJECT
            - LIST
          nullable: true
          description: "The type of the collection. Authorized values are either PROJECT or LIST "
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the collection
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the collection in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the collection in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
    UnifiedTicketingCommentOutput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          example: Assigned to Eric !
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          example: <p>Assigned to Eric !</p>
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          example: false
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          example: USER
          enum: *ref_120
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          type: array
          items: *ref_121
          nullable: true
          example: *ref_122
          description: The attachements UUIDs tied to the comment
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the comment in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the comment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - body
    UnifiedTicketingTagOutput:
      type: object
      properties:
        name:
          type: string
          example: urgent_tag
          nullable: true
          description: The name of the tag
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the tag between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the tag
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the tag in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the tag in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the tag
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the tag
          nullable: true
      required:
        - name
    UnifiedTicketingTeamOutput:
      type: object
      properties:
        name:
          type: string
          example: My team
          nullable: true
          description: The name of the team
        description:
          type: string
          example: Internal members
          nullable: true
          description: The description of the team
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the team between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the team
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the team in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the team in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
    LinkedUserResponse:
      type: object
      properties:
        id_linked_user:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        linked_user_origin_id:
          type: string
          example: id_1
          nullable: true
        alias:
          type: string
          example: acme
          nullable: true
        id_project:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
      required:
        - id_linked_user
        - linked_user_origin_id
        - alias
        - id_project
    CreateLinkedUserDto:
      type: object
      properties:
        linked_user_origin_id:
          type: string
          description: The id of the user in the context of your own software
          example: id_1
        alias:
          type: string
          nullable: true
          description: Your company alias
          example: acme
      required:
        - linked_user_origin_id
        - alias
    CreateBatchLinkedUserDto:
      type: object
      properties:
        linked_user_origin_ids:
          nullable: true
          description: The ids of the users in the context of your own software
          example:
            - id_1
          type: array
          items:
            type: string
        alias:
          type: string
          nullable: true
          description: Your company alias
          example: acme
      required:
        - linked_user_origin_ids
        - alias
    ProjectResponse:
      type: object
      properties:
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the project
        name:
          type: string
          example: My Project
          description: Name of the project
        sync_mode:
          type: string
          example: automatic
          description: Synchronization mode of the project
        pull_frequency:
          type: number
          example: 3600
          description: Frequency of pulling data in seconds
        redirect_url:
          type: string
          example: https://example.com/redirect
          description: Redirect URL for the project
        id_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: User ID associated with the project
        id_connector_set:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Connector set ID associated with the project
      required:
        - id_project
        - name
        - sync_mode
        - pull_frequency
        - redirect_url
        - id_user
        - id_connector_set
    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
          example: Project Name
          description: The name of the project
        id_organization:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The organization ID
        id_user:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The user ID
      required:
        - name
        - id_user
    CustomFieldResponse:
      type: object
      properties:
        id_attribute:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Id
        status:
          type: string
          nullable: true
          example: ''
          description: Attribute Status
        ressource_owner_type:
          type: string
          example: ''
          nullable: true
          description: Attribute Ressource Owner Type
        slug:
          type: string
          nullable: true
          example: fav_dish
          description: Attribute Slug
        description:
          type: string
          nullable: true
          example: My favorite dish
          description: Attribute Description
        data_type:
          type: string
          nullable: true
          example: string
          enum:
            - string
            - number
          description: Attribute Data Type
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: Attribute Remote Id
        source:
          type: string
          nullable: true
          example: hubspot
          description: Attribute Source
        id_entity:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Entity Id
        id_project:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Project Id
        scope:
          type: string
          nullable: true
          example: ''
          description: Attribute Scope
        id_consumer:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Consumer Id
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: Attribute Created Date
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: Attribute Modified Date
      required:
        - id_attribute
        - status
        - ressource_owner_type
        - slug
        - description
        - data_type
        - remote_id
        - source
        - id_entity
        - id_project
        - scope
        - id_consumer
        - created_at
        - modified_at
    DefineTargetFieldDto:
      type: object
      properties:
        object_type_owner:
          type: string
          example: company
          enum:
            - company
            - contact
            - deal
            - lead
            - note
            - task
            - engagement
            - stage
            - user
          nullable: true
        name:
          type: string
          nullable: true
          example: fav_dish
          description: The name of the target field
        description:
          type: string
          nullable: true
          example: My favorite dish
          description: The description of the target field
        data_type:
          type: string
          nullable: true
          example: string
          enum:
            - string
            - number
          description: The data type of the target field
      required:
        - object_type_owner
        - name
        - description
        - data_type
    CustomFieldCreateDto:
      type: object
      properties:
        object_type_owner:
          type: string
          example: company
          enum:
            - company
            - contact
            - deal
            - lead
            - note
            - task
            - engagement
            - stage
            - user
          nullable: true
        name:
          type: string
          nullable: true
          example: my_favorite_dish
          description: The name of the custom field
        description:
          type: string
          nullable: true
          example: Favorite Dish
          description: The description of the custom field
        data_type:
          type: string
          example: string
          nullable: true
          enum:
            - string
            - number
          description: The data type of the custom field
        source_custom_field_id:
          type: string
          nullable: true
          example: id_1
          description: The source custom field ID
        source_provider:
          type: string
          nullable: true
          example: hubspot
          description: The name of the source software/provider
        linked_user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The linked user ID
      required:
        - object_type_owner
        - name
        - description
        - data_type
        - source_custom_field_id
        - source_provider
        - linked_user_id
    MapFieldToProviderDto:
      type: object
      properties:
        attributeId:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attribute ID
        source_custom_field_id:
          type: string
          nullable: true
          example: id_1
          description: The source custom field ID
        source_provider:
          type: string
          nullable: true
          example: hubspot
          description: The source provider
        linked_user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The linked user ID
      required:
        - attributeId
        - source_custom_field_id
        - source_provider
        - linked_user_id
    EventResponse:
      type: object
      properties:
        id_event:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the event
        id_connection:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: Connection ID associated with the event
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Project ID associated with the event
        type:
          type: string
          example: connection.created
          enum:
            - crm.contact.created
            - crm.contact.pulled
            - crm.company.created
            - crm.company.pulled
            - crm.deal.created
            - crm.deal.pulled
            - crm.engagement.created
            - crm.engagement.pulled
            - crm.note.created
            - crm.note.pulled
            - crm.stage.pulled
            - crm.task.pulled
            - crm.task.created
            - crm.user.pulled
            - ticketing.ticket.created
            - ticketing.ticket.pulled
            - ticketing.comment.created
            - ticketing.comment.pulled
            - ticketing.attachment.created
            - ticketing.attachment.pulled
            - ticketing.collection.pulled
            - ticketing.account.pulled
            - ticketing.contact.pulled
            - ticketing.tag.pulled
            - ticketing.team.pulled
            - ticketing.user.pulled
            - ats.activity.created
            - ats.activity.pulled
            - ats.application.created
            - ats.application.pulled
            - ats.attachment.created
            - ats.attachment.pulled
            - ats.candidate.created
            - ats.candidate.pulled
            - ats.department.pulled
            - ats.eecos.pulled
            - ats.interview.created
            - ats.interview.pulled
            - ats.job.pulled
            - ats.jobinterviewstage.pulled
            - ats.offer.created
            - ats.office.pulled
            - ats.rejectreason.pulled
            - ats.scorecard.pulled
            - ats.tag.pulled
            - ats.user.pulled
            - filestorage.file.created
            - filestorage.file.pulled
            - filestorage.folder.created
            - filestorage.folder.pulled
            - filestorage.group.pulled
            - filestorage.user.pulled
            - filestorage.drive.pulled
            - filestorage.permission.pulled
            - filestorage.sharedlink.pulled
            - connection.created
          description: Scope of the event
        status:
          type: string
          example: success
          enum:
            - success
            - fail
          description: Status of the event
        direction:
          type: string
          example: '0'
          description: Direction of the event
        method:
          type: string
          example: POST
          enum:
            - GET
            - POST
            - PUT
            - DELETE
          description: HTTP method used for the event
        url:
          type: string
          example: /crm/companies
          description: URL associated with the event
        provider:
          type: string
          example: hubspot
          description: Provider associated with the event
        timestamp:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Timestamp of the event
        id_linked_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174003
          description: Linked user ID associated with the event
      required:
        - id_event
        - id_connection
        - id_project
        - type
        - status
        - direction
        - method
        - url
        - provider
        - timestamp
        - id_linked_user
    PassThroughRequestDto:
      type: object
      properties:
        method:
          type: string
          enum:
            - GET
            - POST
        path:
          type: string
          nullable: true
        data:
          type: object
        request_format:
          oneOf:
            - type: object
              additionalProperties: true
            - type: array
              items:
                type: object
                additionalProperties: true
          nullable: true
        overrideBaseUrl:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - method
        - path
        - data
        - request_format
        - overrideBaseUrl
    UnifiedHrisBankinfoOutput:
      type: object
      properties: {}
    UnifiedHrisBenefitOutput:
      type: object
      properties: {}
    UnifiedHrisCompanyOutput:
      type: object
      properties: {}
    UnifiedHrisDependentOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeepayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeOutput:
      type: object
      properties: {}
    UnifiedHrisEmployeeInput:
      type: object
      properties: {}
    UnifiedHrisEmployerbenefitOutput:
      type: object
      properties: {}
    UnifiedHrisEmploymentOutput:
      type: object
      properties: {}
    UnifiedHrisGroupOutput:
      type: object
      properties: {}
    UnifiedHrisLocationOutput:
      type: object
      properties: {}
    UnifiedHrisPaygroupOutput:
      type: object
      properties: {}
    UnifiedHrisPayrollrunOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffOutput:
      type: object
      properties: {}
    UnifiedHrisTimeoffInput:
      type: object
      properties: {}
    UnifiedHrisTimeoffbalanceOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionInput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationInput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignInput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactInput:
      type: object
      properties: {}
    UnifiedMarketingautomationEmailOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationEventOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListInput:
      type: object
      properties: {}
    UnifiedMarketingautomationMessageOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateInput:
      type: object
      properties: {}
    UnifiedMarketingautomationUserOutput:
      type: object
      properties: {}
    UnifiedAtsActivityOutput:
      type: object
      properties:
        activity_type:
          type: string
          enum: &ref_123
            - NOTE
            - EMAIL
            - OTHER
          example: NOTE
          nullable: true
          description: The type of activity
        subject:
          type: string
          example: Email subject
          nullable: true
          description: The subject of the activity
        body:
          type: string
          example: Dear Diana, I love you
          nullable: true
          description: The body of the activity
        visibility:
          type: string
          enum: &ref_124
            - ADMIN_ONLY
            - PUBLIC
            - PRIVATE
          example: PUBLIC
          nullable: true
          description: The visibility of the activity
        candidate_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        remote_created_at:
          type: string
          format: date-time
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote creation date of the activity
        field_mappings:
          type: object
          example: &ref_125
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the activity
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the activity in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the activity in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsActivityInput:
      type: object
      properties:
        activity_type:
          type: string
          enum: *ref_123
          example: NOTE
          nullable: true
          description: The type of activity
        subject:
          type: string
          example: Email subject
          nullable: true
          description: The subject of the activity
        body:
          type: string
          example: Dear Diana, I love you
          nullable: true
          description: The body of the activity
        visibility:
          type: string
          enum: *ref_124
          example: PUBLIC
          nullable: true
          description: The visibility of the activity
        candidate_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        remote_created_at:
          type: string
          format: date-time
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote creation date of the activity
        field_mappings:
          type: object
          example: *ref_125
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsApplicationOutput:
      type: object
      properties:
        applied_at:
          format: date-time
          type: string
          nullable: true
          description: The application date
          example: '2024-10-01T12:00:00Z'
        rejected_at:
          format: date-time
          type: string
          nullable: true
          description: The rejection date
          example: '2024-10-01T12:00:00Z'
        offers:
          nullable: true
          description: The offers UUIDs for the application
          example: &ref_126
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
            - 12345678-1234-1234-1234-123456789012
          type: array
          items:
            type: string
        source:
          type: string
          nullable: true
          description: The source of the application
          example: Source Name
        credited_to:
          type: string
          nullable: true
          description: The UUID of the person credited for the application
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        current_stage:
          type: string
          nullable: true
          description: The UUID of the current stage of the application
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        reject_reason:
          type: string
          nullable: true
          description: The rejection reason for the application
          example: Candidate not experienced enough
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        job_id:
          type: string
          description: The UUID of the job
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: &ref_127
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the application
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the application in the context of the 3rd Party
          example: id_1
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the application in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
        remote_created_at:
          format: date-time
          type: string
          nullable: true
          description: The remote created date of the object
        remote_modified_at:
          format: date-time
          type: string
          nullable: true
          description: The remote modified date of the object
    UnifiedAtsApplicationInput:
      type: object
      properties:
        applied_at:
          format: date-time
          type: string
          nullable: true
          description: The application date
          example: '2024-10-01T12:00:00Z'
        rejected_at:
          format: date-time
          type: string
          nullable: true
          description: The rejection date
          example: '2024-10-01T12:00:00Z'
        offers:
          nullable: true
          description: The offers UUIDs for the application
          example: *ref_126
          type: array
          items:
            type: string
        source:
          type: string
          nullable: true
          description: The source of the application
          example: Source Name
        credited_to:
          type: string
          nullable: true
          description: The UUID of the person credited for the application
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        current_stage:
          type: string
          nullable: true
          description: The UUID of the current stage of the application
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        reject_reason:
          type: string
          nullable: true
          description: The rejection reason for the application
          example: Candidate not experienced enough
        candidate_id:
          type: string
          nullable: true
          description: The UUID of the candidate
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        job_id:
          type: string
          description: The UUID of the job
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: *ref_127
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsAttachmentOutput:
      type: object
      properties:
        file_url:
          type: string
          example: https://example.com/file.pdf
          nullable: true
          description: The URL of the file
        file_name:
          type: string
          example: file.pdf
          nullable: true
          description: The name of the file
        attachment_type:
          type: string
          example: RESUME
          enum: &ref_128
            - RESUME
            - COVER_LETTER
            - OFFER_LETTER
            - OTHER
          nullable: true
          description: The type of the file
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the attachment
        remote_modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          example: &ref_129
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the attachment
        remote_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The remote ID of the attachment
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsAttachmentInput:
      type: object
      properties:
        file_url:
          type: string
          example: https://example.com/file.pdf
          nullable: true
          description: The URL of the file
        file_name:
          type: string
          example: file.pdf
          nullable: true
          description: The name of the file
        attachment_type:
          type: string
          example: RESUME
          enum: *ref_128
          nullable: true
          description: The type of the file
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the attachment
        remote_modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote modification date of the attachment
        candidate_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          example: *ref_129
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    Url:
      type: object
      properties:
        url:
          type: string
          nullable: true
          description: The url.
        url_type:
          type: string
          nullable: true
          description: The url type. It takes [WEBSITE | BLOG | LINKEDIN | GITHUB | OTHER]
      required:
        - url
        - url_type
    UnifiedAtsCandidateOutput:
      type: object
      properties:
        first_name:
          type: string
          example: Joe
          nullable: true
          description: The first name of the candidate
        last_name:
          type: string
          example: Doe
          nullable: true
          description: The last name of the candidate
        company:
          type: string
          example: Acme
          nullable: true
          description: The company of the candidate
        title:
          type: string
          example: Analyst
          nullable: true
          description: The title of the candidate
        locations:
          type: string
          example: New York
          nullable: true
          description: The locations of the candidate
        is_private:
          type: boolean
          example: false
          nullable: true
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          example: true
          nullable: true
          description: Whether the candidate is reachable by email
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the candidate
        remote_modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote modification date of the candidate
        last_interaction_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The last interaction date with the candidate
        attachments:
          type: array
          items: &ref_130
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedAtsAttachmentOutput'
          example: &ref_131
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The attachments UUIDs of the candidate
        applications:
          type: array
          items: &ref_132
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedAtsApplicationOutput'
          example: &ref_133
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The applications UUIDs of the candidate
        tags:
          type: array
          items: &ref_134
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedAtsTagOutput'
          example: &ref_135
            - tag_1
            - tag_2
          nullable: true
          description: The tags of the candidate
        urls:
          example: &ref_136
            - url: mywebsite.com
              url_type: WEBSITE
          nullable: true
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          example: &ref_137
            - phone_number: '+33660688899'
              phone_type: WORK
          nullable: true
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          example: &ref_138
            - email_address: joedoe@gmail.com
              email_address_type: WORK
          nullable: true
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          example: &ref_139
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the candidate in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the candidate in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsCandidateInput:
      type: object
      properties:
        first_name:
          type: string
          example: Joe
          nullable: true
          description: The first name of the candidate
        last_name:
          type: string
          example: Doe
          nullable: true
          description: The last name of the candidate
        company:
          type: string
          example: Acme
          nullable: true
          description: The company of the candidate
        title:
          type: string
          example: Analyst
          nullable: true
          description: The title of the candidate
        locations:
          type: string
          example: New York
          nullable: true
          description: The locations of the candidate
        is_private:
          type: boolean
          example: false
          nullable: true
          description: Whether the candidate is private
        email_reachable:
          type: boolean
          example: true
          nullable: true
          description: Whether the candidate is reachable by email
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the candidate
        remote_modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote modification date of the candidate
        last_interaction_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The last interaction date with the candidate
        attachments:
          type: array
          items: *ref_130
          example: *ref_131
          nullable: true
          description: The attachments UUIDs of the candidate
        applications:
          type: array
          items: *ref_132
          example: *ref_133
          nullable: true
          description: The applications UUIDs of the candidate
        tags:
          type: array
          items: *ref_134
          example: *ref_135
          nullable: true
          description: The tags of the candidate
        urls:
          example: *ref_136
          nullable: true
          description: >-
            The urls of the candidate, possible values for Url type are WEBSITE, BLOG, LINKEDIN, GITHUB, or OTHER
          type: array
          items:
            $ref: '#/components/schemas/Url'
        phone_numbers:
          example: *ref_137
          nullable: true
          description: The phone numbers of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        email_addresses:
          example: *ref_138
          nullable: true
          description: The email addresses of the candidate
          type: array
          items:
            $ref: '#/components/schemas/Email'
        field_mappings:
          type: object
          example: *ref_139
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsDepartmentOutput:
      type: object
      properties:
        name:
          type: string
          example: Sales
          nullable: true
          description: The name of the department
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the department
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the department in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the department in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2023-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsInterviewOutput:
      type: object
      properties:
        status:
          type: string
          enum: &ref_140
            - SCHEDULED
            - AWAITING_FEEDBACK
            - COMPLETED
          example: SCHEDULED
          nullable: true
          description: The status of the interview
        application_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the job interview stage
        organized_by:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the organizer
        interviewers:
          example: &ref_141
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          example: San Francisco
          nullable: true
          description: The location of the interview
        start_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The start date and time of the interview
        end_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The end date and time of the interview
        remote_created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote creation date of the interview
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote modification date of the interview
        field_mappings:
          type: object
          example: &ref_142
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the interview
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the interview in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the interview in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsInterviewInput:
      type: object
      properties:
        status:
          type: string
          enum: *ref_140
          example: SCHEDULED
          nullable: true
          description: The status of the interview
        application_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the application
        job_interview_stage_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the job interview stage
        organized_by:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the organizer
        interviewers:
          example: *ref_141
          nullable: true
          description: The UUIDs of the interviewers
          type: array
          items:
            type: string
        location:
          type: string
          example: San Francisco
          nullable: true
          description: The location of the interview
        start_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The start date and time of the interview
        end_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The end date and time of the interview
        remote_created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote creation date of the interview
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The remote modification date of the interview
        field_mappings:
          type: object
          example: *ref_142
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAtsJobinterviewstageOutput:
      type: object
      properties:
        name:
          type: string
          example: Second Call
          nullable: true
          description: The name of the job interview stage
        stage_order:
          type: number
          example: 1
          nullable: true
          description: The order of the stage
        job_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the job
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the job interview stage
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: >-
            The remote ID of the job interview stage in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: >-
            The remote data of the job interview stage in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsJobOutput:
      type: object
      properties:
        name:
          type: string
          example: Financial Analyst
          nullable: true
          description: The name of the job
        description:
          type: string
          example: Extract financial data and write detailed investment thesis
          nullable: true
          description: The description of the job
        code:
          type: string
          example: JOB123
          nullable: true
          description: The code of the job
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
            - DRAFT
            - ARCHIVED
            - PENDING
          example: OPEN
          nullable: true
          description: The status of the job
        type:
          type: string
          example: POSTING
          enum:
            - POSTING
            - REQUISITION
            - PROFILE
          nullable: true
          description: The type of the job
        confidential:
          type: boolean
          example: true
          nullable: true
          description: Whether the job is confidential
        departments:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The departments UUIDs associated with the job
          type: array
          items:
            type: string
        offices:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The offices UUIDs associated with the job
          type: array
          items:
            type: string
        managers:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The managers UUIDs associated with the job
          type: array
          items:
            type: string
        recruiters:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The recruiters UUIDs associated with the job
          type: array
          items:
            type: string
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the job
        remote_updated_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote modification date of the job
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the job
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the job in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the job in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2023-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsOfferOutput:
      type: object
      properties:
        created_by:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the creator
          nullable: true
        remote_created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The remote creation date of the offer
          nullable: true
        closed_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The closing date of the offer
          nullable: true
        sent_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The sending date of the offer
          nullable: true
        start_date:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The start date of the offer
          nullable: true
        status:
          type: string
          example: DRAFT
          enum:
            - DRAFT
            - APPROVAL_SENT
            - APPROVED
            - SENT
            - SENT_MANUALLY
            - OPENED
            - DENIED
            - SIGNED
            - DEPRECATED
          description: The status of the offer
          nullable: true
        application_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the application
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the offer
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the offer in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the offer in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
    UnifiedAtsOfficeOutput:
      type: object
      properties:
        name:
          type: string
          example: Condo Office 5th
          nullable: true
          description: The name of the office
        location:
          type: string
          example: New York
          nullable: true
          description: The location of the office
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the office
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the office in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the office in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsRejectreasonOutput:
      type: object
      properties:
        name:
          type: string
          example: Candidate inexperienced
          nullable: true
          description: The name of the reject reason
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          description: The UUID of the reject reason
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        remote_id:
          type: string
          nullable: true
          description: The remote ID of the reject reason in the context of the 3rd Party
          example: id_1
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the reject reason in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsScorecardOutput:
      type: object
      properties:
        overall_recommendation:
          type: string
          enum:
            - DEFINITELY_NO
            - 'NO'
            - 'YES'
            - STRONG_YES
            - NO_DECISION
          example: 'YES'
          nullable: true
          description: The overall recommendation
        application_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the application
        interview_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the interview
        remote_created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The remote creation date of the scorecard
        submitted_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The submission date of the scorecard
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the scorecard
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the scorecard in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the scorecard in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAtsTagOutput:
      type: object
      properties:
        name:
          type: string
          example: Important
          nullable: true
          description: The name of the tag
        id_ats_candidate:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the tag
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the tag in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the tag in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The creation date of the tag
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modification date of the tag
    UnifiedAtsUserOutput:
      type: object
      properties:
        first_name:
          type: string
          example: John
          description: The first name of the user
          nullable: true
        last_name:
          type: string
          example: Doe
          description: The last name of the user
          nullable: true
        email:
          type: string
          example: john.doe@example.com
          description: The email of the user
          nullable: true
        disabled:
          type: boolean
          example: false
          description: Whether the user is disabled
          nullable: true
        access_role:
          type: string
          example: ADMIN
          enum:
            - SUPER_ADMIN
            - ADMIN
            - TEAM_MEMBER
            - LIMITED_TEAM_MEMBER
            - INTERVIEWER
          description: The access role of the user
          nullable: true
        remote_created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The remote creation date of the user
          nullable: true
        remote_modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The remote modification date of the user
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the user in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the user in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
    UnifiedAtsEeocsOutput:
      type: object
      properties:
        candidate_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the candidate
        submitted_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          format: date-time
          nullable: true
          description: The submission date of the EEOC
        race:
          type: string
          enum:
            - AMERICAN_INDIAN_OR_ALASKAN_NATIVE
            - ASIAN
            - BLACK_OR_AFRICAN_AMERICAN
            - HISPANIC_OR_LATINO
            - WHITE
            - NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER
            - TWO_OR_MORE_RACES
            - DECLINE_TO_SELF_IDENTIFY
          example: AMERICAN_INDIAN_OR_ALASKAN_NATIVE
          nullable: true
          description: The race of the candidate
        gender:
          type: string
          example: MALE
          enum:
            - MALE
            - FEMALE
            - NON_BINARY
            - OTHER
            - DECLINE_TO_SELF_IDENTIFY
          nullable: true
          description: The gender of the candidate
        veteran_status:
          type: string
          example: I_AM_NOT_A_PROTECTED_VETERAN
          enum:
            - I_AM_NOT_A_PROTECTED_VETERAN
            - >-
              I_IDENTIFY_AS_ONE_OR_MORE_OF_THE_CLASSIFICATIONS_OF_A_PROTECTED_VETERAN
            - I_DONT_WISH_TO_ANSWER
          nullable: true
          description: The veteran status of the candidate
        disability_status:
          type: string
          enum:
            - YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
            - NO_I_DONT_HAVE_A_DISABILITY
            - I_DONT_WISH_TO_ANSWER
          example: YES_I_HAVE_A_DISABILITY_OR_PREVIOUSLY_HAD_A_DISABILITY
          nullable: true
          description: The disability status of the candidate
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the EEOC
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the EEOC in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the EEOC in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedAccountingAccountOutput:
      type: object
      properties: {}
    UnifiedAccountingAccountInput:
      type: object
      properties: {}
    UnifiedAccountingAddressOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentOutput:
      type: object
      properties: {}
    UnifiedAccountingAttachmentInput:
      type: object
      properties: {}
    UnifiedAccountingBalancesheetOutput:
      type: object
      properties: {}
    UnifiedAccountingCashflowstatementOutput:
      type: object
      properties: {}
    UnifiedAccountingCompanyinfoOutput:
      type: object
      properties: {}
    UnifiedAccountingContactOutput:
      type: object
      properties: {}
    UnifiedAccountingContactInput:
      type: object
      properties: {}
    UnifiedAccountingCreditnoteOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseOutput:
      type: object
      properties: {}
    UnifiedAccountingExpenseInput:
      type: object
      properties: {}
    UnifiedAccountingIncomestatementOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceOutput:
      type: object
      properties: {}
    UnifiedAccountingInvoiceInput:
      type: object
      properties: {}
    UnifiedAccountingItemOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryOutput:
      type: object
      properties: {}
    UnifiedAccountingJournalentryInput:
      type: object
      properties: {}
    UnifiedAccountingPaymentOutput:
      type: object
      properties: {}
    UnifiedAccountingPaymentInput:
      type: object
      properties: {}
    UnifiedAccountingPhonenumberOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderOutput:
      type: object
      properties: {}
    UnifiedAccountingPurchaseorderInput:
      type: object
      properties: {}
    UnifiedAccountingTaxrateOutput:
      type: object
      properties: {}
    UnifiedAccountingTrackingcategoryOutput:
      type: object
      properties: {}
    UnifiedAccountingTransactionOutput:
      type: object
      properties: {}
    UnifiedAccountingVendorcreditOutput:
      type: object
      properties: {}
    UnifiedFilestorageDriveOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: school
          description: The name of the drive
        remote_created_at:
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: When the third party s drive was created.
        drive_url:
          type: string
          nullable: true
          example: https://example.com/school
          description: The url of the drive
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the drive
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the drive in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the drive in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - name
        - remote_created_at
        - drive_url
    UnifiedFilestorageFileOutput:
      type: object
      properties:
        name:
          type: string
          example: my_paris_photo.png
          description: The name of the file
          nullable: true
        file_url:
          type: string
          example: https://example.com/my_paris_photo.png
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          example: application/pdf
          description: The mime type of the file
          nullable: true
        size:
          type: string
          example: '1024'
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          example: &ref_143
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the file
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the file in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the file in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    UnifiedFilestorageFileInput:
      type: object
      properties:
        name:
          type: string
          example: my_paris_photo.png
          description: The name of the file
          nullable: true
        file_url:
          type: string
          example: https://example.com/my_paris_photo.png
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          example: application/pdf
          description: The mime type of the file
          nullable: true
        size:
          type: string
          example: '1024'
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          example: *ref_143
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    UnifiedFilestorageFolderOutput:
      type: object
      properties:
        name:
          type: string
          example: school
          nullable: true
          description: The name of the folder
        size:
          type: string
          example: '2048'
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          example: https://example.com/school
          nullable: true
          description: The url of the folder
        description:
          type: string
          example: All things school related
          description: The description of the folder
        drive_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          example: &ref_144
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the folder
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the folder in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: The remote data of the folder in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the folder
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the folder
          nullable: true
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageFolderInput:
      type: object
      properties:
        name:
          type: string
          example: school
          nullable: true
          description: The name of the folder
        size:
          type: string
          example: '2048'
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          example: https://example.com/school
          nullable: true
          description: The url of the folder
        description:
          type: string
          example: All things school related
          description: The description of the folder
        drive_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          example: *ref_144
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageGroupOutput:
      type: object
      properties:
        name:
          type: string
          example: My group
          nullable: true
          description: The name of the group
        users:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Uuids of users of the group
        remote_was_deleted:
          type: boolean
          example: false
          nullable: true
          description: >-
            Indicates whether or not this object has been deleted in the third party platform.
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the group
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the group in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the group in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - users
        - remote_was_deleted
    UnifiedFilestorageUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: Joe Doe
          description: The name of the user
        email:
          type: string
          nullable: true
          example: joe.doe@gmail.com
          description: The email of the user
        is_me:
          type: boolean
          nullable: true
          example: true
          description: Whether the user is the one who linked this account.
        field_mappings:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - name
        - email
        - is_me
    Variant:
      type: object
      properties: {}
    UnifiedEcommerceProductOutput:
      type: object
      properties:
        product_url:
          type: string
          example: https://product_url/tee
          nullable: true
          description: The URL of the product
        product_type:
          type: string
          example: teeshirt
          nullable: true
          description: The type of the product
        product_status:
          type: string
          example: ACTIVE
          nullable: true
          enum: &ref_145
            - ARCHIVED
            - ACTIVE
            - DRAFT
          description: The status of the product. Either ACTIVE, DRAFT OR ARCHIVED.
        images_urls:
          example: &ref_146
            - https://myproduct/image
          nullable: true
          description: The URLs of the product images
          type: array
          items:
            type: string
        description:
          type: string
          example: best tee ever
          nullable: true
          description: The description of the product
        vendor:
          type: string
          example: vendor_extern
          nullable: true
          description: The vendor of the product
        variants:
          example: &ref_147
            - title: teeshirt
              price: 20
              sku: '3'
              options: null
              weight: 10
              inventory_quantity: 100
          description: The variants of the product
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        tags:
          example: &ref_148
            - tag_1
          nullable: true
          description: The tags associated with the product
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example: &ref_149
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the product
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the product in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceProductInput:
      type: object
      properties:
        product_url:
          type: string
          example: https://product_url/tee
          nullable: true
          description: The URL of the product
        product_type:
          type: string
          example: teeshirt
          nullable: true
          description: The type of the product
        product_status:
          type: string
          example: ACTIVE
          nullable: true
          enum: *ref_145
          description: The status of the product. Either ACTIVE, DRAFT OR ARCHIVED.
        images_urls:
          example: *ref_146
          nullable: true
          description: The URLs of the product images
          type: array
          items:
            type: string
        description:
          type: string
          example: best tee ever
          nullable: true
          description: The description of the product
        vendor:
          type: string
          example: vendor_extern
          nullable: true
          description: The vendor of the product
        variants:
          example: *ref_147
          description: The variants of the product
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        tags:
          example: *ref_148
          nullable: true
          description: The tags associated with the product
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example: *ref_149
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedEcommerceOrderOutput:
      type: object
      properties:
        order_status:
          type: string
          example: PAID
          nullable: true
          description: The status of the order
        order_number:
          type: string
          example: 19823838833
          nullable: true
          description: The number of the order
        payment_status:
          type: string
          example: SUCCESS
          nullable: true
          description: The payment status of the order
        currency:
          type: string
          nullable: true
          example: AUD
          enum: &ref_150
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BRL
            - BSD
            - BTN
            - BWP
            - BYN
            - BZD
            - CAD
            - CDF
            - CHF
            - CLP
            - CNY
            - COP
            - CRC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - FOK
            - GBP
            - GEL
            - GGP
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - IMP
            - INR
            - IQD
            - IRR
            - ISK
            - JEP
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KID
            - KMF
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRU
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLE
            - SLL
            - SOS
            - SRD
            - SSP
            - STN
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TVD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VES
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XDR
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWL
          description: >-
            The currency of the order. Authorized value must be of type CurrencyCode (ISO 4217)
        total_price:
          type: number
          example: 300
          nullable: true
          description: The total price of the order
        total_discount:
          type: number
          example: 10
          nullable: true
          description: The total discount on the order
        total_shipping:
          type: number
          example: 120
          nullable: true
          description: The total shipping cost of the order
        total_tax:
          type: number
          example: 120
          nullable: true
          description: The total tax on the order
        fulfillment_status:
          type: string
          nullable: true
          example: delivered
          description: The fulfillment status of the order
        customer_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer associated with the order
        items:
          type: object
          nullable: true
          example: &ref_151 {}
          description: The items in the order
        field_mappings:
          type: object
          example: &ref_152
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the order
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the order in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceOrderInput:
      type: object
      properties:
        order_status:
          type: string
          example: PAID
          nullable: true
          description: The status of the order
        order_number:
          type: string
          example: 19823838833
          nullable: true
          description: The number of the order
        payment_status:
          type: string
          example: SUCCESS
          nullable: true
          description: The payment status of the order
        currency:
          type: string
          nullable: true
          example: AUD
          enum: *ref_150
          description: >-
            The currency of the order. Authorized value must be of type CurrencyCode (ISO 4217)
        total_price:
          type: number
          example: 300
          nullable: true
          description: The total price of the order
        total_discount:
          type: number
          example: 10
          nullable: true
          description: The total discount on the order
        total_shipping:
          type: number
          example: 120
          nullable: true
          description: The total shipping cost of the order
        total_tax:
          type: number
          example: 120
          nullable: true
          description: The total tax on the order
        fulfillment_status:
          type: string
          nullable: true
          example: delivered
          description: The fulfillment status of the order
        customer_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer associated with the order
        items:
          type: object
          nullable: true
          example: *ref_151
          description: The items in the order
        field_mappings:
          type: object
          example: *ref_152
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedEcommerceCustomerOutput:
      type: object
      properties:
        email:
          type: string
          example: joedoe@gmail.com
          nullable: true
          description: The email of the customer
        first_name:
          type: string
          example: Joe
          nullable: true
          description: The first name of the customer
        last_name:
          type: string
          example: Doe
          nullable: true
          description: The last name of the customer
        phone_number:
          type: string
          example: '+336666666'
          nullable: true
          description: The phone number of the customer
        addresses:
          example:
            - address_type: PERSONAL
              street_1: 5th Avenue
              state: New York
              city: New York
              country: United States of America
          nullable: true
          description: The addresses of the customer
          type: array
          items:
            $ref: '#/components/schemas/Address'
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the customer in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceFulfillmentOutput:
      type: object
      properties:
        carrier:
          type: string
          nullable: true
          example: DHL
          description: The carrier of the fulfilment
        tracking_urls:
          nullable: true
          example:
            - https://tracing-url.sf.com
          description: The tracking URLs of the fulfilment
          type: array
          items:
            type: string
        tracking_numbers:
          nullable: true
          example:
            - track_1029_191919
          description: The tracking numbers of the fulfilment
          type: array
          items:
            type: string
        items:
          type: object
          nullable: true
          example: {}
          description: The items in the fulfilment
        order_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the order associated with the fulfilment
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the fulfilment
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the fulfilment in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedTicketingAttachmentOutput:
      type: object
      properties:
        file_name:
          type: string
          example: features_planning.pdf
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          example: https://example.com/features_planning.pdf
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          example: &ref_153
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the attachment
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the attachment in the context of the 3rd Party
        remote_data:
          type: object
          additionalProperties: true
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - file_name
        - file_url
        - uploader
    UnifiedTicketingAttachmentInput:
      type: object
      properties:
        file_name:
          type: string
          example: features_planning.pdf
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          example: https://example.com/features_planning.pdf
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          example: *ref_153
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - file_name
        - file_url
        - uploader
security:
  - api_key: []
x-speakeasy-name-override:
  - operationId: ^retrieve.*
    methodNameOverride: retrieve
  - operationId: ^list.*
    methodNameOverride: list
  - operationId: ^create.*
    methodNameOverride: create
