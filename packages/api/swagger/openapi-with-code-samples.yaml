openapi: 3.0.0
paths:
  /:
    get:
      operationId: hello
      summary: ''
      parameters: []
      responses:
        '200':
          description: Returns a greeting message
          content:
            text/plain:
              schema:
                type: string
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: hello
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.hello()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: hello
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Hello(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: hello
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.hello()\n\nif ! res.res.nil?\n  # handle response\nend"
  /health:
    get:
      operationId: health
      summary: ''
      parameters: []
      responses:
        '200':
          description: Api is healthy
          content:
            application/json:
              schema:
                type: number
                example: 200
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: health
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.health()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: health
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Health(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Number != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: health
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.health()\n\nif ! res.number.nil?\n  # handle response\nend"
  /rag/query:
    post:
      operationId: query
      summary: Query using RAG Search
      description: Query across your connected data sources using RAG Search
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBody'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RagQueryOutput'
      x-speakeasy-group: rag
      x-codeSamples:
        - lang: typescript
          label: query
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.rag.query({
                xConnectionToken: "<value>",
                queryBody: {
                  query: "When does Panora incorporated?",
                  topK: 3,
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: query
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.rag.query(x_connection_token="<value>", query_body={
                "query": "When does Panora incorporated?",
                "top_k": 3,
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: query
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Rag.Query(ctx, "<value>", components.QueryBody{
                    Query: "When does Panora incorporated?",
                    TopK: gosdk.Float64(3),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.RagQueryOutputs != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: query
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.rag.query(x_connection_token=\"<value>\", query_body=::OpenApiSDK::Shared::QueryBody.new(\n  query: \"When does Panora incorporated?\",\n  top_k: 3,\n))\n\nif ! res.rag_query_outputs.nil?\n  # handle response\nend"
  /filestorage/files:
    get:
      operationId: listFilestorageFile
      summary: List  Files
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: &ref_0
        - filestorage/files
      x-speakeasy-group: filestorage.files
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageFile
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Files.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFile
      summary: Create Files
      description: Create Files in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFileInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_0
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "my_paris_photo.png",
                  fileUrl: "https://example.com/my_paris_photo.png",
                  mimeType: "application/pdf",
                  size: "1024",
                  folderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.create(x_connection_token="<value>", unified_filestorage_file_input={
                "name": "my_paris_photo.png",
                "file_url": "https://example.com/my_paris_photo.png",
                "mime_type": "application/pdf",
                "size": "1024",
                "folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Files.Create(ctx, "<value>", components.UnifiedFilestorageFileInput{
                    Name: gosdk.String("my_paris_photo.png"),
                    FileURL: gosdk.String("https://example.com/my_paris_photo.png"),
                    MimeType: gosdk.String("application/pdf"),
                    Size: gosdk.String("1024"),
                    FolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.create(x_connection_token=\"<value>\", unified_filestorage_file_input=::OpenApiSDK::Shared::UnifiedFilestorageFileInput.new(\n  name: \"my_paris_photo.png\",\n  file_url: \"https://example.com/my_paris_photo.png\",\n  mime_type: \"application/pdf\",\n  size: \"1024\",\n  folder_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  shared_link: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /filestorage/files/{id}:
    get:
      operationId: retrieveFilestorageFile
      summary: Retrieve Files
      description: Retrieve Files from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the file you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFileOutput'
      tags: *ref_0
      x-speakeasy-group: filestorage.files
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveFilestorageFile
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.files.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFile
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Files.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFile
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_files.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_file_output.nil?\n  # handle response\nend"
  /auth/login:
    post:
      operationId: signIn
      summary: Log In
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '201':
          description: ''
      tags:
        - auth
      x-speakeasy-group: auth.login
      x-codeSamples:
        - lang: typescript
          label: signIn
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.auth.login.signIn({
                idUser: "<value>",
                email: "Stanford_Rice@hotmail.com",
                passwordHash: "<value>",
              });


            }

            run();
        - lang: python
          label: signIn
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.auth.login.sign_in(request={
                "email": "Oda.Treutel97@hotmail.com",
                "password_hash": "<value>",
            })

            # Use the SDK ...
        - lang: go
          label: signIn
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Auth.Login.SignIn(ctx, components.LoginDto{
                    Email: "Oda.Treutel97@hotmail.com",
                    PasswordHash: "<value>",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: signIn
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::LoginDto.new(\n  email: \"Oda.Treutel97@hotmail.com\",\n  password_hash: \"<value>\",\n)\n    \nres = s.auth_login.sign_in(req)\n\nif res.status_code == 200\n  # handle response\nend"
  /connections:
    get:
      operationId: listConnections
      summary: List Connections
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
      tags:
        - connections
      x-codeSamples:
        - lang: typescript
          label: listConnections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.connections.list();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: listConnections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.connections.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listConnections
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Connections.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Connections != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listConnections
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.connections.list()\n\nif ! res.connections.nil?\n  # handle response\nend"
  /webhooks:
    get:
      operationId: listWebhooks
      summary: List webhooks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookResponse'
      tags: &ref_1
        - webhooks
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.list();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: listWebhooks
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listWebhooks
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listWebhooks
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.list()\n\nif ! res.webhook_responses.nil?\n  # handle response\nend"
    post:
      operationId: createWebhookPublic
      summary: Create webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_1
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: createWebhookPublic
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.create({
                url: "https://acme.com/webhook_receiver",
                description: "Webhook to receive connection events",
                scope: [
                  "connection.created",
                ],
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createWebhookPublic
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.create(request={
                "url": "https://acme.com/webhook_receiver",
                "description": "Webhook to receive connection events",
                "scope": [
                    "connection.created",
                ],
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createWebhookPublic
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.Create(ctx, components.WebhookDto{
                    URL: gosdk.String("https://acme.com/webhook_receiver"),
                    Description: gosdk.String("Webhook to receive connection events"),
                    Scope: []string{
                        "connection.created",
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createWebhookPublic
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::WebhookDto.new(\n  url: \"https://acme.com/webhook_receiver\",\n  description: \"Webhook to receive connection events\",\n  scope: [\n    \"connection.created\",\n  ],\n)\n    \nres = s.webhooks.create(req)\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/{id}:
    delete:
      operationId: delete
      summary: Delete Webhook
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the webhook to delete.
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_1
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.delete({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: delete
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.delete(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: delete
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.Delete(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: delete
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.delete(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
    put:
      operationId: updateStatus
      summary: Update webhook status
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the webhook to update.
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
      tags: *ref_1
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.updateStatus({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: updateStatus
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.update_status(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: updateStatus
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.UpdateStatus(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: updateStatus
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.webhooks.update_status(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.webhook_response.nil?\n  # handle response\nend"
  /webhooks/verifyEvent:
    post:
      operationId: verifyEvent
      summary: Verify payload signature of the webhook
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerificationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                description: Dynamic event payload
      tags: *ref_1
      x-speakeasy-group: webhooks
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.verifyEvent({
                payload: {

                },
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: verifyEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.webhooks.verify_event(request={
                "payload": {
                    "id_event": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "type": "connection.created",
                    "data": {
                        "key": "<value>",
                    },
                },
                "signature": "<value>",
                "secret": "<value>",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: verifyEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Webhooks.VerifyEvent(ctx, components.SignatureVerificationDto{
                    Payload: map[string]any{

                    },
                    Signature: gosdk.String("<value>"),
                    Secret: gosdk.String("<value>"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: verifyEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::SignatureVerificationDto.new(\n  payload: ::OpenApiSDK::Shared::Payload.new(\n    id_event: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    type: \"connection.created\",\n    data: {\n      \"key\": \"<value>\",\n    },\n  ),\n  signature: \"<value>\",\n  secret: \"<value>\",\n)\n    \nres = s.webhooks.verify_event(req)\n\nif ! res.event_payload.nil?\n  # handle response\nend"
  /ticketing/tickets:
    get:
      operationId: listTicketingTicket
      summary: List  Tickets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: &ref_2
        - ticketing/tickets
      x-speakeasy-group: ticketing.tickets
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTicket
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Tickets.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingTicket
      summary: Create Tickets
      description: Create Tickets in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingTicketInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_2
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedTicketingTicketInput: {
                  name: "Customer Service Inquiry",
                  status: "OPEN",
                  description: "Help customer",
                  dueDate: new Date("2024-10-01T12:00:00Z"),
                  type: "BUG",
                  parentTicket: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  collections: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  tags: [
                    "my_tag",
                    "urgent_tag",
                  ],
                  completedAt: new Date("2024-10-01T12:00:00Z"),
                  priority: "HIGH",
                  assignedTo: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  comment: {
                    body: "Assigned to Eric !",
                    htmlBody: "<p>Assigned to Eric !</p>",
                    isPrivate: false,
                    creatorType: "USER",
                    ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    attachments: [
                      "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                  },
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createTicketingTicket
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.create(x_connection_token="<value>", unified_ticketing_ticket_input={
                "name": "Customer Service Inquiry",
                "status": "OPEN",
                "description": "Help customer",
                "due_date": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "type": "BUG",
                "parent_ticket": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "collections": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "tags": [
                    "my_tag",
                    "urgent_tag",
                ],
                "completed_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "priority": "HIGH",
                "assigned_to": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "comment": {
                    "body": "Assigned to Eric !",
                    "html_body": "<p>Assigned to Eric !</p>",
                    "is_private": False,
                    "creator_type": "USER",
                    "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "attachments": [
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                },
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Create(ctx, "<value>", components.UnifiedTicketingTicketInput{
                    Name: gosdk.String("Customer Service Inquiry"),
                    Status: gosdk.String("OPEN"),
                    Description: gosdk.String("Help customer"),
                    DueDate: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Type: gosdk.String("BUG"),
                    ParentTicket: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Collections: []components.UnifiedTicketingTicketInputCollections{
                        components.CreateUnifiedTicketingTicketInputCollectionsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    Tags: []components.UnifiedTicketingTicketInputTags{
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                            "my_tag",
                        ),
                        components.CreateUnifiedTicketingTicketInputTagsStr(
                            "urgent_tag",
                        ),
                    },
                    CompletedAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    Priority: gosdk.String("HIGH"),
                    AssignedTo: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    Comment: &components.UnifiedTicketingTicketInputComment{
                        Body: gosdk.String("Assigned to Eric !"),
                        HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                        IsPrivate: gosdk.Bool(false),
                        CreatorType: gosdk.String("USER"),
                        TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                        Attachments: []components.UnifiedTicketingTicketInputCommentAttachments{
                            components.CreateUnifiedTicketingTicketInputCommentAttachmentsStr(
                                "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                            ),
                        },
                    },
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingTicketInputAttachments{
                        components.CreateUnifiedTicketingTicketInputAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.create(x_connection_token=\"<value>\", unified_ticketing_ticket_input=::OpenApiSDK::Shared::UnifiedTicketingTicketInput.new(\n  name: \"Customer Service Inquiry\",\n  status: \"OPEN\",\n  description: \"Help customer\",\n  due_date: DateTime.iso8601('2024-10-01T12:00:00Z'),\n  type: \"BUG\",\n  parent_ticket: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  collections: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  tags: [\n    \"my_tag\",\n    \"urgent_tag\",\n  ],\n  completed_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n  priority: \"HIGH\",\n  assigned_to: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  comment: ::OpenApiSDK::Shared::UnifiedTicketingTicketInputComment.new(\n    body: \"Assigned to Eric !\",\n    html_body: \"<p>Assigned to Eric !</p>\",\n    is_private: false,\n    creator_type: \"USER\",\n    ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    attachments: [\n      \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    ],\n  ),\n  account_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  attachments: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/tickets/{id}:
    get:
      operationId: retrieveTicketingTicket
      summary: Retrieve Tickets
      description: Retrieve Tickets from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `ticket` you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTicketOutput'
      tags: *ref_2
      x-speakeasy-group: ticketing.tickets
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingTicket
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tickets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTicket
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTicket
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tickets.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_ticket_output.nil?\n  # handle response\nend"
  /ticketing/users:
    get:
      operationId: listTicketingUsers
      summary: List Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: &ref_3
        - ticketing/users
      x-speakeasy-group: ticketing.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/users/{id}:
    get:
      operationId: retrieveTicketingUser
      summary: Retrieve User
      description: Retrieve a User from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingUserOutput'
      tags: *ref_3
      x-speakeasy-group: ticketing.users
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_user_output.nil?\n  # handle response\nend"
  /ticketing/accounts:
    get:
      operationId: listTicketingAccount
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: &ref_4
        - ticketing/accounts
      x-speakeasy-group: ticketing.accounts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingAccount
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Accounts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_accounts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/accounts/{id}:
    get:
      operationId: retrieveTicketingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAccountOutput'
      tags: *ref_4
      x-speakeasy-group: ticketing.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.accounts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Accounts.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_accounts.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.unified_ticketing_account_output.nil?\n  # handle response\nend"
  /ticketing/contacts:
    get:
      operationId: listTicketingContacts
      summary: List Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: &ref_5
        - ticketing/contacts
      x-speakeasy-group: ticketing.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/contacts/{id}:
    get:
      operationId: retrieveTicketingContact
      summary: Retrieve Contact
      description: Retrieve a Contact from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingContactOutput'
      tags: *ref_5
      x-speakeasy-group: ticketing.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.contacts.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Contacts.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_contacts.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /sync/status/{vertical}:
    get:
      operationId: status
      summary: Retrieve sync status of a certain vertical
      parameters:
        - name: vertical
          required: true
          in: path
          example: ticketing
          schema:
            enum:
              - ticketing
              - marketingautomation
              - crm
              - filestorage
              - accounting
              - ecommerce
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_6
        - sync
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: status
          source: |-
            import { Panora } from "@panora/sdk";
            import { Vertical } from "@panora/sdk/models/operations";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.sync.status({
                vertical: Vertical.Ticketing,
              });


            }

            run();
        - lang: python
          label: status
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.sync.status(vertical=panora_sdk.PathParamVertical.TICKETING)

            # Use the SDK ...
        - lang: go
          label: status
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/operations"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.Status(ctx, operations.VerticalTicketing)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: status
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.sync.status(vertical=::OpenApiSDK::Operations::Vertical::TICKETING)\n\nif res.status_code == 200\n  # handle response\nend"
  /sync/resync:
    post:
      operationId: resync
      summary: Resync common objects across a vertical
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResyncStatusDto'
      tags: *ref_6
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: resync
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.sync.resync()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: resync
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Sync.Resync(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ResyncStatusDto != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: resync
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.sync.resync()\n\nif ! res.resync_status_dto.nil?\n  # handle response\nend"
  /sync/pull_frequencies:
    post:
      operationId: updatePullFrequency
      summary: Update pull frequency for verticals
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePullFrequencyDto'
      responses:
        '200':
          description: Pull frequency updated successfully
      tags: *ref_6
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: updatePullFrequency
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.sync.updatePullFrequency({
                crm: 1800,
                accounting: 14400,
                filestorage: 28800,
                ecommerce: 43200,
                ticketing: 86400,
              });


            }

            run();
    get:
      operationId: getPullFrequency
      summary: Get pull frequency for verticals
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePullFrequencyDto'
      tags: *ref_6
      x-speakeasy-group: sync
      x-codeSamples:
        - lang: typescript
          label: getPullFrequency
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.sync.getPullFrequency();

              // Handle the result
              console.log(result);
            }

            run();
  /crm/companies:
    get:
      operationId: listCrmCompany
      summary: List Companies
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: &ref_7
        - crm/companies
      x-speakeasy-group: crm.companies
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmCompany
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Companies.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmCompany
      summary: Create Companies
      description: Create Companies in any supported CRM software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmCompanyInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_7
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmCompanyInput: {
                  name: "Acme",
                  industry: "ACCOUNTING",
                  numberOfEmployees: 10,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  emailAddresses: [
                    {
                      emailAddress: "acme@gmail.com",
                      emailAddressType: "WORK",
                    },
                  ],
                  addresses: [
                    {
                      street1: "5th Avenue",
                      street2: "Street 2",
                      city: "New York",
                      state: "NY",
                      postalCode: "10001",
                      country: "USA",
                      addressType: "WORK",
                      ownerType: "<value>",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "+33660606067",
                      phoneType: "WORK",
                    },
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.create(x_connection_token="<value>", unified_crm_company_input={
                "name": "Acme",
                "industry": "ACCOUNTING",
                "number_of_employees": 10,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "email_addresses": [
                    {
                        "email_address": "acme@gmail.com",
                        "email_address_type": "WORK",
                    },
                ],
                "addresses": [
                    {
                        "street_1": "5th Avenue",
                        "street_2": "Street 2",
                        "city": "New York",
                        "state": "NY",
                        "postal_code": "10001",
                        "country": "USA",
                        "address_type": "WORK",
                        "owner_type": "<value>",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "+33660606067",
                        "phone_type": "WORK",
                    },
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Companies.Create(ctx, "<value>", components.UnifiedCrmCompanyInput{
                    Name: gosdk.String("Acme"),
                    Industry: gosdk.String("ACCOUNTING"),
                    NumberOfEmployees: gosdk.Float64(10),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("acme@gmail.com"),
                            EmailAddressType: gosdk.String("WORK"),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("5th Avenue"),
                            Street2: gosdk.String("Street 2"),
                            City: gosdk.String("New York"),
                            State: gosdk.String("NY"),
                            PostalCode: gosdk.String("10001"),
                            Country: gosdk.String("USA"),
                            AddressType: gosdk.String("WORK"),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("+33660606067"),
                            PhoneType: gosdk.String("WORK"),
                        },
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.create(x_connection_token=\"<value>\", unified_crm_company_input=::OpenApiSDK::Shared::UnifiedCrmCompanyInput.new(\n  name: \"Acme\",\n  industry: \"ACCOUNTING\",\n  number_of_employees: 10.0,\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  email_addresses: [\n    ::OpenApiSDK::Shared::Email.new(\n      email_address: \"acme@gmail.com\",\n      email_address_type: \"WORK\",\n    ),\n  ],\n  addresses: [\n    ::OpenApiSDK::Shared::Address.new(\n      street_1: \"5th Avenue\",\n      street_2: \"Street 2\",\n      city: \"New York\",\n      state: \"NY\",\n      postal_code: \"10001\",\n      country: \"USA\",\n      address_type: \"WORK\",\n      owner_type: \"<value>\",\n    ),\n  ],\n  phone_numbers: [\n    ::OpenApiSDK::Shared::Phone.new(\n      phone_number: \"+33660606067\",\n      phone_type: \"WORK\",\n    ),\n  ],\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/companies/{id}:
    get:
      operationId: retrieveCrmCompany
      summary: Retrieve Companies
      description: Retrieve Companies from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the company you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmCompanyOutput'
      tags: *ref_7
      x-speakeasy-group: crm.companies
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmCompany
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.companies.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmCompany
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Companies.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmCompany
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_companies.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_company_output.nil?\n  # handle response\nend"
  /crm/contacts:
    get:
      operationId: listCrmContacts
      summary: List CRM Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: &ref_8
        - crm/contacts
      x-speakeasy-group: crm.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmContact
      summary: Create Contacts
      description: Create Contacts in any supported CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_8
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmContactInput: {
                  firstName: "John",
                  lastName: "Doe",
                  emailAddresses: [
                    {
                      emailAddress: "Loyal79@yahoo.com",
                      emailAddressType: "<value>",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "307-857-9320",
                      phoneType: "<value>",
                    },
                  ],
                  addresses: [
                    {
                      street1: "5th Avenue",
                      street2: "Street 2",
                      city: "Anytown",
                      state: "CA",
                      postalCode: "10001",
                      country: "USA",
                      addressType: "PERSONAL",
                      ownerType: "<value>",
                    },
                  ],
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.create(x_connection_token="<value>", unified_crm_contact_input={
                "first_name": "John",
                "last_name": "Doe",
                "email_addresses": [
                    {
                        "email_address": "Jena.Nienow28@yahoo.com",
                        "email_address_type": "<value>",
                    },
                ],
                "phone_numbers": [
                    {
                        "phone_number": "<value>",
                        "phone_type": "<value>",
                    },
                ],
                "addresses": [
                    {
                        "street_1": "5th Avenue",
                        "street_2": "Street 2",
                        "city": "Anytown",
                        "state": "CA",
                        "postal_code": "10001",
                        "country": "USA",
                        "address_type": "PERSONAL",
                        "owner_type": "<value>",
                    },
                ],
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Contacts.Create(ctx, "<value>", components.UnifiedCrmContactInput{
                    FirstName: gosdk.String("John"),
                    LastName: gosdk.String("Doe"),
                    EmailAddresses: []components.Email{
                        components.Email{
                            EmailAddress: gosdk.String("Jena.Nienow28@yahoo.com"),
                            EmailAddressType: gosdk.String("<value>"),
                        },
                    },
                    PhoneNumbers: []components.Phone{
                        components.Phone{
                            PhoneNumber: gosdk.String("1-809-839-8041"),
                            PhoneType: gosdk.String("<value>"),
                        },
                    },
                    Addresses: []components.Address{
                        components.Address{
                            Street1: gosdk.String("5th Avenue"),
                            Street2: gosdk.String("Street 2"),
                            City: gosdk.String("Anytown"),
                            State: gosdk.String("CA"),
                            PostalCode: gosdk.String("10001"),
                            Country: gosdk.String("USA"),
                            AddressType: gosdk.String("PERSONAL"),
                            OwnerType: gosdk.String("<value>"),
                        },
                    },
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.create(x_connection_token=\"<value>\", unified_crm_contact_input=::OpenApiSDK::Shared::UnifiedCrmContactInput.new(\n  first_name: \"John\",\n  last_name: \"Doe\",\n  email_addresses: [\n    ::OpenApiSDK::Shared::Email.new(\n      email_address: \"Jena.Nienow28@yahoo.com\",\n      email_address_type: \"<value>\",\n    ),\n  ],\n  phone_numbers: [\n    ::OpenApiSDK::Shared::Phone.new(\n      phone_number: \"1-809-839-8041\",\n      phone_type: \"<value>\",\n    ),\n  ],\n  addresses: [\n    ::OpenApiSDK::Shared::Address.new(\n      street_1: \"5th Avenue\",\n      street_2: \"Street 2\",\n      city: \"Anytown\",\n      state: \"CA\",\n      postal_code: \"10001\",\n      country: \"USA\",\n      address_type: \"PERSONAL\",\n      owner_type: \"<value>\",\n    ),\n  ],\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/contacts/{id}:
    get:
      operationId: retrieveCrmContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected CRM
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `contact` you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original CRM software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmContactOutput'
      tags: *ref_8
      x-speakeasy-group: crm.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_contact_output.nil?\n  # handle response\nend"
  /crm/deals:
    get:
      operationId: listCrmDeals
      summary: List Deals
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: &ref_9
        - crm/deals
      x-speakeasy-group: crm.deals
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmDeals
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmDeals
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Deals.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmDeals
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmDeal
      summary: Create Deals
      description: Create Deals in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmDealInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_9
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "Huge Contract with Acme",
                  description: "Contract with Sales Operations Team",
                  amount: 1000,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  stageId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.create(x_connection_token="<value>", unified_crm_deal_input={
                "name": "Huge Contract with Acme",
                "description": "Contract with Sales Operations Team",
                "amount": 1000,
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "stage_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Deals.Create(ctx, "<value>", components.UnifiedCrmDealInput{
                    Name: gosdk.String("Huge Contract with Acme"),
                    Description: gosdk.String("Contract with Sales Operations Team"),
                    Amount: gosdk.Float64(1000),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    StageID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.create(x_connection_token=\"<value>\", unified_crm_deal_input=::OpenApiSDK::Shared::UnifiedCrmDealInput.new(\n  name: \"Huge Contract with Acme\",\n  description: \"Contract with Sales Operations Team\",\n  amount: 1000.0,\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  stage_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/deals/{id}:
    get:
      operationId: retrieveCrmDeal
      summary: Retrieve Deals
      description: Retrieve Deals from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the deal you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmDealOutput'
      tags: *ref_9
      x-speakeasy-group: crm.deals
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmDeal
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.deals.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmDeal
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Deals.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmDeal
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_deals.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_deal_output.nil?\n  # handle response\nend"
  /crm/engagements:
    get:
      operationId: listCrmEngagements
      summary: List Engagements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: &ref_10
        - crm/engagements
      x-speakeasy-group: crm.engagements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmEngagements
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmEngagements
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Engagements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmEngagements
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmEngagement
      summary: Create Engagements
      description: Create Engagements in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmEngagementInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_10
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmEngagementInput: {
                  content: "Meeting call with CTO",
                  direction: "INBOUND",
                  subject: "Technical features planning",
                  startAt: new Date("2024-10-01T12:00:00Z"),
                  endTime: new Date("2024-10-01T22:00:00Z"),
                  type: "MEETING",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contacts: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmEngagement
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.create(x_connection_token="<value>", unified_crm_engagement_input={
                "content": "Meeting call with CTO",
                "direction": "INBOUND",
                "subject": "Technical features planning",
                "start_at": dateutil.parser.isoparse("2024-10-01T12:00:00Z"),
                "end_time": dateutil.parser.isoparse("2024-10-01T22:00:00Z"),
                "type": "MEETING",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contacts": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Engagements.Create(ctx, "<value>", components.UnifiedCrmEngagementInput{
                    Content: gosdk.String("Meeting call with CTO"),
                    Direction: gosdk.String("INBOUND"),
                    Subject: gosdk.String("Technical features planning"),
                    StartAt: types.MustNewTimeFromString("2024-10-01T12:00:00Z"),
                    EndTime: types.MustNewTimeFromString("2024-10-01T22:00:00Z"),
                    Type: gosdk.String("MEETING"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Contacts: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.create(x_connection_token=\"<value>\", unified_crm_engagement_input=::OpenApiSDK::Shared::UnifiedCrmEngagementInput.new(\n  content: \"Meeting call with CTO\",\n  direction: \"INBOUND\",\n  subject: \"Technical features planning\",\n  start_at: DateTime.iso8601('2024-10-01T12:00:00Z'),\n  end_time: DateTime.iso8601('2024-10-01T22:00:00Z'),\n  type: \"MEETING\",\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  contacts: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/engagements/{id}:
    get:
      operationId: retrieveCrmEngagement
      summary: Retrieve Engagements
      description: Retrieve Engagements from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the engagement you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmEngagementOutput'
      tags: *ref_10
      x-speakeasy-group: crm.engagements
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmEngagement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.engagements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmEngagement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Engagements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmEngagement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_engagements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_engagement_output.nil?\n  # handle response\nend"
  /crm/notes:
    get:
      operationId: listCrmNote
      summary: List Notes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: &ref_11
        - crm/notes
      x-speakeasy-group: crm.notes
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Notes.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmNote
      summary: Create Notes
      description: Create Notes in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmNoteInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_11
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmNoteInput: {
                  content: "My notes taken during the meeting",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.create(x_connection_token="<value>", unified_crm_note_input={
                "content": "My notes taken during the meeting",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Notes.Create(ctx, "<value>", components.UnifiedCrmNoteInput{
                    Content: gosdk.String("My notes taken during the meeting"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.create(x_connection_token=\"<value>\", unified_crm_note_input=::OpenApiSDK::Shared::UnifiedCrmNoteInput.new(\n  content: \"My notes taken during the meeting\",\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  deal_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/notes/{id}:
    get:
      operationId: retrieveCrmNote
      summary: Retrieve Notes
      description: Retrieve Notes from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the note you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmNoteOutput'
      tags: *ref_11
      x-speakeasy-group: crm.notes
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.notes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Notes.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_notes.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_note_output.nil?\n  # handle response\nend"
  /crm/stages:
    get:
      operationId: listCrmStages
      summary: List  Stages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: &ref_12
        - crm/stages
      x-speakeasy-group: crm.stages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmStages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmStages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Stages.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmStages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_stages.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/stages/{id}:
    get:
      operationId: retrieveCrmStage
      summary: Retrieve Stages
      description: Retrieve Stages from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the stage you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmStageOutput'
      tags: *ref_12
      x-speakeasy-group: crm.stages
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmStage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.stages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmStage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Stages.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmStageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmStage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_stages.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_stage_output.nil?\n  # handle response\nend"
  /crm/tasks:
    get:
      operationId: listCrmTask
      summary: List Tasks
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: &ref_13
        - crm/tasks
      x-speakeasy-group: crm.tasks
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmTask
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Tasks.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createCrmTask
      summary: Create Tasks
      description: Create Tasks in any supported Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedCrmTaskInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_13
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "Answer customers",
                  content: "Prepare email campaign",
                  status: "PENDING",
                  dueDate: "2024-10-01T12:00:00Z",
                  finishedDate: "2024-10-01T12:00:00Z",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.create(x_connection_token="<value>", unified_crm_task_input={
                "subject": "Answer customers",
                "content": "Prepare email campaign",
                "status": "PENDING",
                "due_date": "2024-10-01T12:00:00Z",
                "finished_date": "2024-10-01T12:00:00Z",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "deal_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Tasks.Create(ctx, "<value>", components.UnifiedCrmTaskInput{
                    Subject: gosdk.String("Answer customers"),
                    Content: gosdk.String("Prepare email campaign"),
                    Status: gosdk.String("PENDING"),
                    DueDate: gosdk.String("2024-10-01T12:00:00Z"),
                    FinishedDate: gosdk.String("2024-10-01T12:00:00Z"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    DealID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.create(x_connection_token=\"<value>\", unified_crm_task_input=::OpenApiSDK::Shared::UnifiedCrmTaskInput.new(\n  subject: \"Answer customers\",\n  content: \"Prepare email campaign\",\n  status: \"PENDING\",\n  due_date: \"2024-10-01T12:00:00Z\",\n  finished_date: \"2024-10-01T12:00:00Z\",\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  deal_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/tasks/{id}:
    get:
      operationId: retrieveCrmTask
      summary: Retrieve Tasks
      description: Retrieve Tasks from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the task you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Crm software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmTaskOutput'
      tags: *ref_13
      x-speakeasy-group: crm.tasks
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmTask
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.tasks.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmTask
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Tasks.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmTask
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_tasks.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_crm_task_output.nil?\n  # handle response\nend"
  /crm/users:
    get:
      operationId: listCrmUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: &ref_14
        - crm/users
      x-speakeasy-group: crm.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listCrmUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listCrmUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Crm.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listCrmUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /crm/users/{id}:
    get:
      operationId: retrieveCrmUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Crm software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: b008e199-eda9-4629-bd41-a01b6195864a
          description: id of the user you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original Crm software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedCrmUserOutput'
      tags: *ref_14
      x-speakeasy-group: crm.users
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "b008e199-eda9-4629-bd41-a01b6195864a",
                remoteData: true,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCrmUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.crm.users.retrieve(x_connection_token="<value>", id="b008e199-eda9-4629-bd41-a01b6195864a", remote_data=True)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCrmUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Crm.Users.Retrieve(ctx, "<value>", "b008e199-eda9-4629-bd41-a01b6195864a", gosdk.Bool(true))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCrmUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.crm_users.retrieve(x_connection_token=\"<value>\", id=\"b008e199-eda9-4629-bd41-a01b6195864a\", remote_data=true)\n\nif ! res.unified_crm_user_output.nil?\n  # handle response\nend"
  /ticketing/collections:
    get:
      operationId: listTicketingCollections
      summary: List Collections
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingCollectionOutput
      tags: &ref_15
        - ticketing/collections
      x-speakeasy-group: ticketing.collections
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingCollections
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingCollections
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Collections.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingCollections
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_collections.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/collections/{id}:
    get:
      operationId: retrieveCollection
      summary: Retrieve Collections
      description: Retrieve Collections from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the collection you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
      tags: *ref_15
      x-speakeasy-group: ticketing.collections
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveCollection
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.collections.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveCollection
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Collections.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCollectionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveCollection
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_collections.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_collection_output.nil?\n  # handle response\nend"
  /ticketing/comments:
    get:
      operationId: listTicketingComments
      summary: List Comments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: &ref_16
        - ticketing/comments
      x-speakeasy-group: ticketing.comments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingComments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingComments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Comments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingComments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingComment
      summary: Create Comments
      description: Create Comments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingCommentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_16
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "Assigned to Eric !",
                  htmlBody: "<p>Assigned to Eric !</p>",
                  isPrivate: false,
                  creatorType: "USER",
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.create(x_connection_token="<value>", unified_ticketing_comment_input={
                "body": "Assigned to Eric !",
                "html_body": "<p>Assigned to Eric !</p>",
                "is_private": False,
                "creator_type": "USER",
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "attachments": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Comments.Create(ctx, "<value>", components.UnifiedTicketingCommentInput{
                    Body: gosdk.String("Assigned to Eric !"),
                    HTMLBody: gosdk.String("<p>Assigned to Eric !</p>"),
                    IsPrivate: gosdk.Bool(false),
                    CreatorType: gosdk.String("USER"),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    UserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Attachments: []components.UnifiedTicketingCommentInputAttachments{
                        components.CreateUnifiedTicketingCommentInputAttachmentsStr(
                            "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        ),
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCommentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.create(x_connection_token=\"<value>\", unified_ticketing_comment_input=::OpenApiSDK::Shared::UnifiedTicketingCommentInput.new(\n  body: \"Assigned to Eric !\",\n  html_body: \"<p>Assigned to Eric !</p>\",\n  is_private: false,\n  creator_type: \"USER\",\n  ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  attachments: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n), remote_data=false)\n\nif ! res.unified_ticketing_comment_output.nil?\n  # handle response\nend"
  /ticketing/comments/{id}:
    get:
      operationId: retrieveTicketingComment
      summary: Retrieve Comment
      description: Retrieve a Comment from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the `comment` you want to retrive.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingCommentOutput'
      tags: *ref_16
      x-speakeasy-group: ticketing.comments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingComment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.comments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingComment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Comments.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingComment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_comments.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags:
    get:
      operationId: listTicketingTags
      summary: List Tags
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: &ref_17
        - ticketing/tags
      x-speakeasy-group: ticketing.tags
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingTags
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTags
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Tags.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTags
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tags.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/tags/{id}:
    get:
      operationId: retrieveTicketingTag
      summary: Retrieve Tag
      description: Retrieve a Tag from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the tag you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTagOutput'
      tags: *ref_17
      x-speakeasy-group: ticketing.tags
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingTag
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.tags.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTag
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Tags.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTagOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTag
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_tags.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_tag_output.nil?\n  # handle response\nend"
  /ticketing/teams:
    get:
      operationId: listTicketingTeams
      summary: List  Teams
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: &ref_18
        - ticketing/teams
      x-speakeasy-group: ticketing.teams
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingTeams
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingTeams
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Teams.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingTeams
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_teams.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ticketing/teams/{id}:
    get:
      operationId: retrieveTicketingTeam
      summary: Retrieve Teams
      description: Retrieve Teams from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the team you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingTeamOutput'
      tags: *ref_18
      x-speakeasy-group: ticketing.teams
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingTeam
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.teams.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingTeam
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Teams.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTeamOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingTeam
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_teams.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_team_output.nil?\n  # handle response\nend"
  /linked_users/fromRemoteId:
    get:
      operationId: remoteId
      summary: Retrieve a Linked User From A Remote Id
      parameters:
        - name: remoteId
          required: true
          in: query
          example: id_1
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: &ref_19
        - linkedUsers
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.remoteId({
                remoteId: "id_1",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: remoteId
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.remote_id(remote_id="id_1")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: remoteId
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.RemoteID(ctx, "id_1")
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: remoteId
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.remote_id(remote_id=\"id_1\")\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
  /linked_users:
    post:
      operationId: createLinkedUser
      summary: Create Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_19
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "id_1",
                alias: "acme",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.create(request={
                "linked_user_origin_id": "id_1",
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.Create(ctx, components.CreateLinkedUserDto{
                    LinkedUserOriginID: "id_1",
                    Alias: gosdk.String("acme"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateLinkedUserDto.new(\n  linked_user_origin_id: \"id_1\",\n  alias_: \"acme\",\n)\n    \nres = s.linked_users.create(req)\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
    get:
      operationId: listLinkedUsers
      summary: List Linked Users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_19
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: listLinkedUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.list()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: listLinkedUsers
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: listLinkedUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.list()\n\nif ! res.linked_user_responses.nil?\n  # handle response\nend"
  /linked_users/batch:
    post:
      operationId: importBatch
      summary: Add Batch Linked Users
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBatchLinkedUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_19
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.importBatch({
                linkedUserOriginIds: [
                  "id_1",
                ],
                alias: "acme",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: importBatch
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.import_batch(request={
                "linked_user_origin_ids": [
                    "id_1",
                ],
                "alias": "acme",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: importBatch
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.ImportBatch(ctx, components.CreateBatchLinkedUserDto{
                    LinkedUserOriginIds: []string{
                        "id_1",
                    },
                    Alias: gosdk.String("acme"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: importBatch
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateBatchLinkedUserDto.new(\n  linked_user_origin_ids: [\n    \"id_1\",\n  ],\n  alias_: \"acme\",\n)\n    \nres = s.linked_users.import_batch(req)\n\nif ! res.linked_user_responses.nil?\n  # handle response\nend"
  /linked_users/{id}:
    get:
      operationId: retrieveLinkedUser
      summary: Retrieve Linked Users
      parameters:
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedUserResponse'
      tags: *ref_19
      x-speakeasy-group: linkedUsers
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.retrieve({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveLinkedUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.linked_users.retrieve(id="801f9ede-c698-4e66-a7fc-48d19eebaa4f")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveLinkedUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.Retrieve(ctx, "801f9ede-c698-4e66-a7fc-48d19eebaa4f")
                if err != nil {
                    log.Fatal(err)
                }
                if res.LinkedUserResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveLinkedUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.linked_users.retrieve(id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\")\n\nif ! res.linked_user_response.nil?\n  # handle response\nend"
  /projects:
    get:
      operationId: getProjects
      summary: Retrieve projects
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
      tags: &ref_20
        - projects
      x-codeSamples:
        - lang: typescript
          label: getProjects
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.getProjects();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: getProjects
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.get_projects()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: getProjects
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Projects.GetProjects(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getProjects
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.projects.get_projects()\n\nif ! res.project_responses.nil?\n  # handle response\nend"
    post:
      operationId: createProject
      summary: Create a project
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
      tags: *ref_20
      x-codeSamples:
        - lang: typescript
          label: createProject
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.create({
                name: "Project Name",
                idOrganization: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                idUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createProject
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.projects.create(request={
                "name": "Project Name",
                "id_organization": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "id_user": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createProject
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Projects.Create(ctx, components.CreateProjectDto{
                    Name: "Project Name",
                    IDOrganization: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    IDUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.ProjectResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createProject
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CreateProjectDto.new(\n  name: \"Project Name\",\n  id_organization: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  id_user: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.projects.create(req)\n\nif ! res.project_response.nil?\n  # handle response\nend"
  /field_mappings/values:
    get:
      operationId: getFieldMappingValues
      summary: Retrieve field mappings values
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_21
        - fieldMappings
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingValues
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappingValues();


            }

            run();
        - lang: python
          label: getFieldMappingValues
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mapping_values()

            # Use the SDK ...
        - lang: go
          label: getFieldMappingValues
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingValues(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappingValues
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mapping_values()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/entities:
    get:
      operationId: getFieldMappingsEntities
      summary: Retrieve field mapping entities
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_21
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingsEntities
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappingsEntities();


            }

            run();
        - lang: python
          label: getFieldMappingsEntities
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings_entities()

            # Use the SDK ...
        - lang: go
          label: getFieldMappingsEntities
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappingsEntities(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappingsEntities
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mappings_entities()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/attributes:
    get:
      operationId: getFieldMappings
      summary: Retrieve field mappings
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_21
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: getFieldMappings
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappings();


            }

            run();
        - lang: python
          label: getFieldMappings
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.field_mappings.get_field_mappings()

            # Use the SDK ...
        - lang: go
          label: getFieldMappings
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.GetFieldMappings(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getFieldMappings
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.field_mappings.get_field_mappings()\n\nif res.status_code == 200\n  # handle response\nend"
  /field_mappings/define:
    post:
      operationId: definitions
      summary: Define target Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefineTargetFieldDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_21
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: definitions
          source: |-
            import { Panora } from "@panora/sdk";
            import { DataType, ObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.definitions({
                objectTypeOwner: ObjectTypeOwner.Company,
                name: "fav_dish",
                description: "My favorite dish",
                dataType: DataType.String,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: definitions
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.definitions(request={
                "object_type_owner": panora_sdk.ObjectTypeOwner.COMPANY,
                "name": "fav_dish",
                "description": "My favorite dish",
                "data_type": panora_sdk.DataType.STRING,
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: definitions
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.Definitions(ctx, components.DefineTargetFieldDto{
                    ObjectTypeOwner: components.ObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("fav_dish"),
                    Description: gosdk.String("My favorite dish"),
                    DataType: components.DataTypeString.ToPointer(),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: definitions
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::DefineTargetFieldDto.new(\n  object_type_owner: ::OpenApiSDK::Shared::ObjectTypeOwner::COMPANY,\n  name: \"fav_dish\",\n  description: \"My favorite dish\",\n  data_type: ::OpenApiSDK::Shared::DataType::STRING,\n)\n    \nres = s.field_mappings.definitions(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /field_mappings:
    post:
      operationId: defineCustomField
      summary: Create Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_21
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: defineCustomField
          source: |-
            import { Panora } from "@panora/sdk";
            import { CustomFieldCreateDtoDataType, CustomFieldCreateDtoObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.defineCustomField({
                objectTypeOwner: CustomFieldCreateDtoObjectTypeOwner.Company,
                name: "my_favorite_dish",
                description: "Favorite Dish",
                dataType: CustomFieldCreateDtoDataType.String,
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: defineCustomField
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.define_custom_field(request={
                "object_type_owner": panora_sdk.CustomFieldCreateDtoObjectTypeOwner.COMPANY,
                "name": "my_favorite_dish",
                "description": "Favorite Dish",
                "data_type": panora_sdk.CustomFieldCreateDtoDataType.STRING,
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: defineCustomField
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.DefineCustomField(ctx, components.CustomFieldCreateDto{
                    ObjectTypeOwner: components.CustomFieldCreateDtoObjectTypeOwnerCompany.ToPointer(),
                    Name: gosdk.String("my_favorite_dish"),
                    Description: gosdk.String("Favorite Dish"),
                    DataType: components.CustomFieldCreateDtoDataTypeString.ToPointer(),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: defineCustomField
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::CustomFieldCreateDto.new(\n  object_type_owner: ::OpenApiSDK::Shared::CustomFieldCreateDtoObjectTypeOwner::COMPANY,\n  name: \"my_favorite_dish\",\n  description: \"Favorite Dish\",\n  data_type: ::OpenApiSDK::Shared::CustomFieldCreateDtoDataType::STRING,\n  source_custom_field_id: \"id_1\",\n  source_provider: \"hubspot\",\n  linked_user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.field_mappings.define_custom_field(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /field_mappings/map:
    post:
      operationId: map
      summary: Map Custom Field
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapFieldToProviderDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldResponse'
      tags: *ref_21
      x-speakeasy-group: fieldMappings
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.map({
                attributeId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: map
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.field_mappings.map(request={
                "attribute_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "source_custom_field_id": "id_1",
                "source_provider": "hubspot",
                "linked_user_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: map
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.FieldMappings.Map(ctx, components.MapFieldToProviderDto{
                    AttributeID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SourceCustomFieldID: gosdk.String("id_1"),
                    SourceProvider: gosdk.String("hubspot"),
                    LinkedUserID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.CustomFieldResponse != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: map
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Shared::MapFieldToProviderDto.new(\n  attribute_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  source_custom_field_id: \"id_1\",\n  source_provider: \"hubspot\",\n  linked_user_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n)\n    \nres = s.field_mappings.map(req)\n\nif ! res.custom_field_response.nil?\n  # handle response\nend"
  /events:
    get:
      operationId: getPanoraCoreEvents
      summary: List Events
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: number
        - name: limit
          required: false
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'
      tags:
        - events
      x-codeSamples:
        - lang: typescript
          label: getPanoraCoreEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.events.getPanoraCoreEvents({});

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: getPanoraCoreEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.events.get_panora_core_events()

            if res is not None:
                # handle response
                pass
        - lang: go
          label: getPanoraCoreEvents
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Events.GetPanoraCoreEvents(ctx, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EventResponses != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getPanoraCoreEvents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.events.get_panora_core_events(page=5232.51, limit=1895.12)\n\nif ! res.event_responses.nil?\n  # handle response\nend"
  /passthrough:
    post:
      operationId: request
      summary: Make a passthrough request
      parameters:
        - name: x-connection-token
          required: true
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassThroughRequestDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: &ref_22
        - passthrough
      x-speakeasy-group: passthrough
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { PassThroughRequestDtoMethod } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.passthrough.request({
                xConnectionToken: "<value>",
                passThroughRequestDto: {
                  method: PassThroughRequestDtoMethod.Get,
                  path: "/etc/periodic",
                  data: {},
                  requestFormat: {

                  },
                  overrideBaseUrl: {

                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: request
          source: |-
            import panora_sdk
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.passthrough.request(x_connection_token="<value>", pass_through_request_dto={
                "method": panora_sdk.PassThroughRequestDtoMethod.GET,
                "path": "/dev",
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: request
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Passthrough.Request(ctx, "<value>", components.PassThroughRequestDto{
                    Method: components.PassThroughRequestDtoMethodGet,
                    Path: gosdk.String("/dev"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.TwoHundredApplicationJSONObject != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: request
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.passthrough.request(x_connection_token=\"<value>\", pass_through_request_dto=::OpenApiSDK::Shared::PassThroughRequestDto.new(\n  method: ::OpenApiSDK::Shared::PassThroughRequestDtoMethod::GET,\n  path: \"/dev\",\n))\n\nif ! res.two_hundred_application_json_object.nil?\n  # handle response\nend"
  /passthrough/{retryId}:
    get:
      operationId: getRetriedRequestResponse
      summary: Retrieve response of a failed passthrough request due to rate limits
      parameters:
        - name: retryId
          required: true
          in: path
          description: >-
            id of the retryJob returned when you initiated a passthrough request.
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_22
      x-speakeasy-group: passthrough.{retryid}
      x-codeSamples:
        - lang: typescript
          label: getRetriedRequestResponse
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.passthrough.retryid.getRetriedRequestResponse({
                retryId: "<id>",
              });


            }

            run();
        - lang: python
          label: getRetriedRequestResponse
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            s.passthrough.retryid.get_retried_request_response(retry_id="<value>")

            # Use the SDK ...
        - lang: go
          label: getRetriedRequestResponse
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Passthrough.{retryid}.GetRetriedRequestResponse(ctx, "<value>")
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: getRetriedRequestResponse
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.passthrough_retryid.get_retried_request_response(retry_id=\"<value>\")\n\nif res.status_code == 200\n  # handle response\nend"
  /marketingautomation/actions:
    get:
      operationId: listMarketingautomationAction
      summary: List Actions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationActionOutput
      tags: &ref_23
        - marketingautomation/actions
      x-speakeasy-group: marketingautomation.actions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationAction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Actions.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAction
      summary: Create Action
      description: Create a action in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationActionInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_23
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.create(x_connection_token="<value>", unified_marketingautomation_action_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Create(ctx, "<value>", components.UnifiedMarketingautomationActionInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.create(x_connection_token=\"<value>\", unified_marketingautomation_action_input=::OpenApiSDK::Shared::UnifiedMarketingautomationActionInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/actions/{id}:
    get:
      operationId: retrieveMarketingautomationAction
      summary: Retrieve Actions
      description: Retrieve Actions from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the action you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationActionOutput'
      tags: *ref_23
      x-speakeasy-group: marketingautomation.actions
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.actions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_actions.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_action_output.nil?\n  # handle response\nend"
  /marketingautomation/automations:
    get:
      operationId: listMarketingautomationAutomations
      summary: List Automations
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: &ref_24
        - marketingautomation/automations
      x-speakeasy-group: marketingautomation.automations
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomations
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationAutomations
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationAutomations
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Automations.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationAutomations
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationAutomation
      summary: Create Automation
      description: Create a automation in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationAutomationInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_24
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.create(x_connection_token="<value>", unified_marketingautomation_automation_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Create(ctx, "<value>", components.UnifiedMarketingautomationAutomationInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.create(x_connection_token=\"<value>\", unified_marketingautomation_automation_input=::OpenApiSDK::Shared::UnifiedMarketingautomationAutomationInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/automations/{id}:
    get:
      operationId: retrieveMarketingautomationAutomation
      summary: Retrieve Automation
      description: Retrieve an Automation from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the automation you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/UnifiedMarketingautomationAutomationOutput
      tags: *ref_24
      x-speakeasy-group: marketingautomation.automations
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationAutomation
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.automations.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationAutomation
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationAutomation
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_automations.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_automation_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns:
    get:
      operationId: listMarketingautomationCampaigns
      summary: List Campaigns
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationCampaignOutput
      tags: &ref_25
        - marketingautomation/campaigns
      x-speakeasy-group: marketingautomation.campaigns
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaigns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationCampaigns
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationCampaigns
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Campaigns.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationCampaigns
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationCampaign
      summary: Create Campaign
      description: Create a campaign in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationCampaignInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationCampaignOutput'
      tags: *ref_25
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.create(x_connection_token="<value>", unified_marketingautomation_campaign_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Create(ctx, "<value>", components.UnifiedMarketingautomationCampaignInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.create(x_connection_token=\"<value>\", unified_marketingautomation_campaign_input=::OpenApiSDK::Shared::UnifiedMarketingautomationCampaignInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/campaigns/{id}:
    get:
      operationId: retrieveMarketingautomationCampaign
      summary: Retrieve Campaign
      description: Retrieve a Campaign from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the campaign you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationCampaignOutput'
      tags: *ref_25
      x-speakeasy-group: marketingautomation.campaigns
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationCampaign
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.campaigns.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationCampaign
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationCampaignOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationCampaign
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_campaigns.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_campaign_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts:
    get:
      operationId: listMarketingAutomationContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationContactOutput
      tags: &ref_26
        - marketingautomation/contacts
      x-speakeasy-group: marketingautomation.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingAutomationContact
      summary: Create Contact
      description: Create a contact in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_26
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.create(x_connection_token="<value>", unified_marketingautomation_contact_input={}, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Create(ctx, "<value>", components.UnifiedMarketingautomationContactInput{}, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.create(x_connection_token=\"<value>\", unified_marketingautomation_contact_input=::OpenApiSDK::Shared::UnifiedMarketingautomationContactInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/contacts/{id}:
    get:
      operationId: retrieveMarketingAutomationContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the contact you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationContactOutput'
      tags: *ref_26
      x-speakeasy-group: marketingautomation.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_contact_output.nil?\n  # handle response\nend"
  /marketingautomation/emails:
    get:
      operationId: listMarketingautomationEmails
      summary: List Emails
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEmailOutput
      tags: &ref_27
        - marketingautomation/emails
      x-speakeasy-group: marketingautomation.emails
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationEmails
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationEmails
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Emails.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationEmails
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_emails.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/emails/{id}:
    get:
      operationId: retrieveMarketingautomationEmail
      summary: Retrieve Email
      description: Retrieve an Email from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the email you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEmailOutput'
      tags: *ref_27
      x-speakeasy-group: marketingautomation.emails
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEmail
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.emails.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEmail
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEmailOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEmail
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_emails.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_email_output.nil?\n  # handle response\nend"
  /marketingautomation/events:
    get:
      operationId: listMarketingAutomationEvents
      summary: List Events
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationEventOutput
      tags: &ref_28
        - marketingautomation/events
      x-speakeasy-group: marketingautomation.events
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationEvents
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationEvents
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Events.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationEvents
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_events.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/events/{id}:
    get:
      operationId: retrieveMarketingautomationEvent
      summary: Retrieve Event
      description: Retrieve an Event from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the event you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationEventOutput'
      tags: *ref_28
      x-speakeasy-group: marketingautomation.events
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationEvent
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.events.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationEvent
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Events.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEventOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationEvent
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_events.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_event_output.nil?\n  # handle response\nend"
  /marketingautomation/lists:
    get:
      operationId: listMarketingautomationLists
      summary: List Lists
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationListOutput
      tags: &ref_29
        - marketingautomation/lists
      x-speakeasy-group: marketingautomation.lists
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationLists
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationLists
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Lists.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationLists
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationList
      summary: Create Lists
      description: Create Lists in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationListInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_29
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.create(x_connection_token="<value>", unified_marketingautomation_list_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Create(ctx, "<value>", components.UnifiedMarketingautomationListInput{}, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.create(x_connection_token=\"<value>\", unified_marketingautomation_list_input=::OpenApiSDK::Shared::UnifiedMarketingautomationListInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/lists/{id}:
    get:
      operationId: retrieveMarketingautomationList
      summary: Retrieve List
      description: Retrieve a List from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the list you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationListOutput'
      tags: *ref_29
      x-speakeasy-group: marketingautomation.lists
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationList
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.lists.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationList
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationList
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_lists.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_list_output.nil?\n  # handle response\nend"
  /marketingautomation/messages:
    get:
      operationId: listMarketingautomationMessages
      summary: List Messages
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationMessageOutput
      tags: &ref_30
        - marketingautomation/messages
      x-speakeasy-group: marketingautomation.messages
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationMessages
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationMessages
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Messages.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationMessages
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_messages.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/messages/{id}:
    get:
      operationId: retrieveMarketingautomationMessage
      summary: Retrieve Messages
      description: Retrieve Messages from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the message you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationMessageOutput'
      tags: *ref_30
      x-speakeasy-group: marketingautomation.messages
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationMessage
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.messages.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationMessage
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationMessageOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationMessage
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_messages.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_message_output.nil?\n  # handle response\nend"
  /marketingautomation/templates:
    get:
      operationId: listMarketingautomationTemplates
      summary: List Templates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationTemplateOutput
      tags: &ref_31
        - marketingautomation/templates
      x-speakeasy-group: marketingautomation.templates
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingautomationTemplates
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingautomationTemplates
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Templates.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingautomationTemplates
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createMarketingautomationTemplate
      summary: Create Template
      description: Create a template in any supported Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedMarketingautomationTemplateInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_31
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.create(x_connection_token="<value>", unified_marketingautomation_template_input={})

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Create(ctx, "<value>", components.UnifiedMarketingautomationTemplateInput{}, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.create(x_connection_token=\"<value>\", unified_marketingautomation_template_input=::OpenApiSDK::Shared::UnifiedMarketingautomationTemplateInput.new(), remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/templates/{id}:
    get:
      operationId: retrieveMarketingautomationTemplate
      summary: Retrieve Template
      description: Retrieve a Template from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the template you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationTemplateOutput'
      tags: *ref_31
      x-speakeasy-group: marketingautomation.templates
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingautomationTemplate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.templates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingautomationTemplate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingautomationTemplate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_templates.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_template_output.nil?\n  # handle response\nend"
  /marketingautomation/users:
    get:
      operationId: listMarketingAutomationUsers
      summary: List  Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedMarketingautomationUserOutput
      tags: &ref_32
        - marketingautomation/users
      x-speakeasy-group: marketingautomation.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listMarketingAutomationUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listMarketingAutomationUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Marketingautomation.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listMarketingAutomationUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /marketingautomation/users/{id}:
    get:
      operationId: retrieveMarketingAutomationUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Marketingautomation software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the user you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: >-
            Set to true to include data from the original Marketingautomation software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedMarketingautomationUserOutput'
      tags: *ref_32
      x-speakeasy-group: marketingautomation.users
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveMarketingAutomationUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.marketingautomation.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveMarketingAutomationUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Marketingautomation.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveMarketingAutomationUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.marketingautomation_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_marketingautomation_user_output.nil?\n  # handle response\nend"
  /accounting/accounts:
    get:
      operationId: listAccountingAccounts
      summary: List  Accounts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: &ref_33
        - accounting/accounts
      x-speakeasy-group: accounting.accounts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingAccounts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAccounts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Accounts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAccounts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAccount
      summary: Create Accounts
      description: Create accounts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAccountInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_33
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAccountInput: {
                  name: "Cash",
                  description: "Main cash account for daily operations",
                  classification: "Asset",
                  type: "Current Asset",
                  status: "Active",
                  currentBalance: 10000,
                  currency: "USD",
                  accountNumber: "1000",
                  parentAccount: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.create(x_connection_token="<value>", unified_accounting_account_input={
                "name": "Cash",
                "description": "Main cash account for daily operations",
                "classification": "Asset",
                "type": "Current Asset",
                "status": "Active",
                "current_balance": 10000,
                "currency": "USD",
                "account_number": "1000",
                "parent_account": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Accounts.Create(ctx, "<value>", components.UnifiedAccountingAccountInput{
                    Name: gosdk.String("Cash"),
                    Description: gosdk.String("Main cash account for daily operations"),
                    Classification: gosdk.String("Asset"),
                    Type: gosdk.String("Current Asset"),
                    Status: gosdk.String("Active"),
                    CurrentBalance: gosdk.Float64(10000),
                    Currency: gosdk.String("USD"),
                    AccountNumber: gosdk.String("1000"),
                    ParentAccount: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingAccountInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.create(x_connection_token=\"<value>\", unified_accounting_account_input=::OpenApiSDK::Shared::UnifiedAccountingAccountInput.new(\n  name: \"Cash\",\n  description: \"Main cash account for daily operations\",\n  classification: \"Asset\",\n  type: \"Current Asset\",\n  status: \"Active\",\n  current_balance: 10000.0,\n  currency: \"USD\",\n  account_number: \"1000\",\n  parent_account: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingAccountInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/accounts/{id}:
    get:
      operationId: retrieveAccountingAccount
      summary: Retrieve Accounts
      description: Retrieve Accounts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the account you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAccountOutput'
      tags: *ref_33
      x-speakeasy-group: accounting.accounts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingAccount
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.accounts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAccount
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Accounts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAccount
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_accounts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_account_output.nil?\n  # handle response\nend"
  /accounting/addresses:
    get:
      operationId: listAccountingAddress
      summary: List  Addresss
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: &ref_34
        - accounting/addresses
      x-speakeasy-group: accounting.addresses
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAddress
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Addresses.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_addresses.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/addresses/{id}:
    get:
      operationId: retrieveAccountingAddress
      summary: Retrieve Addresses
      description: Retrieve Addresses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the address you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAddressOutput'
      tags: *ref_34
      x-speakeasy-group: accounting.addresses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingAddress
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.addresses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAddress
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Addresses.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAddressOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAddress
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_addresses.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_address_output.nil?\n  # handle response\nend"
  /accounting/attachments:
    get:
      operationId: listAccountingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingAttachmentOutput
      tags: &ref_35
        - accounting/attachments
      x-speakeasy-group: accounting.attachments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Attachments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingAttachment
      summary: Create Attachments
      description: Create attachments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_35
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAttachmentInput: {
                  fileName: "invoice.pdf",
                  fileUrl: "https://example.com/files/invoice.pdf",
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.create(x_connection_token="<value>", unified_accounting_attachment_input={
                "file_name": "invoice.pdf",
                "file_url": "https://example.com/files/invoice.pdf",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Attachments.Create(ctx, "<value>", components.UnifiedAccountingAttachmentInput{
                    FileName: gosdk.String("invoice.pdf"),
                    FileURL: gosdk.String("https://example.com/files/invoice.pdf"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingAttachmentInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.create(x_connection_token=\"<value>\", unified_accounting_attachment_input=::OpenApiSDK::Shared::UnifiedAccountingAttachmentInput.new(\n  file_name: \"invoice.pdf\",\n  file_url: \"https://example.com/files/invoice.pdf\",\n  account_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingAttachmentInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/attachments/{id}:
    get:
      operationId: retrieveAccountingAttachment
      summary: Retrieve Attachments
      description: Retrieve attachments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the attachment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingAttachmentOutput'
      tags: *ref_35
      x-speakeasy-group: accounting.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Attachments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_attachments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_attachment_output.nil?\n  # handle response\nend"
  /accounting/balancesheets:
    get:
      operationId: listAccountingBalanceSheets
      summary: List  BalanceSheets
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingBalancesheetOutput
      tags: &ref_36
        - accounting/balancesheets
      x-speakeasy-group: accounting.balancesheets
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingBalanceSheets
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingBalanceSheets
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Balancesheets.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingBalanceSheets
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_balancesheets.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/balancesheets/{id}:
    get:
      operationId: retrieveAccountingBalanceSheet
      summary: Retrieve BalanceSheets
      description: Retrieve BalanceSheets from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the balancesheet you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingBalancesheetOutput'
      tags: *ref_36
      x-speakeasy-group: accounting.balancesheets
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingBalanceSheet
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.balancesheets.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingBalanceSheet
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingBalancesheetOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingBalanceSheet
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_balancesheets.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_balancesheet_output.nil?\n  # handle response\nend"
  /accounting/cashflowstatements:
    get:
      operationId: listAccountingCashflowStatement
      summary: List  CashflowStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCashflowstatementOutput
      tags: &ref_37
        - accounting/cashflowstatements
      x-speakeasy-group: accounting.cashflowstatements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCashflowStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Cashflowstatements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_cashflowstatements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/cashflowstatements/{id}:
    get:
      operationId: retrieveAccountingCashflowStatement
      summary: Retrieve Cashflow Statements
      description: Retrieve Cashflow Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the cashflowstatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCashflowstatementOutput'
      tags: *ref_37
      x-speakeasy-group: accounting.cashflowstatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingCashflowStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.cashflowstatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCashflowStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCashflowstatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCashflowStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_cashflowstatements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_cashflowstatement_output.nil?\n  # handle response\nend"
  /accounting/companyinfos:
    get:
      operationId: listAccountingCompanyInfos
      summary: List  CompanyInfos
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCompanyinfoOutput
      tags: &ref_38
        - accounting/companyinfos
      x-speakeasy-group: accounting.companyinfos
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingCompanyInfos
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCompanyInfos
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Companyinfos.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCompanyInfos
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_companyinfos.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/companyinfos/{id}:
    get:
      operationId: retrieveAccountingCompanyInfo
      summary: Retrieve Company Infos
      description: Retrieve Company Infos from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the companyinfo you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCompanyinfoOutput'
      tags: *ref_38
      x-speakeasy-group: accounting.companyinfos
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingCompanyInfo
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.companyinfos.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCompanyInfo
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCompanyinfoOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCompanyInfo
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_companyinfos.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_companyinfo_output.nil?\n  # handle response\nend"
  /accounting/contacts:
    get:
      operationId: listAccountingContacts
      summary: List  Contacts
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: &ref_39
        - accounting/contacts
      x-speakeasy-group: accounting.contacts
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingContacts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingContacts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Contacts.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingContacts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingContact
      summary: Create Contacts
      description: Create contacts in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingContactInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_39
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingContactInput: {
                  name: "John Doe",
                  isSupplier: true,
                  isCustomer: false,
                  emailAddress: "john.doe@example.com",
                  taxNumber: "123456789",
                  status: "Active",
                  currency: "USD",
                  remoteUpdatedAt: "2024-06-15T12:00:00Z",
                  companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.create(x_connection_token="<value>", unified_accounting_contact_input={
                "name": "John Doe",
                "is_supplier": True,
                "is_customer": False,
                "email_address": "john.doe@example.com",
                "tax_number": "123456789",
                "status": "Active",
                "currency": "USD",
                "remote_updated_at": "2024-06-15T12:00:00Z",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Contacts.Create(ctx, "<value>", components.UnifiedAccountingContactInput{
                    Name: gosdk.String("John Doe"),
                    IsSupplier: gosdk.Bool(true),
                    IsCustomer: gosdk.Bool(false),
                    EmailAddress: gosdk.String("john.doe@example.com"),
                    TaxNumber: gosdk.String("123456789"),
                    Status: gosdk.String("Active"),
                    Currency: gosdk.String("USD"),
                    RemoteUpdatedAt: gosdk.String("2024-06-15T12:00:00Z"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: &components.UnifiedAccountingContactInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.create(x_connection_token=\"<value>\", unified_accounting_contact_input=::OpenApiSDK::Shared::UnifiedAccountingContactInput.new(\n  name: \"John Doe\",\n  is_supplier: true,\n  is_customer: false,\n  email_address: \"john.doe@example.com\",\n  tax_number: \"123456789\",\n  status: \"Active\",\n  currency: \"USD\",\n  remote_updated_at: \"2024-06-15T12:00:00Z\",\n  company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingContactInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/contacts/{id}:
    get:
      operationId: retrieveAccountingContact
      summary: Retrieve Contacts
      description: Retrieve Contacts from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the contact you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingContactOutput'
      tags: *ref_39
      x-speakeasy-group: accounting.contacts
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingContact
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.contacts.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingContact
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Contacts.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingContact
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_contacts.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_contact_output.nil?\n  # handle response\nend"
  /accounting/creditnotes:
    get:
      operationId: listAccountingCreditNote
      summary: List  CreditNotes
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingCreditnoteOutput
      tags: &ref_40
        - accounting/creditnotes
      x-speakeasy-group: accounting.creditnotes
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingCreditNote
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Creditnotes.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_creditnotes.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/creditnotes/{id}:
    get:
      operationId: retrieveAccountingCreditNote
      summary: Retrieve Credit Notes
      description: Retrieve Credit Notes from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the creditnote you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingCreditnoteOutput'
      tags: *ref_40
      x-speakeasy-group: accounting.creditnotes
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingCreditNote
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.creditnotes.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingCreditNote
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCreditnoteOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingCreditNote
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_creditnotes.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_creditnote_output.nil?\n  # handle response\nend"
  /accounting/expenses:
    get:
      operationId: listAccountingExpense
      summary: List  Expenses
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: &ref_41
        - accounting/expenses
      x-speakeasy-group: accounting.expenses
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingExpense
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Expenses.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingExpense
      summary: Create Expenses
      description: Create Expenses in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingExpenseInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_41
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingExpenseInput: {
                  transactionDate: new Date("2024-06-15T12:00:00Z"),
                  totalAmount: 10000,
                  subTotal: 9000,
                  totalTaxAmount: 1000,
                  currency: "USD",
                  exchangeRate: "1.2",
                  memo: "Business lunch with client",
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  trackingCategories: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  lineItems: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "report_item_1234",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingExpense
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.create(x_connection_token="<value>", unified_accounting_expense_input={
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "total_amount": 10000,
                "sub_total": 9000,
                "total_tax_amount": 1000,
                "currency": "USD",
                "exchange_rate": "1.2",
                "memo": "Business lunch with client",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Expenses.Create(ctx, "<value>", components.UnifiedAccountingExpenseInput{
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    TotalAmount: gosdk.Float64(10000),
                    SubTotal: gosdk.Float64(9000),
                    TotalTaxAmount: gosdk.Float64(1000),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    Memo: gosdk.String("Business lunch with client"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingExpenseInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.create(x_connection_token=\"<value>\", unified_accounting_expense_input=::OpenApiSDK::Shared::UnifiedAccountingExpenseInput.new(\n  transaction_date: DateTime.iso8601('2024-06-15T12:00:00Z'),\n  total_amount: 10000.0,\n  sub_total: 9000.0,\n  total_tax_amount: 1000.0,\n  currency: \"USD\",\n  exchange_rate: \"1.2\",\n  memo: \"Business lunch with client\",\n  account_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  tracking_categories: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  line_items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"report_item_1234\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingExpenseInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/expenses/{id}:
    get:
      operationId: retrieveAccountingExpense
      summary: Retrieve Expenses
      description: Retrieve Expenses from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the expense you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingExpenseOutput'
      tags: *ref_41
      x-speakeasy-group: accounting.expenses
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingExpense
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.expenses.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingExpense
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Expenses.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingExpense
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_expenses.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_expense_output.nil?\n  # handle response\nend"
  /accounting/incomestatements:
    get:
      operationId: listAccountingIncomeStatement
      summary: List  IncomeStatements
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingIncomestatementOutput
      tags: &ref_42
        - accounting/incomestatements
      x-speakeasy-group: accounting.incomestatements
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingIncomeStatement
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Incomestatements.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_incomestatements.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/incomestatements/{id}:
    get:
      operationId: retrieveAccountingIncomeStatement
      summary: Retrieve Income Statements
      description: Retrieve Income Statements from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the incomestatement you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingIncomestatementOutput'
      tags: *ref_42
      x-speakeasy-group: accounting.incomestatements
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingIncomeStatement
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.incomestatements.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingIncomeStatement
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingIncomestatementOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingIncomeStatement
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_incomestatements.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_incomestatement_output.nil?\n  # handle response\nend"
  /accounting/invoices:
    get:
      operationId: listAccountingInvoice
      summary: List  Invoices
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: &ref_43
        - accounting/invoices
      x-speakeasy-group: accounting.invoices
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingInvoice
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Invoices.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingInvoice
      summary: Create Invoices
      description: Create invoices in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingInvoiceInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_43
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingInvoiceInput: {
                  type: "Sales",
                  number: "INV-001",
                  issueDate: new Date("2024-06-15T12:00:00Z"),
                  dueDate: new Date("2024-07-15T12:00:00Z"),
                  paidOnDate: new Date("2024-07-10T12:00:00Z"),
                  memo: "Payment for services rendered",
                  currency: "USD",
                  exchangeRate: "1.2",
                  totalDiscount: 1000,
                  subTotal: 10000,
                  status: "Paid",
                  totalTaxAmount: 1000,
                  totalAmount: 11000,
                  balance: 0,
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  accountingPeriodId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  trackingCategories: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  lineItems: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "report_item_1234",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingInvoice
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.create(x_connection_token="<value>", unified_accounting_invoice_input={
                "type": "Sales",
                "number": "INV-001",
                "issue_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "due_date": dateutil.parser.isoparse("2024-07-15T12:00:00Z"),
                "paid_on_date": dateutil.parser.isoparse("2024-07-10T12:00:00Z"),
                "memo": "Payment for services rendered",
                "currency": "USD",
                "exchange_rate": "1.2",
                "total_discount": 1000,
                "sub_total": 10000,
                "status": "Paid",
                "total_tax_amount": 1000,
                "total_amount": 11000,
                "balance": 0,
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Invoices.Create(ctx, "<value>", components.UnifiedAccountingInvoiceInput{
                    Type: gosdk.String("Sales"),
                    Number: gosdk.String("INV-001"),
                    IssueDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    DueDate: types.MustNewTimeFromString("2024-07-15T12:00:00Z"),
                    PaidOnDate: types.MustNewTimeFromString("2024-07-10T12:00:00Z"),
                    Memo: gosdk.String("Payment for services rendered"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TotalDiscount: gosdk.Float64(1000),
                    SubTotal: gosdk.Float64(10000),
                    Status: gosdk.String("Paid"),
                    TotalTaxAmount: gosdk.Float64(1000),
                    TotalAmount: gosdk.Float64(11000),
                    Balance: gosdk.Float64(0),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingInvoiceInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.create(x_connection_token=\"<value>\", unified_accounting_invoice_input=::OpenApiSDK::Shared::UnifiedAccountingInvoiceInput.new(\n  type: \"Sales\",\n  number: \"INV-001\",\n  issue_date: DateTime.iso8601('2024-06-15T12:00:00Z'),\n  due_date: DateTime.iso8601('2024-07-15T12:00:00Z'),\n  paid_on_date: DateTime.iso8601('2024-07-10T12:00:00Z'),\n  memo: \"Payment for services rendered\",\n  currency: \"USD\",\n  exchange_rate: \"1.2\",\n  total_discount: 1000.0,\n  sub_total: 10000.0,\n  status: \"Paid\",\n  total_tax_amount: 1000.0,\n  total_amount: 11000.0,\n  balance: 0.0,\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  accounting_period_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  tracking_categories: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  line_items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"report_item_1234\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingInvoiceInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/invoices/{id}:
    get:
      operationId: retrieveAccountingInvoice
      summary: Retrieve Invoices
      description: Retrieve Invoices from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the invoice you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingInvoiceOutput'
      tags: *ref_43
      x-speakeasy-group: accounting.invoices
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingInvoice
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.invoices.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingInvoice
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Invoices.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingInvoice
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_invoices.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_invoice_output.nil?\n  # handle response\nend"
  /accounting/items:
    get:
      operationId: listAccountingItem
      summary: List  Items
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: &ref_44
        - accounting/items
      x-speakeasy-group: accounting.items
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingItem
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Items.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_items.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/items/{id}:
    get:
      operationId: retrieveAccountingItem
      summary: Retrieve Items
      description: Retrieve Items from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the item you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingItemOutput'
      tags: *ref_44
      x-speakeasy-group: accounting.items
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingItem
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.items.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingItem
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Items.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingItemOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingItem
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_items.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_item_output.nil?\n  # handle response\nend"
  /accounting/journalentries:
    get:
      operationId: listAccountingJournalEntry
      summary: List  JournalEntrys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingJournalentryOutput
      tags: &ref_45
        - accounting/journalentries
      x-speakeasy-group: accounting.journalentries
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingJournalEntry
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Journalentries.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingJournalEntry
      summary: Create Journal Entries
      description: Create Journal Entries in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingJournalentryInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_45
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingJournalentryInput: {
                  transactionDate: new Date("2024-06-15T12:00:00Z"),
                  payments: [
                    "payment1",
                    "payment2",
                  ],
                  appliedPayments: [
                    "appliedPayment1",
                    "appliedPayment2",
                  ],
                  memo: "Monthly expense journal entry",
                  currency: "USD",
                  exchangeRate: "1.2",
                  idAccCompanyInfo: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  journalNumber: "JE-001",
                  trackingCategories: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  idAccAccountingPeriod: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  postingStatus: "Posted",
                  lineItems: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "report_item_1234",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingJournalEntry
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.create(x_connection_token="<value>", unified_accounting_journalentry_input={
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "payments": [
                    "payment1",
                    "payment2",
                ],
                "applied_payments": [
                    "appliedPayment1",
                    "appliedPayment2",
                ],
                "memo": "Monthly expense journal entry",
                "currency": "USD",
                "exchange_rate": "1.2",
                "id_acc_company_info": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "journal_number": "JE-001",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "id_acc_accounting_period": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "posting_status": "Posted",
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Create(ctx, "<value>", components.UnifiedAccountingJournalentryInput{
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    Payments: []string{
                        "payment1",
                        "payment2",
                    },
                    AppliedPayments: []string{
                        "appliedPayment1",
                        "appliedPayment2",
                    },
                    Memo: gosdk.String("Monthly expense journal entry"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    IDAccCompanyInfo: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    JournalNumber: gosdk.String("JE-001"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    IDAccAccountingPeriod: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    PostingStatus: gosdk.String("Posted"),
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingJournalentryInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.create(x_connection_token=\"<value>\", unified_accounting_journalentry_input=::OpenApiSDK::Shared::UnifiedAccountingJournalentryInput.new(\n  transaction_date: DateTime.iso8601('2024-06-15T12:00:00Z'),\n  payments: [\n    \"payment1\",\n    \"payment2\",\n  ],\n  applied_payments: [\n    \"appliedPayment1\",\n    \"appliedPayment2\",\n  ],\n  memo: \"Monthly expense journal entry\",\n  currency: \"USD\",\n  exchange_rate: \"1.2\",\n  id_acc_company_info: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  journal_number: \"JE-001\",\n  tracking_categories: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  id_acc_accounting_period: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  posting_status: \"Posted\",\n  line_items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"report_item_1234\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingJournalentryInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/journalentries/{id}:
    get:
      operationId: retrieveAccountingJournalEntry
      summary: Retrieve Journal Entries
      description: Retrieve Journal Entries from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the journalentry you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingJournalentryOutput'
      tags: *ref_45
      x-speakeasy-group: accounting.journalentries
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingJournalEntry
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.journalentries.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingJournalEntry
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingJournalEntry
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_journalentries.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_journalentry_output.nil?\n  # handle response\nend"
  /accounting/payments:
    get:
      operationId: listAccountingPayment
      summary: List  Payments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: &ref_46
        - accounting/payments
      x-speakeasy-group: accounting.payments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPayment
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Payments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPayment
      summary: Create Payments
      description: Create Payments in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPaymentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_46
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPaymentInput: {
                  invoiceId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  transactionDate: new Date("2024-06-15T12:00:00Z"),
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  currency: "USD",
                  exchangeRate: "1.2",
                  totalAmount: 10000,
                  type: "Credit Card",
                  companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  accountingPeriodId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  trackingCategories: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  lineItems: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "report_item_1234",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingPayment
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.create(x_connection_token="<value>", unified_accounting_payment_input={
                "invoice_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "transaction_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "contact_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "account_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "currency": "USD",
                "exchange_rate": "1.2",
                "total_amount": 10000,
                "type": "Credit Card",
                "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Payments.Create(ctx, "<value>", components.UnifiedAccountingPaymentInput{
                    InvoiceID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TransactionDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    ContactID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TotalAmount: gosdk.Float64(10000),
                    Type: gosdk.String("Credit Card"),
                    CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingPaymentInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.create(x_connection_token=\"<value>\", unified_accounting_payment_input=::OpenApiSDK::Shared::UnifiedAccountingPaymentInput.new(\n  invoice_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  transaction_date: DateTime.iso8601('2024-06-15T12:00:00Z'),\n  contact_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  account_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  currency: \"USD\",\n  exchange_rate: \"1.2\",\n  total_amount: 10000.0,\n  type: \"Credit Card\",\n  company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  accounting_period_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  tracking_categories: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  line_items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"report_item_1234\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingPaymentInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/payments/{id}:
    get:
      operationId: retrieveAccountingPayment
      summary: Retrieve Payments
      description: Retrieve Payments from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the payment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPaymentOutput'
      tags: *ref_46
      x-speakeasy-group: accounting.payments
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingPayment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.payments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPayment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Payments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPayment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_payments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_payment_output.nil?\n  # handle response\nend"
  /accounting/phonenumbers:
    get:
      operationId: listAccountingPhonenumber
      summary: List  PhoneNumbers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPhonenumberOutput
      tags: &ref_47
        - accounting/phonenumbers
      x-speakeasy-group: accounting.phonenumbers
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPhonenumber
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Phonenumbers.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_phonenumbers.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/phonenumbers/{id}:
    get:
      operationId: retrieveAccountingPhonenumber
      summary: Retrieve Phone Numbers
      description: Retrieve Phone Numbers from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the phonenumber you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPhonenumberOutput'
      tags: *ref_47
      x-speakeasy-group: accounting.phonenumbers
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingPhonenumber
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.phonenumbers.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPhonenumber
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPhonenumberOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPhonenumber
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_phonenumbers.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_phonenumber_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders:
    get:
      operationId: listAccountingPurchaseOrder
      summary: List  PurchaseOrders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingPurchaseorderOutput
      tags: &ref_48
        - accounting/purchaseorders
      x-speakeasy-group: accounting.purchaseorders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingPurchaseOrder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Purchaseorders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createAccountingPurchaseOrder
      summary: Create Purchase Orders
      description: Create Purchase Orders in any supported Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedAccountingPurchaseorderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_48
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPurchaseorderInput: {
                  status: "Pending",
                  issueDate: new Date("2024-06-15T12:00:00Z"),
                  purchaseOrderNumber: "PO-001",
                  deliveryDate: new Date("2024-07-15T12:00:00Z"),
                  deliveryAddress: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  customer: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  vendor: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  memo: "Purchase order for Q3 inventory",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  totalAmount: 100000,
                  currency: "USD",
                  exchangeRate: "1.2",
                  trackingCategories: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  accountingPeriodId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  lineItems: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "report_item_1234",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createAccountingPurchaseOrder
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.create(x_connection_token="<value>", unified_accounting_purchaseorder_input={
                "status": "Pending",
                "issue_date": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                "purchase_order_number": "PO-001",
                "delivery_date": dateutil.parser.isoparse("2024-07-15T12:00:00Z"),
                "delivery_address": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "customer": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "vendor": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "memo": "Purchase order for Q3 inventory",
                "company_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "total_amount": 100000,
                "currency": "USD",
                "exchange_rate": "1.2",
                "tracking_categories": [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                ],
                "accounting_period_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "line_items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "report_item_1234",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Create(ctx, "<value>", components.UnifiedAccountingPurchaseorderInput{
                    Status: gosdk.String("Pending"),
                    IssueDate: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                    PurchaseOrderNumber: gosdk.String("PO-001"),
                    DeliveryDate: types.MustNewTimeFromString("2024-07-15T12:00:00Z"),
                    DeliveryAddress: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Customer: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Vendor: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Memo: gosdk.String("Purchase order for Q3 inventory"),
                    CompanyID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TotalAmount: gosdk.Float64(100000),
                    Currency: gosdk.String("USD"),
                    ExchangeRate: gosdk.String("1.2"),
                    TrackingCategories: []string{
                        "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    },
                    AccountingPeriodID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    LineItems: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("report_item_1234"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedAccountingPurchaseorderInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.create(x_connection_token=\"<value>\", unified_accounting_purchaseorder_input=::OpenApiSDK::Shared::UnifiedAccountingPurchaseorderInput.new(\n  status: \"Pending\",\n  issue_date: DateTime.iso8601('2024-06-15T12:00:00Z'),\n  purchase_order_number: \"PO-001\",\n  delivery_date: DateTime.iso8601('2024-07-15T12:00:00Z'),\n  delivery_address: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  customer: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  vendor: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  memo: \"Purchase order for Q3 inventory\",\n  company_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  total_amount: 100000.0,\n  currency: \"USD\",\n  exchange_rate: \"1.2\",\n  tracking_categories: [\n    \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ],\n  accounting_period_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  line_items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"report_item_1234\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedAccountingPurchaseorderInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/purchaseorders/{id}:
    get:
      operationId: retrieveAccountingPurchaseOrder
      summary: Retrieve Purchase Orders
      description: Retrieve Purchase Orders from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the purchaseorder you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingPurchaseorderOutput'
      tags: *ref_48
      x-speakeasy-group: accounting.purchaseorders
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingPurchaseOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.purchaseorders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingPurchaseOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingPurchaseOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_purchaseorders.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_purchaseorder_output.nil?\n  # handle response\nend"
  /accounting/taxrates:
    get:
      operationId: listAccountingTaxRate
      summary: List  TaxRates
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: &ref_49
        - accounting/taxrates
      x-speakeasy-group: accounting.taxrates
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTaxRate
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Taxrates.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_taxrates.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/taxrates/{id}:
    get:
      operationId: retrieveAccountingTaxRate
      summary: Retrieve Tax Rates
      description: Retrieve Tax Rates from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the taxrate you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTaxrateOutput'
      tags: *ref_49
      x-speakeasy-group: accounting.taxrates
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingTaxRate
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.taxrates.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTaxRate
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Taxrates.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTaxrateOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTaxRate
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_taxrates.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_taxrate_output.nil?\n  # handle response\nend"
  /accounting/trackingcategories:
    get:
      operationId: listAccountingTrackingCategorys
      summary: List  TrackingCategorys
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTrackingcategoryOutput
      tags: &ref_50
        - accounting/trackingcategories
      x-speakeasy-group: accounting.trackingcategories
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingTrackingCategorys
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTrackingCategorys
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Trackingcategories.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTrackingCategorys
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_trackingcategories.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/trackingcategories/{id}:
    get:
      operationId: retrieveAccountingTrackingCategory
      summary: Retrieve Tracking Categories
      description: Retrieve Tracking Categories from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the trackingcategory you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTrackingcategoryOutput'
      tags: *ref_50
      x-speakeasy-group: accounting.trackingcategories
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingTrackingCategory
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.trackingcategories.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTrackingCategory
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTrackingcategoryOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTrackingCategory
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_trackingcategories.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_trackingcategory_output.nil?\n  # handle response\nend"
  /accounting/transactions:
    get:
      operationId: listAccountingTransaction
      summary: List  Transactions
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingTransactionOutput
      tags: &ref_51
        - accounting/transactions
      x-speakeasy-group: accounting.transactions
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingTransaction
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Transactions.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_transactions.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/transactions/{id}:
    get:
      operationId: retrieveAccountingTransaction
      summary: Retrieve Transactions
      description: Retrieve Transactions from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the transaction you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingTransactionOutput'
      tags: *ref_51
      x-speakeasy-group: accounting.transactions
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingTransaction
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.transactions.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingTransaction
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Transactions.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTransactionOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingTransaction
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_transactions.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_transaction_output.nil?\n  # handle response\nend"
  /accounting/vendorcredits:
    get:
      operationId: listAccountingVendorCredit
      summary: List  VendorCredits
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedAccountingVendorcreditOutput
      tags: &ref_52
        - accounting/vendorcredits
      x-speakeasy-group: accounting.vendorcredits
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listAccountingVendorCredit
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Accounting.Vendorcredits.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_vendorcredits.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /accounting/vendorcredits/{id}:
    get:
      operationId: retrieveAccountingVendorCredit
      summary: Retrieve Vendor Credits
      description: Retrieve Vendor Credits from any connected Accounting software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: id of the vendorcredit you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedAccountingVendorcreditOutput'
      tags: *ref_52
      x-speakeasy-group: accounting.vendorcredits
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveAccountingVendorCredit
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.accounting.vendorcredits.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveAccountingVendorCredit
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingVendorcreditOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveAccountingVendorCredit
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.accounting_vendorcredits.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_accounting_vendorcredit_output.nil?\n  # handle response\nend"
  /filestorage/folders:
    get:
      operationId: listFilestorageFolder
      summary: List  Folders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: &ref_53
        - filestorage/folders
      x-speakeasy-group: filestorage.folders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageFolder
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Folders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createFilestorageFolder
      summary: Create Folders
      description: Create Folders in any supported Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedFilestorageFolderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_53
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "school",
                  size: "2048",
                  folderUrl: "https://example.com/school",
                  description: "All things school related",
                  driveId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  parentFolderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.create(x_connection_token="<value>", unified_filestorage_folder_input={
                "name": "school",
                "size": "2048",
                "folder_url": "https://example.com/school",
                "description": "All things school related",
                "drive_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "parent_folder_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "shared_link": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "permission": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Folders.Create(ctx, "<value>", components.UnifiedFilestorageFolderInput{
                    Name: gosdk.String("school"),
                    Size: gosdk.String("2048"),
                    FolderURL: gosdk.String("https://example.com/school"),
                    Description: "All things school related",
                    DriveID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    ParentFolderID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    SharedLink: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Permission: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.create(x_connection_token=\"<value>\", unified_filestorage_folder_input=::OpenApiSDK::Shared::UnifiedFilestorageFolderInput.new(\n  name: \"school\",\n  size: \"2048\",\n  folder_url: \"https://example.com/school\",\n  description: \"All things school related\",\n  drive_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  parent_folder_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  shared_link: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/folders/{id}:
    get:
      operationId: retrieveFilestorageFolder
      summary: Retrieve Folders
      description: Retrieve Folders from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the folder you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageFolderOutput'
      tags: *ref_53
      x-speakeasy-group: filestorage.folders
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveFilestorageFolder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.folders.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageFolder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Folders.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageFolder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_folders.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_folder_output.nil?\n  # handle response\nend"
  /filestorage/groups:
    get:
      operationId: listFilestorageGroup
      summary: List  Groups
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: &ref_54
        - filestorage/groups
      x-speakeasy-group: filestorage.groups
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageGroup
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Groups.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_groups.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/groups/{id}:
    get:
      operationId: retrieveFilestorageGroup
      summary: Retrieve Groups
      description: Retrieve Groups from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageGroupOutput'
      tags: *ref_54
      x-speakeasy-group: filestorage.groups
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveFilestorageGroup
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.groups.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageGroup
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Groups.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageGroupOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageGroup
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_groups.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_group_output.nil?\n  # handle response\nend"
  /filestorage/users:
    get:
      operationId: listFilestorageUsers
      summary: List Users
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
      tags: &ref_55
        - filestorage/users
      x-speakeasy-group: filestorage.users
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listFilestorageUsers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listFilestorageUsers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Filestorage.Users.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listFilestorageUsers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_users.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /filestorage/users/{id}:
    get:
      operationId: retrieveFilestorageUser
      summary: Retrieve Users
      description: Retrieve Users from any connected Filestorage software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the permission you want to retrieve.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original File Storage software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
      tags: *ref_55
      x-speakeasy-group: filestorage.users
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveFilestorageUser
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.filestorage.users.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveFilestorageUser
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Filestorage.Users.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageUserOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveFilestorageUser
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.filestorage_users.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_filestorage_user_output.nil?\n  # handle response\nend"
  /ecommerce/products:
    get:
      operationId: listEcommerceProducts
      summary: List Products
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: &ref_56
        - ecommerce/products
      x-speakeasy-group: ecommerce.products
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceProducts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listEcommerceProducts
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceProducts
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Products.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceProducts
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createEcommerceProduct
      summary: Create Products
      description: Create Products in any supported Ecommerce software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedEcommerceProductInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: *ref_56
      x-speakeasy-group: ecommerce.products
      x-codeSamples:
        - lang: typescript
          label: createEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceProductInput: {
                  productUrl: "https://product_url/tee",
                  productType: "teeshirt",
                  productStatus: "ACTIVE",
                  imagesUrls: [
                    "https://myproduct/image",
                  ],
                  description: "best tee ever",
                  vendor: "vendor_extern",
                  variants: [
                    {},
                  ],
                  tags: [
                    "tag_1",
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.create(x_connection_token="<value>", unified_ecommerce_product_input={
                "product_url": "https://product_url/tee",
                "product_type": "teeshirt",
                "product_status": "ACTIVE",
                "images_urls": [
                    "https://myproduct/image",
                ],
                "description": "best tee ever",
                "vendor": "vendor_extern",
                "variants": [
                    {},
                ],
                "tags": [
                    "tag_1",
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Products.Create(ctx, "<value>", components.UnifiedEcommerceProductInput{
                    ProductURL: gosdk.String("https://product_url/tee"),
                    ProductType: gosdk.String("teeshirt"),
                    ProductStatus: gosdk.String("ACTIVE"),
                    ImagesUrls: []string{
                        "https://myproduct/image",
                    },
                    Description: gosdk.String("best tee ever"),
                    Vendor: gosdk.String("vendor_extern"),
                    Variants: []components.Variant{
                        components.Variant{},
                    },
                    Tags: []string{
                        "tag_1",
                    },
                    FieldMappings: &components.UnifiedEcommerceProductInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createEcommerceProduct
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.create(x_connection_token=\"<value>\", unified_ecommerce_product_input=::OpenApiSDK::Shared::UnifiedEcommerceProductInput.new(\n  product_url: \"https://product_url/tee\",\n  product_type: \"teeshirt\",\n  product_status: \"ACTIVE\",\n  images_urls: [\n    \"https://myproduct/image\",\n  ],\n  description: \"best tee ever\",\n  vendor: \"vendor_extern\",\n  variants: [\n    ::OpenApiSDK::Shared::Variant.new(),\n  ],\n  tags: [\n    \"tag_1\",\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedEcommerceProductInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_ecommerce_product_output.nil?\n  # handle response\nend"
  /ecommerce/products/{id}:
    get:
      operationId: retrieveEcommerceProduct
      summary: Retrieve Products
      description: Retrieve products from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the product you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceProductOutput'
      tags: *ref_56
      x-speakeasy-group: ecommerce.products
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveEcommerceProduct
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.products.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceProduct
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Products.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceProductOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceProduct
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_products.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.unified_ecommerce_product_output.nil?\n  # handle response\nend"
  /ecommerce/orders:
    get:
      operationId: listEcommerceOrders
      summary: List Orders
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: &ref_57
        - ecommerce/orders
      x-speakeasy-group: ecommerce.orders
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceOrders
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listEcommerceOrders
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceOrders
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Orders.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceOrders
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createEcommerceOrder
      summary: Create Orders
      description: Create Orders in any supported Ecommerce software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: false
          description: Set to true to include data from the original Accounting software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedEcommerceOrderInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: *ref_57
      x-speakeasy-group: ecommerce.orders
      x-codeSamples:
        - lang: typescript
          label: createEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceOrderInput: {
                  orderStatus: "UNSHIPPED",
                  orderNumber: "19823838833",
                  paymentStatus: "SUCCESS",
                  currency: "AUD",
                  totalPrice: 300,
                  totalDiscount: 10,
                  totalShipping: 120,
                  totalTax: 120,
                  fulfillmentStatus: "PENDING",
                  customerId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  items: [
                    {
                      name: "Net Income",
                      value: 100000,
                      type: "Operating Activities",
                      parentItem: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      remoteId: "12345",
                      remoteGeneratedAt: new Date("2024-07-01T12:00:00Z"),
                      companyInfoId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                      createdAt: new Date("2024-06-15T12:00:00Z"),
                      modifiedAt: new Date("2024-06-15T12:00:00Z"),
                    },
                  ],
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createEcommerceOrder
          source: |-
            import dateutil.parser
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.create(x_connection_token="<value>", unified_ecommerce_order_input={
                "order_status": "UNSHIPPED",
                "order_number": "19823838833",
                "payment_status": "SUCCESS",
                "currency": "AUD",
                "total_price": 300,
                "total_discount": 10,
                "total_shipping": 120,
                "total_tax": 120,
                "fulfillment_status": "PENDING",
                "customer_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "items": [
                    {
                        "name": "Net Income",
                        "value": 100000,
                        "type": "Operating Activities",
                        "parent_item": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "remote_id": "12345",
                        "remote_generated_at": dateutil.parser.isoparse("2024-07-01T12:00:00Z"),
                        "company_info_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                        "created_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                        "modified_at": dateutil.parser.isoparse("2024-06-15T12:00:00Z"),
                    },
                ],
                "field_mappings": {},
            }, remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/types"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Create(ctx, "<value>", components.UnifiedEcommerceOrderInput{
                    OrderStatus: gosdk.String("UNSHIPPED"),
                    OrderNumber: gosdk.String("19823838833"),
                    PaymentStatus: gosdk.String("SUCCESS"),
                    Currency: gosdk.String("AUD"),
                    TotalPrice: gosdk.Float64(300),
                    TotalDiscount: gosdk.Float64(10),
                    TotalShipping: gosdk.Float64(120),
                    TotalTax: gosdk.Float64(120),
                    FulfillmentStatus: gosdk.String("PENDING"),
                    CustomerID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    Items: []components.LineItem{
                        components.LineItem{
                            Name: gosdk.String("Net Income"),
                            Value: gosdk.Float64(100000),
                            Type: gosdk.String("Operating Activities"),
                            ParentItem: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            RemoteID: gosdk.String("12345"),
                            RemoteGeneratedAt: types.MustNewTimeFromString("2024-07-01T12:00:00Z"),
                            CompanyInfoID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                            CreatedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                            ModifiedAt: types.MustNewTimeFromString("2024-06-15T12:00:00Z"),
                        },
                    },
                    FieldMappings: &components.UnifiedEcommerceOrderInputFieldMappings{},
                }, gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createEcommerceOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.create(x_connection_token=\"<value>\", unified_ecommerce_order_input=::OpenApiSDK::Shared::UnifiedEcommerceOrderInput.new(\n  order_status: \"UNSHIPPED\",\n  order_number: \"19823838833\",\n  payment_status: \"SUCCESS\",\n  currency: \"AUD\",\n  total_price: 300.0,\n  total_discount: 10.0,\n  total_shipping: 120.0,\n  total_tax: 120.0,\n  fulfillment_status: \"PENDING\",\n  customer_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  items: [\n    ::OpenApiSDK::Shared::LineItem.new(\n      name: \"Net Income\",\n      value: 100000.0,\n      type: \"Operating Activities\",\n      parent_item: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remote_id: \"12345\",\n      remote_generated_at: DateTime.iso8601('2024-07-01T12:00:00Z'),\n      company_info_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      created_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n      modified_at: DateTime.iso8601('2024-06-15T12:00:00Z'),\n    ),\n  ],\n  field_mappings: ::OpenApiSDK::Shared::UnifiedEcommerceOrderInputFieldMappings.new(),\n), remote_data=false)\n\nif ! res.unified_ecommerce_order_output.nil?\n  # handle response\nend"
  /ecommerce/orders/{id}:
    get:
      operationId: retrieveEcommerceOrder
      summary: Retrieve Orders
      description: Retrieve orders from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the order you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceOrderOutput'
      tags: *ref_57
      x-speakeasy-group: ecommerce.orders
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveEcommerceOrder
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.orders.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceOrder
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Orders.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceOrderOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceOrder
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_orders.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.unified_ecommerce_order_output.nil?\n  # handle response\nend"
  /ecommerce/customers:
    get:
      operationId: listEcommerceCustomers
      summary: List Customers
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnifiedEcommerceCustomerOutput'
      tags: &ref_58
        - ecommerce/customers
      x-speakeasy-group: ecommerce.customers
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceCustomers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listEcommerceCustomers
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceCustomers
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Customers.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceCustomers
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_customers.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ecommerce/customers/{id}:
    get:
      operationId: retrieveEcommerceCustomer
      summary: Retrieve Customers
      description: Retrieve customers from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the customer you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceCustomerOutput'
      tags: *ref_58
      x-speakeasy-group: ecommerce.customers
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceCustomer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveEcommerceCustomer
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.customers.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceCustomer
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Customers.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceCustomerOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceCustomer
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_customers.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.unified_ecommerce_customer_output.nil?\n  # handle response\nend"
  /ecommerce/fulfillments:
    get:
      operationId: listEcommerceFulfillments
      summary: List Fulfillments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedEcommerceFulfillmentOutput
      tags: &ref_59
        - ecommerce/fulfillments
      x-speakeasy-group: ecommerce.fulfillments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listEcommerceFulfillments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listEcommerceFulfillments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listEcommerceFulfillments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ecommerce.Fulfillments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listEcommerceFulfillments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_fulfillments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
  /ecommerce/fulfillments/{id}:
    get:
      operationId: retrieveEcommerceFulfillment
      summary: Retrieve Fulfillments
      description: Retrieve fulfillments from any connected Ats software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the fulfillment you want to retrieve.
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ats software.
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedEcommerceFulfillmentOutput'
      tags: *ref_59
      x-speakeasy-group: ecommerce.fulfillments
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceFulfillment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveEcommerceFulfillment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ecommerce.fulfillments.retrieve(x_connection_token="<value>", id="<value>")

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveEcommerceFulfillment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ecommerce.Fulfillments.Retrieve(ctx, "<value>", "<id>", nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedEcommerceFulfillmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveEcommerceFulfillment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ecommerce_fulfillments.retrieve(x_connection_token=\"<value>\", id=\"<id>\", remote_data=false)\n\nif ! res.unified_ecommerce_fulfillment_output.nil?\n  # handle response\nend"
  /ticketing/attachments:
    get:
      operationId: listTicketingAttachments
      summary: List  Attachments
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          example: true
          description: Set to true to include data from the original software.
          schema:
            type: boolean
        - name: limit
          required: false
          in: query
          example: 10
          description: Set to get the number of records.
          schema:
            type: number
        - name: cursor
          required: false
          in: query
          example: 1b8b05bb-5273-4012-b520-8657b0b90874
          description: Set to get the number of records after this cursor.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedDto'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: >-
                            #/components/schemas/UnifiedTicketingAttachmentOutput
      tags: &ref_60
        - ticketing/attachments
      x-speakeasy-group: ticketing.attachments
      x-speakeasy-pagination:
        type: cursor
        inputs:
          - name: cursor
            in: parameters
            type: cursor
        outputs:
          nextCursor: $.next_cursor
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // Handle the page
                console.log(page);
              }
            }

            run();
        - lang: python
          label: listTicketingAttachments
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.list(x_connection_token="<value>", remote_data=True, limit=10, cursor="1b8b05bb-5273-4012-b520-8657b0b90874")

            if res is not None:
                while True:
                    # handle items

                    res = res.Next()
                    if res is None:
                        break
        - lang: go
          label: listTicketingAttachments
          source: "package main\n\nimport(\n\tgosdk \"github.com/panoratech/go-sdk\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := gosdk.New(\n        gosdk.WithSecurity(\"<YOUR_API_KEY_HERE>\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Ticketing.Attachments.List(ctx, \"<value>\", gosdk.Bool(true), gosdk.Float64(10), gosdk.String(\"1b8b05bb-5273-4012-b520-8657b0b90874\"))\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Object != nil {\n                for {\n            // handle items\n        \n            res, err = res.Next()\n        \n            if err != nil {\n                // handle error\n            }\n        \n            if res == nil {\n                break\n            }\n        }\n        \n    }\n}"
        - lang: ruby
          label: listTicketingAttachments
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.list(x_connection_token=\"<value>\", remote_data=true, limit=10.0, cursor=\"1b8b05bb-5273-4012-b520-8657b0b90874\")\n\nif ! res.object.nil?\n  # handle response\nend"
    post:
      operationId: createTicketingAttachment
      summary: Create Attachments
      description: Create Attachments in any supported Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_60
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "features_planning.pdf",
                  fileUrl: "https://example.com/features_planning.pdf",
                  uploader: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  commentId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: createTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.create(x_connection_token="<value>", unified_ticketing_attachment_input={
                "file_name": "features_planning.pdf",
                "file_url": "https://example.com/features_planning.pdf",
                "uploader": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "ticket_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "comment_id": "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                "field_mappings": {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                },
            })

            if res is not None:
                # handle response
                pass
        - lang: go
          label: createTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"github.com/panoratech/go-sdk/models/components"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Create(ctx, "<value>", components.UnifiedTicketingAttachmentInput{
                    FileName: gosdk.String("features_planning.pdf"),
                    FileURL: gosdk.String("https://example.com/features_planning.pdf"),
                    Uploader: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    TicketID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    CommentID: gosdk.String("801f9ede-c698-4e66-a7fc-48d19eebaa4f"),
                    FieldMappings: map[string]any{
                        "fav_dish": "broccoli",
                        "fav_color": "red",
                    },
                }, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: createTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.create(x_connection_token=\"<value>\", unified_ticketing_attachment_input=::OpenApiSDK::Shared::UnifiedTicketingAttachmentInput.new(\n  file_name: \"features_planning.pdf\",\n  file_url: \"https://example.com/features_planning.pdf\",\n  uploader: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  ticket_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  comment_id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  field_mappings: {\n    \"fav_dish\": \"broccoli\",\n    \"fav_color\": \"red\",\n  },\n), remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
  /ticketing/attachments/{id}:
    get:
      operationId: retrieveTicketingAttachment
      summary: Retrieve Attachments
      description: Retrieve Attachments from any connected Ticketing software
      parameters:
        - name: x-connection-token
          required: true
          in: header
          description: The connection token
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: id of the attachment you want to retrive.
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          schema:
            type: string
        - name: remote_data
          required: false
          in: query
          description: Set to true to include data from the original Ticketing software.
          example: false
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
      tags: *ref_60
      x-speakeasy-group: ticketing.attachments
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: python
          label: retrieveTicketingAttachment
          source: |-
            from panora_sdk import Panora

            s = Panora(
                api_key="<YOUR_API_KEY_HERE>",
            )


            res = s.ticketing.attachments.retrieve(x_connection_token="<value>", id="801f9ede-c698-4e66-a7fc-48d19eebaa4f", remote_data=False)

            if res is not None:
                # handle response
                pass
        - lang: go
          label: retrieveTicketingAttachment
          source: |-
            package main

            import(
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity("<YOUR_API_KEY_HERE>"),
                )

                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Retrieve(ctx, "<value>", "801f9ede-c698-4e66-a7fc-48d19eebaa4f", gosdk.Bool(false))
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
        - lang: ruby
          label: retrieveTicketingAttachment
          source: "require 'panora'\n\n\ns = ::OpenApiSDK::Panora.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    api_key: \"<YOUR_API_KEY_HERE>\",\n  )\n)\n\n    \nres = s.ticketing_attachments.retrieve(x_connection_token=\"<value>\", id=\"801f9ede-c698-4e66-a7fc-48d19eebaa4f\", remote_data=false)\n\nif ! res.unified_ticketing_attachment_output.nil?\n  # handle response\nend"
info:
  title: Panora API
  description: A unified API to ship integrations
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: https://api.panora.dev
    description: Production server
  - url: https://api-sandbox.panora.dev
    description: Sandbox server
  - url: https://api-dev.panora.dev
    description: Development server
components:
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    RagQueryOutput:
      type: object
      properties:
        chunk:
          type: string
          example: 'Date : 06/07/2023'
          nullable: false
          description: The chunk which matches the embed query
        metadata:
          type: object
          example:
            blobType: ''
            text: ATTESTATION
          additionalProperties: true
          nullable: true
          description: The metadata tied to the chunk
        score:
          type: number
          example: 0.87
          nullable: true
          description: The score
        embedding:
          example:
            - -0.00442447886
            - -0.00116857514
            - 0.00869117491
            - -0.0361584462
            - -0.00220073434
            - 0.00946036354
            - -0.0101112155
          nullable: true
          description: The embedding of the relevant chunk
          type: array
          items:
            type: number
      required:
        - chunk
        - metadata
        - score
        - embedding
    QueryBody:
      type: object
      properties:
        query:
          type: string
          example: When does Panora incorporated?
          nullable: false
          description: The query you want to received embeddings and chunks for
        topK:
          type: number
          example: '3'
          nullable: true
          description: The number of most appropriate documents for your query.
      required:
        - query
    PaginatedDto:
      type: object
      properties:
        prev_cursor:
          type: string
          nullable: true
        next_cursor:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: object
      required:
        - prev_cursor
        - next_cursor
        - data
    UnifiedFilestorageFileOutput:
      type: object
      properties:
        name:
          type: string
          example: my_paris_photo.png
          description: The name of the file
          nullable: true
        file_url:
          type: string
          example: https://example.com/my_paris_photo.png
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          example: application/pdf
          description: The mime type of the file
          nullable: true
        size:
          type: string
          example: '1024'
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          example: &ref_61
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the file
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the file in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the file in the context of the 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    UnifiedFilestorageFileInput:
      type: object
      properties:
        name:
          type: string
          example: my_paris_photo.png
          description: The name of the file
          nullable: true
        file_url:
          type: string
          example: https://example.com/my_paris_photo.png
          description: The url of the file
          nullable: true
        mime_type:
          type: string
          example: application/pdf
          description: The mime type of the file
          nullable: true
        size:
          type: string
          example: '1024'
          description: The size of the file
          nullable: true
        folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the folder tied to the file
          nullable: true
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the permission tied to the file
          nullable: true
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the shared link tied to the file
          nullable: true
        field_mappings:
          type: object
          example: *ref_61
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
        - file_url
        - mime_type
        - size
        - folder_id
        - permission
        - shared_link
    LoginDto:
      type: object
      properties:
        id_user:
          type: string
        email:
          type: string
        password_hash:
          type: string
      required:
        - id_user
        - email
        - password_hash
    Connection:
      type: object
      properties:
        id_connection:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the connection
        status:
          type: string
          example: active
          description: Status of the connection
        provider_slug:
          type: string
          example: hubspot
          description: Slug for the provider
        vertical:
          type: string
          example: crm
          description: Vertical category of the connection
        account_url:
          type: string
          example: https://example.com/account
          description: URL of the account
        token_type:
          type: string
          example: oauth2
          enum:
            - oauth2
            - apikey
            - basic
          description: Strategy type
        access_token:
          type: string
          example: access_token_example
          description: Access token for the connection
        refresh_token:
          type: string
          example: refresh_token_example
          description: Refresh token for the connection
        expiration_timestamp:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Expiration timestamp of the access token
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Timestamp when the connection was created
        connection_token:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UUID Token for the connection
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: Project ID associated with the connection
        id_linked_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Linked user ID associated with the connection
      required:
        - id_connection
        - status
        - provider_slug
        - vertical
        - account_url
        - token_type
        - access_token
        - refresh_token
        - expiration_timestamp
        - created_at
        - connection_token
        - id_project
        - id_linked_user
    WebhookResponse:
      type: object
      properties:
        id_webhook_endpoint:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The unique UUID of the webhook.
        endpoint_description:
          type: string
          example: Webhook to receive connection events
          nullable: true
          description: The description of the webhook.
        url:
          type: string
          example: https://acme.com/webhook_receiver
          nullable: true
          description: The endpoint url of the webhook.
        secret:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The secret of the webhook.
        active:
          type: boolean
          example: true
          nullable: true
          description: The status of the webhook.
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the webhook.
          nullable: true
        scope:
          example:
            - connection.created
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
        id_project:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The project id tied to the webhook.
        last_update:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The last update date of the webhook.
      required:
        - id_webhook_endpoint
        - endpoint_description
        - url
        - secret
        - active
        - created_at
        - scope
        - id_project
        - last_update
    WebhookDto:
      type: object
      properties:
        url:
          type: string
          example: https://acme.com/webhook_receiver
          nullable: true
          description: The endpoint url of the webhook.
        description:
          type: string
          example: Webhook to receive connection events
          nullable: true
          description: The description of the webhook.
        scope:
          example:
            - connection.created
          nullable: true
          description: The events that the webhook listen to.
          type: array
          items:
            type: string
      required:
        - url
        - description
        - scope
    SignatureVerificationDto:
      type: object
      properties:
        payload:
          type: object
          additionalProperties: true
          nullable: true
          description: The payload event of the webhook.
        signature:
          type: string
          nullable: true
          description: The signature of the webhook.
        secret:
          type: string
          nullable: true
          description: The secret of the webhook.
      required:
        - payload
        - signature
        - secret
    UnifiedTicketingCommentInput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          example: Assigned to Eric !
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          example: <p>Assigned to Eric !</p>
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          example: false
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          example: USER
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          type: array
          items: &ref_84
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingAttachmentOutput'
          nullable: true
          example: &ref_85
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attachements UUIDs tied to the comment
      required:
        - body
    UnifiedTicketingTicketOutput:
      type: object
      properties:
        name:
          type: string
          example: Customer Service Inquiry
          nullable: true
          description: The name of the ticket
        status:
          type: string
          example: OPEN
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          example: Help customer
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          example: BUG
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: array
          items: &ref_62
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingCollectionOutput'
          example: &ref_63
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          type: array
          items: &ref_64
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingTagOutput'
          example: &ref_65
            - my_tag
            - urgent_tag
          nullable: true
          description: The tags names of the ticket
        completed_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          example: HIGH
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          example: &ref_66
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          example: &ref_67
            content: Assigned the issue !
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          type: array
          items: &ref_68
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedTicketingAttachmentInput'
          example: &ref_69
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attachements UUIDs tied to the ticket
          nullable: true
        field_mappings:
          type: object
          example: &ref_70
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the ticket
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the ticket in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the ticket in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - description
    UnifiedTicketingTicketInput:
      type: object
      properties:
        name:
          type: string
          example: Customer Service Inquiry
          nullable: true
          description: The name of the ticket
        status:
          type: string
          example: OPEN
          nullable: true
          description: The status of the ticket. Authorized values are OPEN or CLOSED.
        description:
          type: string
          example: Help customer
          nullable: true
          description: The description of the ticket
        due_date:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket is due
        type:
          type: string
          example: BUG
          nullable: true
          description: >-
            The type of the ticket. Authorized values are PROBLEM, QUESTION, or TASK
        parent_ticket:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent ticket
        collections:
          type: array
          items: *ref_62
          example: *ref_63
          nullable: true
          description: The collection UUIDs the ticket belongs to
        tags:
          type: array
          items: *ref_64
          example: *ref_65
          nullable: true
          description: The tags names of the ticket
        completed_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The date the ticket has been completed
        priority:
          type: string
          example: HIGH
          nullable: true
          description: >-
            The priority of the ticket. Authorized values are HIGH, MEDIUM or LOW.
        assigned_to:
          example: *ref_66
          nullable: true
          description: The users UUIDs the ticket is assigned to
          type: array
          items:
            type: string
        comment:
          example: *ref_67
          nullable: true
          description: The comment of the ticket
          allOf:
            - $ref: '#/components/schemas/UnifiedTicketingCommentInput'
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account which the ticket belongs to
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the contact which the ticket belongs to
        attachments:
          type: array
          items: *ref_68
          example: *ref_69
          description: The attachements UUIDs tied to the ticket
          nullable: true
        field_mappings:
          type: object
          example: *ref_70
          nullable: true
          description: >-
            The custom field mappings of the ticket between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
    UnifiedTicketingUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the user
          example: John Doe
        email_address:
          type: string
          nullable: true
          description: The email address of the user
          example: john.doe@example.com
        teams:
          nullable: true
          description: The teams whose the user is part of
          example:
            - team1
            - team2
          type: array
          items:
            type: string
        account_id:
          type: string
          nullable: true
          description: The account or organization the user is part of
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the user
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          nullable: true
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2023-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
    UnifiedTicketingAccountOutput:
      type: object
      properties:
        name:
          type: string
          example: My Personal Account
          nullable: true
          description: The name of the account
        domains:
          example:
            - acme.com
            - acme-test.com
          nullable: true
          description: The domains of the account
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the account between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the account in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the account in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the account
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the account
          nullable: true
      required:
        - name
    UnifiedTicketingContactOutput:
      type: object
      properties:
        name:
          type: string
          example: Joe
          nullable: true
          description: The name of the contact
        email_address:
          type: string
          example: joedoe@acme.org
          nullable: true
          description: The email address of the contact
        phone_number:
          type: string
          example: +33 6 50 11 11 10
          nullable: true
          description: The phone number of the contact
        details:
          type: string
          example: Contact Details
          nullable: true
          description: The details of the contact
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the contact in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - email_address
    ResyncStatusDto:
      type: object
      properties:
        timestamp:
          format: date-time
          type: string
          example: ''
          nullable: true
        vertical:
          type: string
          example: ticketing
          enum:
            - ticketing
            - accounting
            - crm
            - filestorage
            - ecommerce
            - marketingautomation
          nullable: true
        provider:
          type: string
          example: gitlab
          nullable: true
        status:
          type: string
          example: success
          enum:
            - success
            - fail
          nullable: true
      required:
        - timestamp
        - vertical
        - provider
        - status
    UpdatePullFrequencyDto:
      type: object
      properties:
        crm:
          type: number
          example: 1800
          description: Frequency in seconds
        accounting:
          type: number
          example: 14400
          description: Frequency in seconds
        filestorage:
          type: number
          example: 28800
          description: Frequency in seconds
        ecommerce:
          type: number
          example: 43200
          description: Frequency in seconds
        ticketing:
          type: number
          example: 86400
          description: Frequency in seconds
      required:
        - crm
        - accounting
        - filestorage
        - ecommerce
        - ticketing
    Email:
      type: object
      properties:
        email_address:
          type: string
          nullable: true
          description: The email address
        email_address_type:
          type: string
          nullable: true
          description: >-
            The email address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          enum:
            - COMPANY
            - CONTACT
          nullable: true
          description: The owner type of an email
      required:
        - email_address
        - email_address_type
    Address:
      type: object
      properties:
        street_1:
          type: string
          nullable: true
          example: 5th Avenue
          description: The street
        street_2:
          type: string
          nullable: true
          example: Street 2
          description: 'More information about the street '
        city:
          type: string
          nullable: true
          example: New York
          description: The city
        state:
          type: string
          example: New York
          nullable: true
          description: The state
        postal_code:
          type: string
          example: '10001'
          nullable: true
          description: The postal code
        country:
          type: string
          example: United States of America
          nullable: true
          description: The country
        address_type:
          type: string
          nullable: true
          example: PERSONAL
          description: The address type. Authorized values are either PERSONAL or WORK.
        owner_type:
          type: string
          nullable: true
          description: The owner type of the address
      required:
        - street_1
        - street_2
        - city
        - state
        - postal_code
        - country
        - address_type
        - owner_type
    Phone:
      type: object
      properties:
        phone_number:
          type: string
          nullable: true
          description: >-
            The phone number starting with a plus (+) followed by the country code (e.g +336676778890 for France)
        phone_type:
          type: string
          nullable: true
          description: The phone type. Authorized values are either MOBILE or WORK
        owner_type:
          type: string
          nullable: true
          description: The owner type of a phone number
      required:
        - phone_number
        - phone_type
    UnifiedCrmCompanyOutput:
      type: object
      properties:
        name:
          type: string
          example: Acme
          description: The name of the company
          nullable: true
        industry:
          type: string
          example: ACCOUNTING
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          example: 10
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          example: &ref_71
            - email_address: acme@gmail.com
              email_address_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          example: &ref_72
            - street_1: 5th Avenue
              city: New York
              state: NY
              country: USA
              address_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          example: &ref_73
            - phone_number: '+33660606067'
              phone_type: WORK
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          example: &ref_74
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          description: The UUID of the company
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the company in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the company in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
    UnifiedCrmCompanyInput:
      type: object
      properties:
        name:
          type: string
          example: Acme
          description: The name of the company
          nullable: true
        industry:
          type: string
          example: ACCOUNTING
          description: >-
            The industry of the company. Authorized values can be found in the Industry enum.
          nullable: true
        number_of_employees:
          type: number
          example: 10
          description: The number of employees of the company
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who owns the company
          nullable: true
        email_addresses:
          description: The email addresses of the company
          example: *ref_71
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Email'
        addresses:
          description: The addresses of the company
          example: *ref_72
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        phone_numbers:
          description: The phone numbers of the company
          example: *ref_73
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        field_mappings:
          type: object
          example: *ref_74
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - name
    UnifiedCrmContactOutput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
          example: John
          nullable: true
        last_name:
          type: string
          description: The last name of the contact
          example: Doe
          nullable: true
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          example: &ref_75
            - email: john.doe@example.com
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          example: &ref_76
            - phone: '1234567890'
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          example: &ref_77
            - street: 123 Main St
              city: Anytown
              state: CA
              zip: '12345'
              country: USA
              type: WORK
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: &ref_78
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          description: The UUID of the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the contact in the context of the Crm 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the contact in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - first_name
        - last_name
    UnifiedCrmContactInput:
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the contact
          example: John
          nullable: true
        last_name:
          type: string
          description: The last name of the contact
          example: Doe
          nullable: true
        email_addresses:
          nullable: true
          description: The email addresses of the contact
          example: *ref_75
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phone_numbers:
          nullable: true
          description: The phone numbers of the contact
          example: *ref_76
          type: array
          items:
            $ref: '#/components/schemas/Phone'
        addresses:
          nullable: true
          description: The addresses of the contact
          example: *ref_77
          type: array
          items:
            $ref: '#/components/schemas/Address'
        user_id:
          type: string
          nullable: true
          description: The UUID of the user who owns the contact
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
        field_mappings:
          type: object
          example: *ref_78
          nullable: true
          description: >-
            The custom field mappings of the contact between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - first_name
        - last_name
    UnifiedCrmDealOutput:
      type: object
      properties:
        name:
          type: string
          example: Huge Contract with Acme
          description: The name of the deal
          nullable: true
        description:
          type: string
          example: Contract with Sales Operations Team
          description: The description of the deal
          nullable: true
        amount:
          type: number
          example: 1000
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          example: &ref_79
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the deal in the context of the Crm 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the deal in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - name
        - description
        - amount
    UnifiedCrmDealInput:
      type: object
      properties:
        name:
          type: string
          example: Huge Contract with Acme
          description: The name of the deal
          nullable: true
        description:
          type: string
          example: Contract with Sales Operations Team
          description: The description of the deal
          nullable: true
        amount:
          type: number
          example: 1000
          description: The amount of the deal
          nullable: true
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user who is on the deal
        stage_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage of the deal
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the deal
        field_mappings:
          type: object
          nullable: true
          example: *ref_79
          description: >-
            The custom field mappings of the company between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - name
        - description
        - amount
    UnifiedCrmEngagementOutput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          example: Meeting call with CTO
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          example: INBOUND
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          example: Technical features planning
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T22:00:00Z'
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          example: MEETING
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          example: &ref_80
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          example: &ref_81
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the engagement
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the engagement in the context of the Crm 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The remote data of the engagement in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - type
    UnifiedCrmEngagementInput:
      type: object
      properties:
        content:
          type: string
          nullable: true
          example: Meeting call with CTO
          description: The content of the engagement
        direction:
          type: string
          nullable: true
          example: INBOUND
          description: >-
            The direction of the engagement. Authorized values are INBOUND or OUTBOUND
        subject:
          type: string
          example: Technical features planning
          nullable: true
          description: The subject of the engagement
        start_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The start time of the engagement
        end_time:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T22:00:00Z'
          description: The end time of the engagement
        type:
          type: string
          nullable: true
          example: MEETING
          description: >-
            The type of the engagement. Authorized values are EMAIL, CALL or MEETING
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the engagement
        company_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the engagement
        contacts:
          nullable: true
          example: *ref_80
          description: The UUIDs of contacts tied to the engagement object
          type: array
          items:
            type: string
        field_mappings:
          type: object
          nullable: true
          example: *ref_81
          description: >-
            The custom field mappings of the engagement between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - type
    UnifiedCrmNoteOutput:
      type: object
      properties:
        content:
          type: string
          example: My notes taken during the meeting
          description: The content of the note
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the note
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact tied to the note
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          example: &ref_82
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the note
        remote_id:
          type: string
          example: id_1
          description: The ID of the note in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the note in the context of the Crm 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - content
    UnifiedCrmNoteInput:
      type: object
      properties:
        content:
          type: string
          example: My notes taken during the meeting
          description: The content of the note
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the note
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company tied to the note
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the contact tied to the note
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the deal tied to the note
        field_mappings:
          type: object
          example: *ref_82
          nullable: true
          description: >-
            The custom field mappings of the note between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - content
    UnifiedCrmStageOutput:
      type: object
      properties:
        stage_name:
          type: string
          example: Qualified
          description: The name of the stage
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the stage between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the stage
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The ID of the stage in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the stage in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          type: object
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - stage_name
    UnifiedCrmTaskOutput:
      type: object
      properties:
        subject:
          type: string
          example: Answer customers
          description: The subject of the task
          nullable: true
        content:
          type: string
          example: Prepare email campaign
          description: The content of the task
          nullable: true
        status:
          type: string
          example: PENDING
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The due date of the task
          nullable: true
        finished_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          example: &ref_83
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the task
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The ID of the task in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            key1: value1
            key2: 42
            key3: true
          description: The remote data of the task in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - subject
        - content
        - status
    UnifiedCrmTaskInput:
      type: object
      properties:
        subject:
          type: string
          example: Answer customers
          description: The subject of the task
          nullable: true
        content:
          type: string
          example: Prepare email campaign
          description: The content of the task
          nullable: true
        status:
          type: string
          example: PENDING
          description: The status of the task. Authorized values are PENDING, COMPLETED.
          nullable: true
        due_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The due date of the task
          nullable: true
        finished_date:
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The finished date of the task
          nullable: true
        user_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user tied to the task
          nullable: true
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the company tied to the task
          nullable: true
        deal_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the deal tied to the task
          nullable: true
        field_mappings:
          type: object
          example: *ref_83
          description: >-
            The custom field mappings of the task between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
      required:
        - subject
        - content
        - status
    UnifiedCrmUserOutput:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
          description: The name of the user
          nullable: true
        email:
          type: string
          example: jane.doe@example.com
          description: The email of the user
          nullable: true
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the user between the remote 3rd party & Panora
          nullable: true
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user
          nullable: true
        remote_id:
          type: string
          example: id_1
          description: The id of the user in the context of the Crm 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          description: The remote data of the user in the context of the Crm 3rd Party
          nullable: true
          additionalProperties: true
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
          nullable: true
      required:
        - name
        - email
    UnifiedTicketingCollectionOutput:
      type: object
      properties:
        name:
          type: string
          example: My Personal Collection
          nullable: true
          description: The name of the collection
        description:
          type: string
          example: Collect issues
          nullable: true
          description: The description of the collection
        collection_type:
          type: string
          example: PROJECT
          nullable: true
          description: "The type of the collection. Authorized values are either PROJECT or LIST "
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the collection
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the collection in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the collection in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
    UnifiedTicketingCommentOutput:
      type: object
      properties:
        body:
          type: string
          nullable: true
          example: Assigned to Eric !
          description: The body of the comment
        html_body:
          type: string
          nullable: true
          example: <p>Assigned to Eric !</p>
          description: The html body of the comment
        is_private:
          type: boolean
          nullable: true
          example: false
          description: The public status of the comment
        creator_type:
          type: string
          nullable: true
          example: USER
          description: >-
            The creator type of the comment. Authorized values are either USER or CONTACT
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the comment is tied to
        contact_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the contact which the comment belongs to (if no user_id specified)
        user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: >-
            The UUID of the user which the comment belongs to (if no contact_id specified)
        attachments:
          type: array
          items: *ref_84
          nullable: true
          example: *ref_85
          description: The attachements UUIDs tied to the comment
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the comment in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the comment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - body
    UnifiedTicketingTagOutput:
      type: object
      properties:
        name:
          type: string
          example: urgent_tag
          nullable: true
          description: The name of the tag
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the tag between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the tag
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the tag in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the tag in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the tag
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the tag
          nullable: true
      required:
        - name
    UnifiedTicketingTeamOutput:
      type: object
      properties:
        name:
          type: string
          example: My team
          nullable: true
          description: The name of the team
        description:
          type: string
          example: Internal members
          nullable: true
          description: The description of the team
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the team between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the team
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the team in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the team in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
    LinkedUserResponse:
      type: object
      properties:
        id_linked_user:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
        linked_user_origin_id:
          type: string
          example: id_1
          nullable: true
        alias:
          type: string
          example: acme
          nullable: true
        id_project:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
      required:
        - id_linked_user
        - linked_user_origin_id
        - alias
        - id_project
    CreateLinkedUserDto:
      type: object
      properties:
        linked_user_origin_id:
          type: string
          description: The id of the user in the context of your own software
          example: id_1
        alias:
          type: string
          nullable: true
          description: Your company alias
          example: acme
      required:
        - linked_user_origin_id
        - alias
    CreateBatchLinkedUserDto:
      type: object
      properties:
        linked_user_origin_ids:
          nullable: true
          description: The ids of the users in the context of your own software
          example:
            - id_1
          type: array
          items:
            type: string
        alias:
          type: string
          nullable: true
          description: Your company alias
          example: acme
      required:
        - linked_user_origin_ids
        - alias
    ProjectResponse:
      type: object
      properties:
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the project
        name:
          type: string
          example: My Project
          description: Name of the project
        sync_mode:
          type: string
          example: automatic
          description: Synchronization mode of the project
        pull_frequency:
          type: number
          example: 3600
          description: Frequency of pulling data in seconds
        redirect_url:
          type: string
          example: https://example.com/redirect
          description: Redirect URL for the project
        id_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: User ID associated with the project
        id_connector_set:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Connector set ID associated with the project
      required:
        - id_project
        - name
        - sync_mode
        - pull_frequency
        - redirect_url
        - id_user
        - id_connector_set
    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
          example: Project Name
          description: The name of the project
        id_organization:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The organization ID
        id_user:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The user ID
      required:
        - name
        - id_user
    CustomFieldResponse:
      type: object
      properties:
        id_attribute:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Id
        status:
          type: string
          nullable: true
          example: ''
          description: Attribute Status
        ressource_owner_type:
          type: string
          example: ''
          nullable: true
          description: Attribute Ressource Owner Type
        slug:
          type: string
          nullable: true
          example: fav_dish
          description: Attribute Slug
        description:
          type: string
          nullable: true
          example: My favorite dish
          description: Attribute Description
        data_type:
          type: string
          nullable: true
          example: string
          enum:
            - string
            - number
          description: Attribute Data Type
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: Attribute Remote Id
        source:
          type: string
          nullable: true
          example: hubspot
          description: Attribute Source
        id_entity:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Entity Id
        id_project:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Project Id
        scope:
          type: string
          nullable: true
          example: ''
          description: Attribute Scope
        id_consumer:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Attribute Consumer Id
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: Attribute Created Date
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: Attribute Modified Date
      required:
        - id_attribute
        - status
        - ressource_owner_type
        - slug
        - description
        - data_type
        - remote_id
        - source
        - id_entity
        - id_project
        - scope
        - id_consumer
        - created_at
        - modified_at
    DefineTargetFieldDto:
      type: object
      properties:
        object_type_owner:
          type: string
          example: company
          enum:
            - company
            - contact
            - deal
            - lead
            - note
            - task
            - engagement
            - stage
            - user
          nullable: true
        name:
          type: string
          nullable: true
          example: fav_dish
          description: The name of the target field
        description:
          type: string
          nullable: true
          example: My favorite dish
          description: The description of the target field
        data_type:
          type: string
          nullable: true
          example: string
          enum:
            - string
            - number
          description: The data type of the target field
      required:
        - object_type_owner
        - name
        - description
        - data_type
    CustomFieldCreateDto:
      type: object
      properties:
        object_type_owner:
          type: string
          example: company
          enum:
            - company
            - contact
            - deal
            - lead
            - note
            - task
            - engagement
            - stage
            - user
          nullable: true
        name:
          type: string
          nullable: true
          example: my_favorite_dish
          description: The name of the custom field
        description:
          type: string
          nullable: true
          example: Favorite Dish
          description: The description of the custom field
        data_type:
          type: string
          example: string
          nullable: true
          enum:
            - string
            - number
          description: The data type of the custom field
        source_custom_field_id:
          type: string
          nullable: true
          example: id_1
          description: The source custom field ID
        source_provider:
          type: string
          nullable: true
          example: hubspot
          description: The name of the source software/provider
        linked_user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The linked user ID
      required:
        - object_type_owner
        - name
        - description
        - data_type
        - source_custom_field_id
        - source_provider
        - linked_user_id
    MapFieldToProviderDto:
      type: object
      properties:
        attributeId:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The attribute ID
        source_custom_field_id:
          type: string
          nullable: true
          example: id_1
          description: The source custom field ID
        source_provider:
          type: string
          nullable: true
          example: hubspot
          description: The source provider
        linked_user_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The linked user ID
      required:
        - attributeId
        - source_custom_field_id
        - source_provider
        - linked_user_id
    EventResponse:
      type: object
      properties:
        id_event:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the event
        id_connection:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174001
          description: Connection ID associated with the event
        id_project:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174002
          description: Project ID associated with the event
        type:
          type: string
          example: connection.created
          enum:
            - crm.contact.created
            - crm.contact.pulled
            - crm.company.created
            - crm.company.pulled
            - crm.deal.created
            - crm.deal.pulled
            - crm.engagement.created
            - crm.engagement.pulled
            - crm.note.created
            - crm.note.pulled
            - crm.stage.pulled
            - crm.task.pulled
            - crm.task.created
            - crm.user.pulled
            - ticketing.ticket.created
            - ticketing.ticket.pulled
            - ticketing.comment.created
            - ticketing.comment.pulled
            - ticketing.attachment.created
            - ticketing.attachment.pulled
            - ticketing.collection.pulled
            - ticketing.account.pulled
            - ticketing.contact.pulled
            - ticketing.tag.pulled
            - ticketing.team.pulled
            - ticketing.user.pulled
            - ats.activity.created
            - ats.activity.pulled
            - ats.application.created
            - ats.application.pulled
            - ats.attachment.created
            - ats.attachment.pulled
            - ats.candidate.created
            - ats.candidate.pulled
            - ats.department.pulled
            - ats.eecos.pulled
            - ats.interview.created
            - ats.interview.pulled
            - ats.job.pulled
            - ats.jobinterviewstage.pulled
            - ats.offer.created
            - ats.office.pulled
            - ats.rejectreason.pulled
            - ats.scorecard.pulled
            - ats.tag.pulled
            - ats.user.pulled
            - filestorage.file.created
            - filestorage.file.pulled
            - filestorage.folder.created
            - filestorage.folder.pulled
            - filestorage.group.pulled
            - filestorage.user.pulled
            - filestorage.drive.pulled
            - filestorage.permission.pulled
            - filestorage.sharedlink.pulled
            - connection.created
          description: Scope of the event
        status:
          type: string
          example: success
          enum:
            - success
            - fail
          description: Status of the event
        direction:
          type: string
          example: '0'
          description: Direction of the event
        method:
          type: string
          example: POST
          enum:
            - GET
            - POST
            - PUT
            - DELETE
          description: HTTP method used for the event
        url:
          type: string
          example: /crm/companies
          description: URL associated with the event
        provider:
          type: string
          example: hubspot
          description: Provider associated with the event
        timestamp:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: Timestamp of the event
        id_linked_user:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174003
          description: Linked user ID associated with the event
      required:
        - id_event
        - id_connection
        - id_project
        - type
        - status
        - direction
        - method
        - url
        - provider
        - timestamp
        - id_linked_user
    PassThroughRequestDto:
      type: object
      properties:
        method:
          type: string
          enum:
            - GET
            - POST
        path:
          type: string
          nullable: true
        data:
          type: object
        request_format:
          oneOf:
            - type: object
              additionalProperties: true
            - type: array
              items:
                type: object
                additionalProperties: true
          nullable: true
        overrideBaseUrl:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - method
        - path
        - data
        - request_format
        - overrideBaseUrl
    UnifiedMarketingautomationActionOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationActionInput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationAutomationInput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationCampaignInput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationContactInput:
      type: object
      properties: {}
    UnifiedMarketingautomationEmailOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationEventOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationListInput:
      type: object
      properties: {}
    UnifiedMarketingautomationMessageOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateOutput:
      type: object
      properties: {}
    UnifiedMarketingautomationTemplateInput:
      type: object
      properties: {}
    UnifiedMarketingautomationUserOutput:
      type: object
      properties: {}
    UnifiedAccountingAccountOutput:
      type: object
      properties:
        name:
          type: string
          example: Cash
          nullable: true
          description: The name of the account
        description:
          type: string
          example: Main cash account for daily operations
          nullable: true
          description: A description of the account
        classification:
          type: string
          example: Asset
          nullable: true
          description: The classification of the account
        type:
          type: string
          example: Current Asset
          nullable: true
          description: The type of the account
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the account
        current_balance:
          type: number
          example: 10000
          nullable: true
          description: The current balance of the account
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the account
        account_number:
          type: string
          example: '1000'
          nullable: true
          description: The account number
        parent_account:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent account
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example: &ref_86
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the account record
        remote_id:
          type: string
          example: account_1234
          nullable: true
          description: The remote ID of the account in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the account in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the account record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the account record
    UnifiedAccountingAccountInput:
      type: object
      properties:
        name:
          type: string
          example: Cash
          nullable: true
          description: The name of the account
        description:
          type: string
          example: Main cash account for daily operations
          nullable: true
          description: A description of the account
        classification:
          type: string
          example: Asset
          nullable: true
          description: The classification of the account
        type:
          type: string
          example: Current Asset
          nullable: true
          description: The type of the account
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the account
        current_balance:
          type: number
          example: 10000
          nullable: true
          description: The current balance of the account
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the account
        account_number:
          type: string
          example: '1000'
          nullable: true
          description: The account number
        parent_account:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent account
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example: *ref_86
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingAddressOutput:
      type: object
      properties:
        type:
          type: string
          example: Billing
          nullable: true
          description: The type of the address
        street_1:
          type: string
          example: 123 Main St
          nullable: true
          description: The first line of the street address
        street_2:
          type: string
          example: Apt 4B
          nullable: true
          description: The second line of the street address
        city:
          type: string
          example: New York
          nullable: true
          description: The city of the address
        state:
          type: string
          example: NY
          nullable: true
          description: The state of the address
        country_subdivision:
          type: string
          example: New York
          nullable: true
          description: The country subdivision (e.g., province or state) of the address
        country:
          type: string
          example: USA
          nullable: true
          description: The country of the address
        zip:
          type: string
          example: '10001'
          nullable: true
          description: The zip or postal code of the address
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the address record
        remote_id:
          type: string
          example: address_1234
          nullable: true
          description: The remote ID of the address in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the address in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the address record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the address record
    UnifiedAccountingAttachmentOutput:
      type: object
      properties:
        file_name:
          type: string
          example: invoice.pdf
          nullable: true
          description: The name of the attached file
        file_url:
          type: string
          example: https://example.com/files/invoice.pdf
          nullable: true
          description: The URL where the file can be accessed
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        field_mappings:
          type: object
          example: &ref_87
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the attachment record
        remote_id:
          type: string
          example: attachment_1234
          nullable: true
          description: The remote ID of the attachment in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the attachment record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the attachment record
    UnifiedAccountingAttachmentInput:
      type: object
      properties:
        file_name:
          type: string
          example: invoice.pdf
          nullable: true
          description: The name of the attached file
        file_url:
          type: string
          example: https://example.com/files/invoice.pdf
          nullable: true
          description: The URL where the file can be accessed
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        field_mappings:
          type: object
          example: *ref_87
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    LineItem:
      type: object
      properties:
        name:
          type: string
          example: Net Income
          nullable: true
          description: The name of the report item
        value:
          type: number
          example: 100000
          nullable: true
          description: The value of the report item
        type:
          type: string
          example: Operating Activities
          nullable: true
          description: The type of the report item
        parent_item:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent item
        remote_id:
          type: string
          example: report_item_1234
          nullable: true
          description: The remote ID of the report item
        remote_generated_at:
          format: date-time
          type: string
          example: '2024-07-01T12:00:00Z'
          nullable: true
          description: The date when the report item was generated in the remote system
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info object
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          description: The created date of the report item
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          description: The last modified date of the report item
    UnifiedAccountingBalancesheetOutput:
      type: object
      properties:
        name:
          type: string
          example: Q2 2024 Balance Sheet
          nullable: true
          description: The name of the balance sheet
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency used in the balance sheet
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        date:
          format: date-time
          type: string
          example: '2024-06-30T23:59:59Z'
          nullable: true
          description: The date of the balance sheet
        net_assets:
          type: number
          example: 1000000
          nullable: true
          description: The net assets value
        assets:
          example:
            - Cash
            - Accounts Receivable
            - Inventory
          nullable: true
          description: The list of assets
          type: array
          items:
            type: string
        liabilities:
          example:
            - Accounts Payable
            - Long-term Debt
          nullable: true
          description: The list of liabilities
          type: array
          items:
            type: string
        equity:
          example:
            - Common Stock
            - Retained Earnings
          nullable: true
          description: The list of equity items
          type: array
          items:
            type: string
        remote_generated_at:
          format: date-time
          type: string
          example: '2024-07-01T12:00:00Z'
          nullable: true
          description: The date when the balance sheet was generated in the remote system
        line_items:
          description: The report items associated with this balance sheet
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the balance sheet record
        remote_id:
          type: string
          example: balancesheet_1234
          nullable: true
          description: The remote ID of the balance sheet in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the balance sheet in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the balance sheet record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the balance sheet record
    UnifiedAccountingCashflowstatementOutput:
      type: object
      properties:
        name:
          type: string
          example: Q2 2024 Cash Flow Statement
          nullable: true
          description: The name of the cash flow statement
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency used in the cash flow statement
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company
        start_period:
          format: date-time
          type: string
          example: '2024-04-01T00:00:00Z'
          nullable: true
          description: The start date of the period covered by the cash flow statement
        end_period:
          format: date-time
          type: string
          example: '2024-06-30T23:59:59Z'
          nullable: true
          description: The end date of the period covered by the cash flow statement
        cash_at_beginning_of_period:
          type: number
          example: 1000000
          nullable: true
          description: The cash balance at the beginning of the period
        cash_at_end_of_period:
          type: number
          example: 1200000
          nullable: true
          description: The cash balance at the end of the period
        remote_generated_at:
          format: date-time
          type: string
          example: '2024-07-01T12:00:00Z'
          nullable: true
          description: >-
            The date when the cash flow statement was generated in the remote system
        line_items:
          description: The report items associated with this cash flow statement
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the cash flow statement record
        remote_id:
          type: string
          example: cashflowstatement_1234
          nullable: true
          description: >-
            The remote ID of the cash flow statement in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: >-
            The remote data of the cash flow statement in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the cash flow statement record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the cash flow statement record
    UnifiedAccountingCompanyinfoOutput:
      type: object
      properties:
        name:
          type: string
          example: Acme Corporation
          nullable: true
          description: The name of the company
        legal_name:
          type: string
          example: Acme Corporation LLC
          nullable: true
          description: The legal name of the company
        tax_number:
          type: string
          example: '123456789'
          nullable: true
          description: The tax number of the company
        fiscal_year_end_month:
          type: number
          example: 12
          nullable: true
          description: The month of the fiscal year end (1-12)
        fiscal_year_end_day:
          type: number
          example: 31
          nullable: true
          description: The day of the fiscal year end (1-31)
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency used by the company
        urls:
          example:
            - https://www.acmecorp.com
            - https://store.acmecorp.com
          nullable: true
          description: The URLs associated with the company
          type: array
          items:
            type: string
        tracking_categories:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories used by the company
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company info record
        remote_id:
          type: string
          example: company_1234
          nullable: true
          description: The remote ID of the company info in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the company info in the context of the 3rd Party
        remote_created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the company info was created in the remote system
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the company info record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the company info record
    UnifiedAccountingContactOutput:
      type: object
      properties:
        name:
          type: string
          example: John Doe
          nullable: true
          description: The name of the contact
        is_supplier:
          type: boolean
          example: true
          nullable: true
          description: Indicates if the contact is a supplier
        is_customer:
          type: boolean
          example: false
          nullable: true
          description: Indicates if the contact is a customer
        email_address:
          type: string
          example: john.doe@example.com
          nullable: true
          description: The email address of the contact
        tax_number:
          type: string
          example: '123456789'
          nullable: true
          description: The tax number of the contact
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the contact
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency associated with the contact
        remote_updated_at:
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the contact was last updated in the remote system
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example: &ref_88
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the contact record
        remote_id:
          type: string
          example: contact_1234
          nullable: true
          description: The remote ID of the contact in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the contact in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the contact record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the contact record
    UnifiedAccountingContactInput:
      type: object
      properties:
        name:
          type: string
          example: John Doe
          nullable: true
          description: The name of the contact
        is_supplier:
          type: boolean
          example: true
          nullable: true
          description: Indicates if the contact is a supplier
        is_customer:
          type: boolean
          example: false
          nullable: true
          description: Indicates if the contact is a customer
        email_address:
          type: string
          example: john.doe@example.com
          nullable: true
          description: The email address of the contact
        tax_number:
          type: string
          example: '123456789'
          nullable: true
          description: The tax number of the contact
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the contact
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency associated with the contact
        remote_updated_at:
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the contact was last updated in the remote system
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example: *ref_88
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingCreditnoteOutput:
      type: object
      properties:
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the credit note transaction
        status:
          type: string
          example: Issued
          nullable: true
          description: The status of the credit note
        number:
          type: string
          example: CN-001
          nullable: true
          description: The number of the credit note
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the credit note
        total_amount:
          type: number
          example: 10000
          nullable: true
          description: The total amount of the credit note
        remaining_credit:
          type: number
          example: 5000
          nullable: true
          description: The remaining credit on the credit note
        tracking_categories:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories associated with the credit note
          type: array
          items:
            type: string
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the credit note
        payments:
          example:
            - PAYMENT-001
            - PAYMENT-002
          nullable: true
          description: The payments associated with the credit note
          type: array
          items:
            type: string
        applied_payments:
          example:
            - APPLIED-001
            - APPLIED-002
          nullable: true
          description: The applied payments associated with the credit note
          type: array
          items:
            type: string
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the credit note record
        remote_id:
          type: string
          example: creditnote_1234
          nullable: true
          description: The remote ID of the credit note in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the credit note in the context of the 3rd Party
        remote_created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the credit note was created in the remote system
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the credit note was last updated in the remote system
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the credit note record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the credit note record
    UnifiedAccountingExpenseOutput:
      type: object
      properties:
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the expense transaction
        total_amount:
          type: number
          example: 10000
          nullable: true
          description: The total amount of the expense
        sub_total:
          type: number
          example: 9000
          nullable: true
          description: The sub-total amount of the expense (before tax)
        total_tax_amount:
          type: number
          example: 1000
          nullable: true
          description: The total tax amount of the expense
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the expense
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the expense
        memo:
          type: string
          example: Business lunch with client
          nullable: true
          description: A memo or description for the expense
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        tracking_categories:
          example: &ref_89
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories associated with the expense
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this expense
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_90
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the expense record
        remote_id:
          type: string
          example: expense_1234
          nullable: true
          description: The remote ID of the expense in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the expense in the context of the 3rd Party
        remote_created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the expense was created in the remote system
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the expense record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the expense record
    UnifiedAccountingExpenseInput:
      type: object
      properties:
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the expense transaction
        total_amount:
          type: number
          example: 10000
          nullable: true
          description: The total amount of the expense
        sub_total:
          type: number
          example: 9000
          nullable: true
          description: The sub-total amount of the expense (before tax)
        total_tax_amount:
          type: number
          example: 1000
          nullable: true
          description: The total tax amount of the expense
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the expense
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the expense
        memo:
          type: string
          example: Business lunch with client
          nullable: true
          description: A memo or description for the expense
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        tracking_categories:
          example: *ref_89
          nullable: true
          description: The UUIDs of the tracking categories associated with the expense
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this expense
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_90
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingIncomestatementOutput:
      type: object
      properties:
        name:
          type: string
          example: Q2 2024 Income Statement
          nullable: true
          description: The name of the income statement
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency used in the income statement
        start_period:
          format: date-time
          type: string
          example: '2024-04-01T00:00:00Z'
          nullable: true
          description: The start date of the period covered by the income statement
        end_period:
          format: date-time
          type: string
          example: '2024-06-30T23:59:59Z'
          nullable: true
          description: The end date of the period covered by the income statement
        gross_profit:
          type: number
          example: 1000000
          nullable: true
          description: The gross profit for the period
        net_operating_income:
          type: number
          example: 800000
          nullable: true
          description: The net operating income for the period
        net_income:
          type: number
          example: 750000
          nullable: true
          description: The net income for the period
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the income statement record
        remote_id:
          type: string
          example: incomestatement_1234
          nullable: true
          description: >-
            The remote ID of the income statement in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: >-
            The remote data of the income statement in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the income statement record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the income statement record
    UnifiedAccountingInvoiceOutput:
      type: object
      properties:
        type:
          type: string
          example: Sales
          nullable: true
          description: The type of the invoice
        number:
          type: string
          example: INV-001
          nullable: true
          description: The invoice number
        issue_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date the invoice was issued
        due_date:
          format: date-time
          type: string
          example: '2024-07-15T12:00:00Z'
          nullable: true
          description: The due date of the invoice
        paid_on_date:
          format: date-time
          type: string
          example: '2024-07-10T12:00:00Z'
          nullable: true
          description: The date the invoice was paid
        memo:
          type: string
          example: Payment for services rendered
          nullable: true
          description: A memo or note on the invoice
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the invoice
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the invoice
        total_discount:
          type: number
          example: 1000
          nullable: true
          description: The total discount applied to the invoice
        sub_total:
          type: number
          example: 10000
          nullable: true
          description: The subtotal of the invoice
        status:
          type: string
          example: Paid
          nullable: true
          description: The status of the invoice
        total_tax_amount:
          type: number
          example: 1000
          nullable: true
          description: The total tax amount on the invoice
        total_amount:
          type: number
          example: 11000
          nullable: true
          description: The total amount of the invoice
        balance:
          type: number
          example: 0
          nullable: true
          description: The remaining balance on the invoice
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        tracking_categories:
          example: &ref_91
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories associated with the invoice
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this invoice
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_92
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the invoice record
        remote_id:
          type: string
          example: invoice_1234
          nullable: true
          description: The remote ID of the invoice in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the invoice in the context of the 3rd Party
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the invoice was last updated in the remote system
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the invoice record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the invoice record
    UnifiedAccountingInvoiceInput:
      type: object
      properties:
        type:
          type: string
          example: Sales
          nullable: true
          description: The type of the invoice
        number:
          type: string
          example: INV-001
          nullable: true
          description: The invoice number
        issue_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date the invoice was issued
        due_date:
          format: date-time
          type: string
          example: '2024-07-15T12:00:00Z'
          nullable: true
          description: The due date of the invoice
        paid_on_date:
          format: date-time
          type: string
          example: '2024-07-10T12:00:00Z'
          nullable: true
          description: The date the invoice was paid
        memo:
          type: string
          example: Payment for services rendered
          nullable: true
          description: A memo or note on the invoice
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the invoice
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the invoice
        total_discount:
          type: number
          example: 1000
          nullable: true
          description: The total discount applied to the invoice
        sub_total:
          type: number
          example: 10000
          nullable: true
          description: The subtotal of the invoice
        status:
          type: string
          example: Paid
          nullable: true
          description: The status of the invoice
        total_tax_amount:
          type: number
          example: 1000
          nullable: true
          description: The total tax amount on the invoice
        total_amount:
          type: number
          example: 11000
          nullable: true
          description: The total amount of the invoice
        balance:
          type: number
          example: 0
          nullable: true
          description: The remaining balance on the invoice
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        tracking_categories:
          example: *ref_91
          nullable: true
          description: The UUIDs of the tracking categories associated with the invoice
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this invoice
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_92
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingItemOutput:
      type: object
      properties:
        name:
          type: string
          example: Product A
          nullable: true
          description: The name of the accounting item
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the accounting item
        unit_price:
          type: number
          example: 1000
          nullable: true
          description: The unit price of the item in cents
        purchase_price:
          type: number
          example: 800
          nullable: true
          description: The purchase price of the item in cents
        sales_account:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated sales account
        purchase_account:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated purchase account
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the accounting item record
        remote_id:
          type: string
          example: item_1234
          nullable: true
          description: The remote ID of the item in the context of the 3rd Party
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the item was last updated in the remote system
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the item in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the accounting item record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the accounting item record
    UnifiedAccountingJournalentryOutput:
      type: object
      properties:
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        payments:
          example: &ref_93
            - payment1
            - payment2
          nullable: true
          description: The payments associated with the journal entry
          type: array
          items:
            type: string
        applied_payments:
          example: &ref_94
            - appliedPayment1
            - appliedPayment2
          nullable: true
          description: The applied payments for the journal entry
          type: array
          items:
            type: string
        memo:
          type: string
          example: Monthly expense journal entry
          nullable: true
          description: A memo or note for the journal entry
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the journal entry
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the journal entry
        id_acc_company_info:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: false
          description: The UUID of the associated company info
        journal_number:
          type: string
          example: JE-001
          nullable: true
          description: The journal number
        tracking_categories:
          example: &ref_95
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: >-
            The UUIDs of the tracking categories associated with the journal entry
          type: array
          items:
            type: string
        id_acc_accounting_period:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        posting_status:
          type: string
          example: Posted
          nullable: true
          description: The posting status of the journal entry
        line_items:
          description: The line items associated with this journal entry
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_96
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the journal entry record
        remote_id:
          type: string
          example: journal_entry_1234
          nullable: false
          description: The remote ID of the journal entry in the context of the 3rd Party
        remote_created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the journal entry was created in the remote system
        remote_modiified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: >-
            The date when the journal entry was last modified in the remote system
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the journal entry in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the journal entry record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the journal entry record
    UnifiedAccountingJournalentryInput:
      type: object
      properties:
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        payments:
          example: *ref_93
          nullable: true
          description: The payments associated with the journal entry
          type: array
          items:
            type: string
        applied_payments:
          example: *ref_94
          nullable: true
          description: The applied payments for the journal entry
          type: array
          items:
            type: string
        memo:
          type: string
          example: Monthly expense journal entry
          nullable: true
          description: A memo or note for the journal entry
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the journal entry
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the journal entry
        id_acc_company_info:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: false
          description: The UUID of the associated company info
        journal_number:
          type: string
          example: JE-001
          nullable: true
          description: The journal number
        tracking_categories:
          example: *ref_95
          nullable: true
          description: >-
            The UUIDs of the tracking categories associated with the journal entry
          type: array
          items:
            type: string
        id_acc_accounting_period:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        posting_status:
          type: string
          example: Posted
          nullable: true
          description: The posting status of the journal entry
        line_items:
          description: The line items associated with this journal entry
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_96
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingPaymentOutput:
      type: object
      properties:
        invoice_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated invoice
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the payment
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the payment
        total_amount:
          type: number
          example: 10000
          nullable: true
          description: The total amount of the payment in cents
        type:
          type: string
          example: Credit Card
          nullable: true
          description: The type of payment
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        tracking_categories:
          example: &ref_97
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories associated with the payment
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this payment
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_98
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the payment record
        remote_id:
          type: string
          example: payment_1234
          nullable: true
          description: The remote ID of the payment in the context of the 3rd Party
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the payment was last updated in the remote system
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the payment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the payment record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the payment record
    UnifiedAccountingPaymentInput:
      type: object
      properties:
        invoice_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated invoice
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the payment
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the payment
        total_amount:
          type: number
          example: 10000
          nullable: true
          description: The total amount of the payment in cents
        type:
          type: string
          example: Credit Card
          nullable: true
          description: The type of payment
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        tracking_categories:
          example: *ref_97
          nullable: true
          description: The UUIDs of the tracking categories associated with the payment
          type: array
          items:
            type: string
        line_items:
          description: The line items associated with this payment
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_98
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingPhonenumberOutput:
      type: object
      properties:
        number:
          type: string
          example: '+1234567890'
          nullable: true
          description: The phone number
        type:
          type: string
          example: Mobile
          nullable: true
          description: The type of phone number
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: false
          description: The UUID of the associated contact
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the phone number record
        remote_id:
          type: string
          example: phone_1234
          nullable: true
          description: The remote ID of the phone number in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the phone number in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the phone number record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the phone number record
    UnifiedAccountingPurchaseorderOutput:
      type: object
      properties:
        status:
          type: string
          example: Pending
          nullable: true
          description: The status of the purchase order
        issue_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The issue date of the purchase order
        purchase_order_number:
          type: string
          example: PO-001
          nullable: true
          description: The purchase order number
        delivery_date:
          format: date-time
          type: string
          example: '2024-07-15T12:00:00Z'
          nullable: true
          description: The delivery date for the purchase order
        delivery_address:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the delivery address
        customer:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer
        vendor:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the vendor
        memo:
          type: string
          example: Purchase order for Q3 inventory
          nullable: true
          description: A memo or note for the purchase order
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company
        total_amount:
          type: number
          example: 100000
          nullable: true
          description: The total amount of the purchase order in cents
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the purchase order
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the purchase order
        tracking_categories:
          example: &ref_99
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: >-
            The UUIDs of the tracking categories associated with the purchase order
          type: array
          items:
            type: string
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        line_items:
          description: The line items associated with this purchase order
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_100
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the purchase order record
        remote_id:
          type: string
          example: po_1234
          nullable: true
          description: The remote ID of the purchase order in the context of the 3rd Party
        remote_created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the purchase order was created in the remote system
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: >-
            The date when the purchase order was last updated in the remote system
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: >-
            The remote data of the purchase order in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the purchase order record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the purchase order record
    UnifiedAccountingPurchaseorderInput:
      type: object
      properties:
        status:
          type: string
          example: Pending
          nullable: true
          description: The status of the purchase order
        issue_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The issue date of the purchase order
        purchase_order_number:
          type: string
          example: PO-001
          nullable: true
          description: The purchase order number
        delivery_date:
          format: date-time
          type: string
          example: '2024-07-15T12:00:00Z'
          nullable: true
          description: The delivery date for the purchase order
        delivery_address:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the delivery address
        customer:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer
        vendor:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the vendor
        memo:
          type: string
          example: Purchase order for Q3 inventory
          nullable: true
          description: A memo or note for the purchase order
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the company
        total_amount:
          type: number
          example: 100000
          nullable: true
          description: The total amount of the purchase order in cents
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the purchase order
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the purchase order
        tracking_categories:
          example: *ref_99
          nullable: true
          description: >-
            The UUIDs of the tracking categories associated with the purchase order
          type: array
          items:
            type: string
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        line_items:
          description: The line items associated with this purchase order
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_100
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedAccountingTaxrateOutput:
      type: object
      properties:
        description:
          type: string
          example: VAT 20%
          nullable: true
          description: The description of the tax rate
        total_tax_ratge:
          type: number
          example: 2000
          nullable: true
          description: The total tax rate in basis points (e.g., 2000 for 20%)
        effective_tax_rate:
          type: number
          example: 1900
          nullable: true
          description: The effective tax rate in basis points (e.g., 1900 for 19%)
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the tax rate record
        remote_id:
          type: string
          example: tax_rate_1234
          nullable: true
          description: The remote ID of the tax rate in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the tax rate in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the tax rate record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the tax rate record
    UnifiedAccountingTrackingcategoryOutput:
      type: object
      properties:
        name:
          type: string
          example: Department
          nullable: true
          description: The name of the tracking category
        status:
          type: string
          example: Active
          nullable: true
          description: The status of the tracking category
        category_type:
          type: string
          example: Expense
          nullable: true
          description: The type of the tracking category
        parent_category:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent category, if applicable
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the tracking category record
        remote_id:
          type: string
          example: tracking_category_1234
          nullable: true
          description: >-
            The remote ID of the tracking category in the context of the 3rd Party
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: >-
            The remote data of the tracking category in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The created date of the tracking category record
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The last modified date of the tracking category record
    UnifiedAccountingTransactionOutput:
      type: object
      properties:
        transaction_type:
          type: string
          example: Sale
          nullable: true
          description: The type of the transaction
        number:
          type: string
          example: '1001'
          nullable: true
          description: The transaction number
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        total_amount:
          type: string
          example: '1000'
          nullable: true
          description: The total amount of the transaction
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the transaction
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the transaction
        tracking_categories:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUIDs of the tracking categories associated with the transaction
          type: array
          items:
            type: string
        account_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated account
        contact_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated contact
        company_info_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company info
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        line_items:
          description: The line items associated with this transaction
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the transaction record
        remote_id:
          type: string
          example: remote_id_1234
          nullable: false
          description: The remote ID of the transaction
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: false
          description: The created date of the transaction
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: >-
            The remote data of the tracking category in the context of the 3rd Party
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: false
          description: The last modified date of the transaction
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date when the transaction was last updated in the remote system
    UnifiedAccountingVendorcreditOutput:
      type: object
      properties:
        number:
          type: string
          example: VC-001
          nullable: true
          description: The number of the vendor credit
        transaction_date:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: The date of the transaction
        vendor:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the vendor associated with the credit
        total_amount:
          type: string
          example: '1000'
          nullable: true
          description: The total amount of the vendor credit
        currency:
          type: string
          example: USD
          nullable: true
          description: The currency of the vendor credit
        exchange_rate:
          type: string
          example: '1.2'
          nullable: true
          description: The exchange rate applied to the vendor credit
        company_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated company
        tracking_categories:
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: >-
            The UUID of the tracking categories associated with the vendor credit
          type: array
          items:
            type: string
        accounting_period_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the associated accounting period
        line_items:
          description: The line items associated with this vendor credit
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example:
            custom_field_1: value1
            custom_field_2: value2
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the vendor credit record
        remote_id:
          type: string
          example: remote_id_1234
          nullable: true
          description: The remote ID of the vendor credit
        created_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: false
          description: The created date of the vendor credit
        modified_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: false
          description: The last modified date of the vendor credit
        remote_updated_at:
          format: date-time
          type: string
          example: '2024-06-15T12:00:00Z'
          nullable: true
          description: >-
            The date when the vendor credit was last updated in the remote system
        remote_data:
          type: object
          example:
            raw_data:
              additional_field: some value
          nullable: true
          description: The remote data of the vendor credit in the context of the 3rd Party
    UnifiedFilestorageFolderOutput:
      type: object
      properties:
        name:
          type: string
          example: school
          nullable: true
          description: The name of the folder
        size:
          type: string
          example: '2048'
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          example: https://example.com/school
          nullable: true
          description: The url of the folder
        description:
          type: string
          example: All things school related
          description: The description of the folder
        drive_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          example: &ref_101
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the folder
        remote_id:
          type: string
          example: id_1
          description: The remote ID of the folder in the context of the 3rd Party
          nullable: true
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: The remote data of the folder in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The created date of the folder
          nullable: true
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the folder
          nullable: true
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageFolderInput:
      type: object
      properties:
        name:
          type: string
          example: school
          nullable: true
          description: The name of the folder
        size:
          type: string
          example: '2048'
          nullable: true
          description: The size of the folder
        folder_url:
          type: string
          example: https://example.com/school
          nullable: true
          description: The url of the folder
        description:
          type: string
          example: All things school related
          description: The description of the folder
        drive_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the drive tied to the folder
        parent_folder_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the parent folder
        shared_link:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the shared link tied to the folder
        permission:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the permission tied to the folder
        field_mappings:
          type: object
          example: *ref_101
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
      required:
        - name
        - size
        - folder_url
        - description
        - drive_id
        - parent_folder_id
        - shared_link
        - permission
    UnifiedFilestorageGroupOutput:
      type: object
      properties:
        name:
          type: string
          example: My group
          nullable: true
          description: The name of the group
        users:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/UnifiedFilestorageUserOutput'
          example:
            - 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: Uuids of users of the group
        remote_was_deleted:
          type: boolean
          example: false
          nullable: true
          description: >-
            Indicates whether or not this object has been deleted in the third party platform.
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the group
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the group in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          additionalProperties: true
          description: The remote data of the group in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - name
        - users
        - remote_was_deleted
    UnifiedFilestorageUserOutput:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: Joe Doe
          description: The name of the user
        email:
          type: string
          nullable: true
          example: joe.doe@gmail.com
          description: The email of the user
        is_me:
          type: boolean
          nullable: true
          example: true
          description: Whether the user is the one who linked this account.
        field_mappings:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the user
        remote_id:
          type: string
          nullable: true
          example: id_1
          description: The id of the user in the context of the 3rd Party
        remote_data:
          type: object
          nullable: true
          example:
            fav_dish: broccoli
            fav_color: red
          additionalProperties: true
          description: The remote data of the user in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          nullable: true
          example: '2024-10-01T12:00:00Z'
          description: The modified date of the object
      required:
        - name
        - email
        - is_me
    Variant:
      type: object
      properties: {}
    UnifiedEcommerceProductOutput:
      type: object
      properties:
        product_url:
          type: string
          example: https://product_url/tee
          nullable: true
          description: The URL of the product
        product_type:
          type: string
          example: teeshirt
          nullable: true
          description: The type of the product
        product_status:
          type: string
          example: ACTIVE
          nullable: true
          description: The status of the product. Either ACTIVE, DRAFT OR ARCHIVED.
        images_urls:
          example: &ref_102
            - https://myproduct/image
          nullable: true
          description: The URLs of the product images
          type: array
          items:
            type: string
        description:
          type: string
          example: best tee ever
          nullable: true
          description: The description of the product
        vendor:
          type: string
          example: vendor_extern
          nullable: true
          description: The vendor of the product
        variants:
          example: &ref_103
            - title: teeshirt
              price: 20
              sku: '3'
              options: null
              weight: 10
              inventory_quantity: 100
          description: The variants of the product
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        tags:
          example: &ref_104
            - tag_1
          nullable: true
          description: The tags associated with the product
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example: &ref_105
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the product
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the product in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceProductInput:
      type: object
      properties:
        product_url:
          type: string
          example: https://product_url/tee
          nullable: true
          description: The URL of the product
        product_type:
          type: string
          example: teeshirt
          nullable: true
          description: The type of the product
        product_status:
          type: string
          example: ACTIVE
          nullable: true
          description: The status of the product. Either ACTIVE, DRAFT OR ARCHIVED.
        images_urls:
          example: *ref_102
          nullable: true
          description: The URLs of the product images
          type: array
          items:
            type: string
        description:
          type: string
          example: best tee ever
          nullable: true
          description: The description of the product
        vendor:
          type: string
          example: vendor_extern
          nullable: true
          description: The vendor of the product
        variants:
          example: *ref_103
          description: The variants of the product
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        tags:
          example: *ref_104
          nullable: true
          description: The tags associated with the product
          type: array
          items:
            type: string
        field_mappings:
          type: object
          example: *ref_105
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedEcommerceOrderOutput:
      type: object
      properties:
        order_status:
          type: string
          example: UNSHIPPED
          nullable: true
          description: The status of the order
        order_number:
          type: string
          example: 19823838833
          nullable: true
          description: The number of the order
        payment_status:
          type: string
          example: SUCCESS
          nullable: true
          description: The payment status of the order
        currency:
          type: string
          nullable: true
          example: AUD
          description: >-
            The currency of the order. Authorized value must be of type CurrencyCode (ISO 4217)
        total_price:
          type: number
          example: 300
          nullable: true
          description: The total price of the order
        total_discount:
          type: number
          example: 10
          nullable: true
          description: The total discount on the order
        total_shipping:
          type: number
          example: 120
          nullable: true
          description: The total shipping cost of the order
        total_tax:
          type: number
          example: 120
          nullable: true
          description: The total tax on the order
        fulfillment_status:
          type: string
          nullable: true
          example: PENDING
          description: The fulfillment status of the order
        customer_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer associated with the order
        items:
          nullable: true
          example: &ref_106
            - remote_id: '12345'
              product_id: prod_001
              variant_id: var_001
              sku: SKU123
              title: Sample Product
              quantity: 2
              price: '19.99'
              total: '39.98'
              fulfillment_status: PENDING
              requires_shipping: true
              taxable: true
              weight: 1.5
              variant_title: Size M
              vendor: Sample Vendor
              properties:
                - name: Color
                  value: Red
              tax_lines:
                - title: Sales Tax
                  price: '3.00'
                  rate: 0.075
              discount_allocations:
                - amount: '5.00'
                  discount_application_index: 0
          description: The items in the order
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: &ref_107
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the order
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the order in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceOrderInput:
      type: object
      properties:
        order_status:
          type: string
          example: UNSHIPPED
          nullable: true
          description: The status of the order
        order_number:
          type: string
          example: 19823838833
          nullable: true
          description: The number of the order
        payment_status:
          type: string
          example: SUCCESS
          nullable: true
          description: The payment status of the order
        currency:
          type: string
          nullable: true
          example: AUD
          description: >-
            The currency of the order. Authorized value must be of type CurrencyCode (ISO 4217)
        total_price:
          type: number
          example: 300
          nullable: true
          description: The total price of the order
        total_discount:
          type: number
          example: 10
          nullable: true
          description: The total discount on the order
        total_shipping:
          type: number
          example: 120
          nullable: true
          description: The total shipping cost of the order
        total_tax:
          type: number
          example: 120
          nullable: true
          description: The total tax on the order
        fulfillment_status:
          type: string
          nullable: true
          example: PENDING
          description: The fulfillment status of the order
        customer_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer associated with the order
        items:
          nullable: true
          example: *ref_106
          description: The items in the order
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        field_mappings:
          type: object
          example: *ref_107
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
    UnifiedEcommerceCustomerOutput:
      type: object
      properties:
        email:
          type: string
          example: joedoe@gmail.com
          nullable: true
          description: The email of the customer
        first_name:
          type: string
          example: Joe
          nullable: true
          description: The first name of the customer
        last_name:
          type: string
          example: Doe
          nullable: true
          description: The last name of the customer
        phone_number:
          type: string
          example: '+336666666'
          nullable: true
          description: The phone number of the customer
        addresses:
          example:
            - address_type: PERSONAL
              street_1: 5th Avenue
              state: New York
              city: New York
              country: United States of America
          nullable: true
          description: The addresses of the customer
          type: array
          items:
            $ref: '#/components/schemas/Address'
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the customer
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the customer in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedEcommerceFulfillmentOutput:
      type: object
      properties:
        carrier:
          type: string
          nullable: true
          example: DHL
          description: The carrier of the fulfilment
        tracking_urls:
          nullable: true
          example:
            - https://tracing-url.sf.com
          description: The tracking URLs of the fulfilment
          type: array
          items:
            type: string
        tracking_numbers:
          nullable: true
          example:
            - track_1029_191919
          description: The tracking numbers of the fulfilment
          type: array
          items:
            type: string
        items:
          type: object
          nullable: true
          example: {}
          description: The items in the fulfilment
        order_id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the order associated with the fulfilment
        field_mappings:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: >-
            The custom field mappings of the object between the remote 3rd party & Panora
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the fulfilment
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The remote ID of the fulfilment in the context of the 3rd Party
        remote_data:
          type: object
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the customer in the context of the 3rd Party
        created_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
    UnifiedTicketingAttachmentOutput:
      type: object
      properties:
        file_name:
          type: string
          example: features_planning.pdf
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          example: https://example.com/features_planning.pdf
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          example: &ref_108
            fav_dish: broccoli
            fav_color: red
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
        id:
          type: string
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          nullable: true
          description: The UUID of the attachment
        remote_id:
          type: string
          example: id_1
          nullable: true
          description: The id of the attachment in the context of the 3rd Party
        remote_data:
          type: object
          additionalProperties: true
          example:
            fav_dish: broccoli
            fav_color: red
          nullable: true
          description: The remote data of the attachment in the context of the 3rd Party
        created_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The created date of the object
        modified_at:
          format: date-time
          type: string
          example: '2024-10-01T12:00:00Z'
          nullable: true
          description: The modified date of the object
      required:
        - file_name
        - file_url
        - uploader
    UnifiedTicketingAttachmentInput:
      type: object
      properties:
        file_name:
          type: string
          example: features_planning.pdf
          nullable: true
          description: The file name of the attachment
        file_url:
          type: string
          example: https://example.com/features_planning.pdf
          nullable: true
          description: The file url of the attachment
        uploader:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The uploader's UUID of the attachment
        ticket_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the ticket the attachment is tied to
        comment_id:
          type: string
          nullable: true
          example: 801f9ede-c698-4e66-a7fc-48d19eebaa4f
          description: The UUID of the comment the attachment is tied to
        field_mappings:
          type: object
          nullable: true
          example: *ref_108
          description: >-
            The custom field mappings of the attachment between the remote 3rd party & Panora
          additionalProperties: true
      required:
        - file_name
        - file_url
        - uploader
security:
  - api_key: []
x-speakeasy-name-override:
  - operationId: ^retrieve.*
    methodNameOverride: retrieve
  - operationId: ^list.*
    methodNameOverride: list
  - operationId: ^create.*
    methodNameOverride: create
