/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type CreateUserDto = {
    firstName: string;
    lastName: string;
    email: string;
    strategy: string;
    passwordHash?: string | undefined;
    idOrganisation?: string | undefined;
};

/** @internal */
export namespace CreateUserDto$ {
    export const inboundSchema: z.ZodType<CreateUserDto, z.ZodTypeDef, unknown> = z
        .object({
            first_name: z.string(),
            last_name: z.string(),
            email: z.string(),
            strategy: z.string(),
            password_hash: z.string().optional(),
            id_organisation: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                last_name: "lastName",
                password_hash: "passwordHash",
                id_organisation: "idOrganisation",
            });
        });

    export type Outbound = {
        first_name: string;
        last_name: string;
        email: string;
        strategy: string;
        password_hash?: string | undefined;
        id_organisation?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateUserDto> = z
        .object({
            firstName: z.string(),
            lastName: z.string(),
            email: z.string(),
            strategy: z.string(),
            passwordHash: z.string().optional(),
            idOrganisation: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                passwordHash: "password_hash",
                idOrganisation: "id_organisation",
            });
        });
}
