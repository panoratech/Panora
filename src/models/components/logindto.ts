/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type LoginDto = {
    idUser?: string | undefined;
    email: string;
    passwordHash: string;
};

/** @internal */
export namespace LoginDto$ {
    export const inboundSchema: z.ZodType<LoginDto, z.ZodTypeDef, unknown> = z
        .object({
            id_user: z.string().optional(),
            email: z.string(),
            password_hash: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                id_user: "idUser",
                password_hash: "passwordHash",
            });
        });

    export type Outbound = {
        id_user?: string | undefined;
        email: string;
        password_hash: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginDto> = z
        .object({
            idUser: z.string().optional(),
            email: z.string(),
            passwordHash: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                idUser: "id_user",
                passwordHash: "password_hash",
            });
        });
}
