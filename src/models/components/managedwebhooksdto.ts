/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ManagedWebhooksDto = {
    idConnection: string;
    scopes: Array<string>;
    apiVersion?: string | undefined;
    remoteSignatureSecret?: string | undefined;
};

/** @internal */
export namespace ManagedWebhooksDto$ {
    export const inboundSchema: z.ZodType<ManagedWebhooksDto, z.ZodTypeDef, unknown> = z
        .object({
            id_connection: z.string(),
            scopes: z.array(z.string()),
            api_version: z.string().optional(),
            remote_signature_secret: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id_connection: "idConnection",
                api_version: "apiVersion",
                remote_signature_secret: "remoteSignatureSecret",
            });
        });

    export type Outbound = {
        id_connection: string;
        scopes: Array<string>;
        api_version?: string | undefined;
        remote_signature_secret?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ManagedWebhooksDto> = z
        .object({
            idConnection: z.string(),
            scopes: z.array(z.string()),
            apiVersion: z.string().optional(),
            remoteSignatureSecret: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                idConnection: "id_connection",
                apiVersion: "api_version",
                remoteSignatureSecret: "remote_signature_secret",
            });
        });
}
