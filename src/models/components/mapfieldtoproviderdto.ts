/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type MapFieldToProviderDto = {
    attributeId: string;
    sourceCustomFieldId: string;
    sourceProvider: string;
    linkedUserId: string;
};

/** @internal */
export namespace MapFieldToProviderDto$ {
    export const inboundSchema: z.ZodType<MapFieldToProviderDto, z.ZodTypeDef, unknown> = z
        .object({
            attributeId: z.string(),
            source_custom_field_id: z.string(),
            source_provider: z.string(),
            linked_user_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                source_custom_field_id: "sourceCustomFieldId",
                source_provider: "sourceProvider",
                linked_user_id: "linkedUserId",
            });
        });

    export type Outbound = {
        attributeId: string;
        source_custom_field_id: string;
        source_provider: string;
        linked_user_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MapFieldToProviderDto> = z
        .object({
            attributeId: z.string(),
            sourceCustomFieldId: z.string(),
            sourceProvider: z.string(),
            linkedUserId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                sourceCustomFieldId: "source_custom_field_id",
                sourceProvider: "source_provider",
                linkedUserId: "linked_user_id",
            });
        });
}
