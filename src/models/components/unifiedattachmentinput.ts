/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAttachmentInputFieldMappings = {};

export type UnifiedAttachmentInput = {
    /**
     * The file name of the attachment
     */
    fileName: string;
    /**
     * The file url of the attachment
     */
    fileUrl: string;
    /**
     * The uploader's uuid of the attachment
     */
    uploader: string;
    fieldMappings: UnifiedAttachmentInputFieldMappings;
};

/** @internal */
export namespace UnifiedAttachmentInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAttachmentInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAttachmentInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAttachmentInput$ {
    export const inboundSchema: z.ZodType<UnifiedAttachmentInput, z.ZodTypeDef, unknown> = z
        .object({
            file_name: z.string(),
            file_url: z.string(),
            uploader: z.string(),
            field_mappings: z.lazy(() => UnifiedAttachmentInputFieldMappings$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                file_name: "fileName",
                file_url: "fileUrl",
                field_mappings: "fieldMappings",
            });
        });

    export type Outbound = {
        file_name: string;
        file_url: string;
        uploader: string;
        field_mappings: UnifiedAttachmentInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAttachmentInput> = z
        .object({
            fileName: z.string(),
            fileUrl: z.string(),
            uploader: z.string(),
            fieldMappings: z.lazy(() => UnifiedAttachmentInputFieldMappings$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fileName: "file_name",
                fileUrl: "file_url",
                fieldMappings: "field_mappings",
            });
        });
}
