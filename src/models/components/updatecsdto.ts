/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UpdateCSDto = {
    idCs: string;
    status: boolean;
    attributes: Array<string>;
    values: Array<string>;
};

/** @internal */
export namespace UpdateCSDto$ {
    export const inboundSchema: z.ZodType<UpdateCSDto, z.ZodTypeDef, unknown> = z
        .object({
            id_cs: z.string(),
            status: z.boolean(),
            attributes: z.array(z.string()),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                id_cs: "idCs",
            });
        });

    export type Outbound = {
        id_cs: string;
        status: boolean;
        attributes: Array<string>;
        values: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateCSDto> = z
        .object({
            idCs: z.string(),
            status: z.boolean(),
            attributes: z.array(z.string()),
            values: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                idCs: "id_cs",
            });
        });
}
