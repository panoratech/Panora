/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddAccountingAttachmentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedAttachmentInput: components.UnifiedAttachmentInput;
};

export type AddAccountingAttachmentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedAttachmentOutput | undefined;
};

export type AddAccountingAttachmentResponse =
    | AddAccountingAttachmentResponseBody
    | components.UnifiedAttachmentOutput;

/** @internal */
export namespace AddAccountingAttachmentRequest$ {
    export const inboundSchema: z.ZodType<AddAccountingAttachmentRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedAttachmentInput: components.UnifiedAttachmentInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedAttachmentInput: "unifiedAttachmentInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedAttachmentInput: components.UnifiedAttachmentInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddAccountingAttachmentRequest> =
        z
            .object({
                xConnectionToken: z.string(),
                remoteData: z.boolean().optional(),
                unifiedAttachmentInput: components.UnifiedAttachmentInput$.outboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    xConnectionToken: "x-connection-token",
                    remoteData: "remote_data",
                    unifiedAttachmentInput: "UnifiedAttachmentInput",
                });
            });
}

/** @internal */
export namespace AddAccountingAttachmentResponseBody$ {
    export const inboundSchema: z.ZodType<
        AddAccountingAttachmentResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedAttachmentOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedAttachmentOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddAccountingAttachmentResponseBody
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedAttachmentOutput$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace AddAccountingAttachmentResponse$ {
    export const inboundSchema: z.ZodType<AddAccountingAttachmentResponse, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => AddAccountingAttachmentResponseBody$.inboundSchema),
            components.UnifiedAttachmentOutput$.inboundSchema,
        ]);

    export type Outbound =
        | AddAccountingAttachmentResponseBody$.Outbound
        | components.UnifiedAttachmentOutput$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddAccountingAttachmentResponse
    > = z.union([
        z.lazy(() => AddAccountingAttachmentResponseBody$.outboundSchema),
        components.UnifiedAttachmentOutput$.outboundSchema,
    ]);
}
