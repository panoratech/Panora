/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddDepartmentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedDepartmentInput: components.UnifiedDepartmentInput;
};

export type AddDepartmentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedDepartmentOutput | undefined;
};

export type AddDepartmentResponse = components.UnifiedDepartmentOutput | AddDepartmentResponseBody;

/** @internal */
export namespace AddDepartmentRequest$ {
    export const inboundSchema: z.ZodType<AddDepartmentRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedDepartmentInput: components.UnifiedDepartmentInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedDepartmentInput: "unifiedDepartmentInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedDepartmentInput: components.UnifiedDepartmentInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDepartmentRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedDepartmentInput: components.UnifiedDepartmentInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedDepartmentInput: "UnifiedDepartmentInput",
            });
        });
}

/** @internal */
export namespace AddDepartmentResponseBody$ {
    export const inboundSchema: z.ZodType<AddDepartmentResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedDepartmentOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedDepartmentOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDepartmentResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedDepartmentOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddDepartmentResponse$ {
    export const inboundSchema: z.ZodType<AddDepartmentResponse, z.ZodTypeDef, unknown> = z.union([
        components.UnifiedDepartmentOutput$.inboundSchema,
        z.lazy(() => AddDepartmentResponseBody$.inboundSchema),
    ]);

    export type Outbound =
        | components.UnifiedDepartmentOutput$.Outbound
        | AddDepartmentResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDepartmentResponse> = z.union(
        [
            components.UnifiedDepartmentOutput$.outboundSchema,
            z.lazy(() => AddDepartmentResponseBody$.outboundSchema),
        ]
    );
}
