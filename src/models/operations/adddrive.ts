/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddDriveRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Filestorage software.
     */
    remoteData?: boolean | undefined;
    unifiedDriveInput: components.UnifiedDriveInput;
};

export type AddDriveResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedDriveOutput | undefined;
};

export type AddDriveResponse = components.UnifiedDriveOutput | AddDriveResponseBody;

/** @internal */
export namespace AddDriveRequest$ {
    export const inboundSchema: z.ZodType<AddDriveRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedDriveInput: components.UnifiedDriveInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedDriveInput: "unifiedDriveInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedDriveInput: components.UnifiedDriveInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDriveRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedDriveInput: components.UnifiedDriveInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedDriveInput: "UnifiedDriveInput",
            });
        });
}

/** @internal */
export namespace AddDriveResponseBody$ {
    export const inboundSchema: z.ZodType<AddDriveResponseBody, z.ZodTypeDef, unknown> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedDriveOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedDriveOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDriveResponseBody> = z.object(
        {
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedDriveOutput$.outboundSchema.optional(),
        }
    );
}

/** @internal */
export namespace AddDriveResponse$ {
    export const inboundSchema: z.ZodType<AddDriveResponse, z.ZodTypeDef, unknown> = z.union([
        components.UnifiedDriveOutput$.inboundSchema,
        z.lazy(() => AddDriveResponseBody$.inboundSchema),
    ]);

    export type Outbound = components.UnifiedDriveOutput$.Outbound | AddDriveResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddDriveResponse> = z.union([
        components.UnifiedDriveOutput$.outboundSchema,
        z.lazy(() => AddDriveResponseBody$.outboundSchema),
    ]);
}
