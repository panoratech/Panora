/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddEmployeePayrollRunRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedEmployeePayrollRunInput: components.UnifiedEmployeePayrollRunInput;
};

export type AddEmployeePayrollRunResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedEmployeePayrollRunOutput | undefined;
};

export type AddEmployeePayrollRunResponse =
    | components.UnifiedEmployeePayrollRunOutput
    | AddEmployeePayrollRunResponseBody;

/** @internal */
export namespace AddEmployeePayrollRunRequest$ {
    export const inboundSchema: z.ZodType<AddEmployeePayrollRunRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedEmployeePayrollRunInput:
                components.UnifiedEmployeePayrollRunInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedEmployeePayrollRunInput: "unifiedEmployeePayrollRunInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedEmployeePayrollRunInput: components.UnifiedEmployeePayrollRunInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddEmployeePayrollRunRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedEmployeePayrollRunInput:
                components.UnifiedEmployeePayrollRunInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedEmployeePayrollRunInput: "UnifiedEmployeePayrollRunInput",
            });
        });
}

/** @internal */
export namespace AddEmployeePayrollRunResponseBody$ {
    export const inboundSchema: z.ZodType<
        AddEmployeePayrollRunResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedEmployeePayrollRunOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedEmployeePayrollRunOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddEmployeePayrollRunResponseBody
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedEmployeePayrollRunOutput$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace AddEmployeePayrollRunResponse$ {
    export const inboundSchema: z.ZodType<AddEmployeePayrollRunResponse, z.ZodTypeDef, unknown> =
        z.union([
            components.UnifiedEmployeePayrollRunOutput$.inboundSchema,
            z.lazy(() => AddEmployeePayrollRunResponseBody$.inboundSchema),
        ]);

    export type Outbound =
        | components.UnifiedEmployeePayrollRunOutput$.Outbound
        | AddEmployeePayrollRunResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddEmployeePayrollRunResponse> =
        z.union([
            components.UnifiedEmployeePayrollRunOutput$.outboundSchema,
            z.lazy(() => AddEmployeePayrollRunResponseBody$.outboundSchema),
        ]);
}
