/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddJobRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedJobInput: components.UnifiedJobInput;
};

export type AddJobResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedJobOutput | undefined;
};

export type AddJobResponse = components.UnifiedJobOutput | AddJobResponseBody;

/** @internal */
export namespace AddJobRequest$ {
    export const inboundSchema: z.ZodType<AddJobRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedJobInput: components.UnifiedJobInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedJobInput: "unifiedJobInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedJobInput: components.UnifiedJobInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddJobRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedJobInput: components.UnifiedJobInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedJobInput: "UnifiedJobInput",
            });
        });
}

/** @internal */
export namespace AddJobResponseBody$ {
    export const inboundSchema: z.ZodType<AddJobResponseBody, z.ZodTypeDef, unknown> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedJobOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedJobOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddJobResponseBody> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedJobOutput$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace AddJobResponse$ {
    export const inboundSchema: z.ZodType<AddJobResponse, z.ZodTypeDef, unknown> = z.union([
        components.UnifiedJobOutput$.inboundSchema,
        z.lazy(() => AddJobResponseBody$.inboundSchema),
    ]);

    export type Outbound = components.UnifiedJobOutput$.Outbound | AddJobResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddJobResponse> = z.union([
        components.UnifiedJobOutput$.outboundSchema,
        z.lazy(() => AddJobResponseBody$.outboundSchema),
    ]);
}
