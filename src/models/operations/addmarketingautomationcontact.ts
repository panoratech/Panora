/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddMarketingAutomationContactRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
    unifiedContactInput: components.UnifiedContactInput;
};

export type AddMarketingAutomationContactResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedContactOutput | undefined;
};

export type AddMarketingAutomationContactResponse =
    | components.UnifiedContactOutput
    | AddMarketingAutomationContactResponseBody;

/** @internal */
export namespace AddMarketingAutomationContactRequest$ {
    export const inboundSchema: z.ZodType<
        AddMarketingAutomationContactRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedContactInput: components.UnifiedContactInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedContactInput: "unifiedContactInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedContactInput: components.UnifiedContactInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddMarketingAutomationContactRequest
    > = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedContactInput: components.UnifiedContactInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedContactInput: "UnifiedContactInput",
            });
        });
}

/** @internal */
export namespace AddMarketingAutomationContactResponseBody$ {
    export const inboundSchema: z.ZodType<
        AddMarketingAutomationContactResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedContactOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedContactOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddMarketingAutomationContactResponseBody
    > = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedContactOutput$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace AddMarketingAutomationContactResponse$ {
    export const inboundSchema: z.ZodType<
        AddMarketingAutomationContactResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([
        components.UnifiedContactOutput$.inboundSchema,
        z.lazy(() => AddMarketingAutomationContactResponseBody$.inboundSchema),
    ]);

    export type Outbound =
        | components.UnifiedContactOutput$.Outbound
        | AddMarketingAutomationContactResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AddMarketingAutomationContactResponse
    > = z.union([
        components.UnifiedContactOutput$.outboundSchema,
        z.lazy(() => AddMarketingAutomationContactResponseBody$.outboundSchema),
    ]);
}
