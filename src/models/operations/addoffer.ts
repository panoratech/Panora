/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddOfferRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedOfferInput: components.UnifiedOfferInput;
};

export type AddOfferResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedOfferOutput | undefined;
};

export type AddOfferResponse = components.UnifiedOfferOutput | AddOfferResponseBody;

/** @internal */
export namespace AddOfferRequest$ {
    export const inboundSchema: z.ZodType<AddOfferRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedOfferInput: components.UnifiedOfferInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedOfferInput: "unifiedOfferInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedOfferInput: components.UnifiedOfferInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddOfferRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedOfferInput: components.UnifiedOfferInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedOfferInput: "UnifiedOfferInput",
            });
        });
}

/** @internal */
export namespace AddOfferResponseBody$ {
    export const inboundSchema: z.ZodType<AddOfferResponseBody, z.ZodTypeDef, unknown> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedOfferOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedOfferOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddOfferResponseBody> = z.object(
        {
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedOfferOutput$.outboundSchema.optional(),
        }
    );
}

/** @internal */
export namespace AddOfferResponse$ {
    export const inboundSchema: z.ZodType<AddOfferResponse, z.ZodTypeDef, unknown> = z.union([
        components.UnifiedOfferOutput$.inboundSchema,
        z.lazy(() => AddOfferResponseBody$.inboundSchema),
    ]);

    export type Outbound = components.UnifiedOfferOutput$.Outbound | AddOfferResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddOfferResponse> = z.union([
        components.UnifiedOfferOutput$.outboundSchema,
        z.lazy(() => AddOfferResponseBody$.outboundSchema),
    ]);
}
