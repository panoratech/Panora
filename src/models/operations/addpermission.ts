/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddPermissionRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Filestorage software.
     */
    remoteData?: boolean | undefined;
    unifiedPermissionInput: components.UnifiedPermissionInput;
};

export type AddPermissionResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedPermissionOutput | undefined;
};

export type AddPermissionResponse = components.UnifiedPermissionOutput | AddPermissionResponseBody;

/** @internal */
export namespace AddPermissionRequest$ {
    export const inboundSchema: z.ZodType<AddPermissionRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedPermissionInput: components.UnifiedPermissionInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedPermissionInput: "unifiedPermissionInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedPermissionInput: components.UnifiedPermissionInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPermissionRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedPermissionInput: components.UnifiedPermissionInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedPermissionInput: "UnifiedPermissionInput",
            });
        });
}

/** @internal */
export namespace AddPermissionResponseBody$ {
    export const inboundSchema: z.ZodType<AddPermissionResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedPermissionOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedPermissionOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPermissionResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedPermissionOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddPermissionResponse$ {
    export const inboundSchema: z.ZodType<AddPermissionResponse, z.ZodTypeDef, unknown> = z.union([
        components.UnifiedPermissionOutput$.inboundSchema,
        z.lazy(() => AddPermissionResponseBody$.inboundSchema),
    ]);

    export type Outbound =
        | components.UnifiedPermissionOutput$.Outbound
        | AddPermissionResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPermissionResponse> = z.union(
        [
            components.UnifiedPermissionOutput$.outboundSchema,
            z.lazy(() => AddPermissionResponseBody$.outboundSchema),
        ]
    );
}
