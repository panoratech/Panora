/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddTimeoffBalanceRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedTimeoffBalanceInput: components.UnifiedTimeoffBalanceInput;
};

export type AddTimeoffBalanceResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTimeoffBalanceOutput | undefined;
};

export type AddTimeoffBalanceResponse =
    | components.UnifiedTimeoffBalanceOutput
    | AddTimeoffBalanceResponseBody;

/** @internal */
export namespace AddTimeoffBalanceRequest$ {
    export const inboundSchema: z.ZodType<AddTimeoffBalanceRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedTimeoffBalanceInput: components.UnifiedTimeoffBalanceInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedTimeoffBalanceInput: "unifiedTimeoffBalanceInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedTimeoffBalanceInput: components.UnifiedTimeoffBalanceInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTimeoffBalanceRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedTimeoffBalanceInput: components.UnifiedTimeoffBalanceInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedTimeoffBalanceInput: "UnifiedTimeoffBalanceInput",
            });
        });
}

/** @internal */
export namespace AddTimeoffBalanceResponseBody$ {
    export const inboundSchema: z.ZodType<AddTimeoffBalanceResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedTimeoffBalanceOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedTimeoffBalanceOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTimeoffBalanceResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedTimeoffBalanceOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddTimeoffBalanceResponse$ {
    export const inboundSchema: z.ZodType<AddTimeoffBalanceResponse, z.ZodTypeDef, unknown> =
        z.union([
            components.UnifiedTimeoffBalanceOutput$.inboundSchema,
            z.lazy(() => AddTimeoffBalanceResponseBody$.inboundSchema),
        ]);

    export type Outbound =
        | components.UnifiedTimeoffBalanceOutput$.Outbound
        | AddTimeoffBalanceResponseBody$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTimeoffBalanceResponse> =
        z.union([
            components.UnifiedTimeoffBalanceOutput$.outboundSchema,
            z.lazy(() => AddTimeoffBalanceResponseBody$.outboundSchema),
        ]);
}
