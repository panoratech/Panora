/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type HandleApiKeyCallbackRequest = {
    state: string;
    bodyDataType: components.BodyDataType;
};

/** @internal */
export namespace HandleApiKeyCallbackRequest$ {
    export const inboundSchema: z.ZodType<HandleApiKeyCallbackRequest, z.ZodTypeDef, unknown> = z
        .object({
            state: z.string(),
            BodyDataType: components.BodyDataType$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                BodyDataType: "bodyDataType",
            });
        });

    export type Outbound = {
        state: string;
        BodyDataType: components.BodyDataType$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HandleApiKeyCallbackRequest> = z
        .object({
            state: z.string(),
            bodyDataType: components.BodyDataType$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                bodyDataType: "BodyDataType",
            });
        });
}
